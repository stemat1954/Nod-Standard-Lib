page list
{
	type <t>node1  @32224|list(337,13) --internal
	 from ("t")-> (unmatched)
	 from ("node1")-> type node1  @34528|list(22,6)
	 viable = no
	{
		method begin  @34304|list(342,17) --external
		 viable = no
		{

			given
			{
				object io  @64880|list(342,17) --internal
				 type: (direct)-> type <t>node1  @32224|list(337,13)

				proxy ~base  @48752|list(342,17) --internal
				 type: ("t")-> (unmatched)
			}

			BLOCK* --domain
			{
				MAKE
				 proxy: (direct)-> proxy (anon)  @12592|list(344,5)
				 type: ("node1")-> type node1  @34528|list(22,6)
				 permission: [upd]
				TRANSLATE* --provisional --base
				 lead: ("io")-> object io  @64880|list(342,17)
				 method: (direct)-> method $18<7>( as_base<node1> )  @39024|$appendix(,)
				 result: (direct)-> proxy (anon)  @12592|list(344,5)
				CALL* --provisional
				 lead: (direct)-> blank (anon)  @09968|list(,)
				 method: ("begin")-> (unmatched)
				TRANSLATE* --provisional --base
				 lead: ("io")-> object io  @64880|list(342,17)
				 method: ("as_base<t>")-> method as_base<t>  @27760|object(48,3)
				JOIN* --provisional
				 left: ("~base")-> proxy ~base  @48752|list(342,17)
				 right: (direct)-> blank (anon)  @15136|list(,)
			}
		}
	}

	nom type link1  @19216|list(19,10) --external
	 viable = yes
	 equivalent: (direct)-> type $6<7>( op<node1> )  @38288|$appendix(,)

	type list  @30304|list(99,6) --external
	 from (direct)-> type $8<7><9>( serial_access<node1><list_cursor> )  @38672|$appendix(,)
	 viable = yes
	{
		method begin  @31152|list(167,3) --external
		 viable = yes
		{

			given
			{
				object io  @39392|list(167,3) --internal
				 type: (direct)-> type list  @30304|list(99,6)
			}

			BLOCK --domain
			{
				MAKE
				 proxy: (direct)-> proxy (anon)  @08336|list(169,6)
				 type: (direct)-> type $8<7><9>( serial_access<node1><list_cursor> )  @38672|$appendix(,)
				 permission: [init]
				TRANSLATE --base
				 lead: ("io")-> object io  @39392|list(167,3)
				 method: (direct)-> method $18<$8<7><9>>( as_base<serial_access<node1><list_cursor>> )  @33616|$appendix(,)
				 result: (direct)-> proxy (anon)  @08336|list(169,6)
				CALL --initial, fundamental
				 lead: (direct)-> proxy (anon)  @08336|list(169,6)
				 method: ("begin")-> method begin  @36800|$appendix(,)
			}
		}

		method begin  @28656|list(172,3) --external
		 viable = yes
		{

			given
			{
				object io  @31712|list(172,3) --internal
				 type: (direct)-> type list  @30304|list(99,6)

				object other  @32032|list(172,3) --internal
				 type: ("list")-> type list  @30304|list(99,6)
			}

			BLOCK --domain
			{
				MAKE
				 object: (direct)-> object (anon)  @33312|list(174,10)
				 type: ("bool")-> type bool  @19936|bool(5,6)
				CALL --fundamental
				 lead: ("other.first")-> object first  @37424|list(327,3)
				 method: ("is_not_null?")-> method is_not_null?  @42320|object(36,3)
				 output: (direct)-> object (anon)  @33312|list(174,10)
				IF
				 condition: (direct)-> object (anon)  @33312|list(174,10)
				{
					true branch: BLOCK --domain
					{
						CALL --fundamental
						 lead: ("io.first")-> object first  @37424|list(327,3)
						 method: (direct)-> method $30<7>( begin<node1> )  @34032|$appendix(,)
						 input: ("other.first")-> object first  @37424|list(327,3)
						CALL --fundamental
						 lead: ("io.last")-> object last  @34224|list(328,3)
						 method: (direct)-> method $30<7>( begin<node1> )  @34032|$appendix(,)
						 input: ("other.last")-> object last  @34224|list(328,3)
						CALL --terminal, fundamental
						 lead: ("other.current")-> object current  @33904|list(329,3)
						 method: ("recycle")-> method recycle  @42736|object(38,3)
					}
				}
			}
		}

		method get_current  @30736|list(198,3) --external
		 viable = yes
		{

			given
			{
				object io  @40352|list(198,3) --internal
				 type: (direct)-> type list  @30304|list(99,6)

				object link1  @37472|list(198,3) --internal
				 type: (direct)-> type $6<7>( op<node1> )  @38288|$appendix(,)
			}

			BLOCK --domain
			{
				MAKE
				 object: (direct)-> object (anon)  @37792|list(200,10)
				 type: ("bool")-> type bool  @19936|bool(5,6)
				CALL --fundamental
				 lead: ("io.current")-> object current  @33904|list(329,3)
				 method: ("is_not_null?")-> method is_not_null?  @42320|object(36,3)
				 output: (direct)-> object (anon)  @37792|list(200,10)
				IF
				 condition: (direct)-> object (anon)  @37792|list(200,10)
				{
					true branch: CALL --fundamental
					 lead: ("given\link1")-> object link1  @37472|list(198,3)
					 method: (direct)-> method $30<7>( begin<node1> )  @34032|$appendix(,)
					 input: ("io.current")-> object current  @33904|list(329,3)
				}
			}
		}

		method get_first  @28240|list(188,3) --external
		 viable = yes
		{

			given
			{
				object io  @34912|list(188,3) --internal
				 type: (direct)-> type list  @30304|list(99,6)

				object link1  @38432|list(188,3) --internal
				 type: (direct)-> type $6<7>( op<node1> )  @38288|$appendix(,)
			}

			BLOCK --domain
			{
				MAKE
				 object: (direct)-> object (anon)  @36192|list(190,10)
				 type: ("bool")-> type bool  @19936|bool(5,6)
				CALL --fundamental
				 lead: ("io.first")-> object first  @37424|list(327,3)
				 method: ("is_not_null?")-> method is_not_null?  @42320|object(36,3)
				 output: (direct)-> object (anon)  @36192|list(190,10)
				IF
				 condition: (direct)-> object (anon)  @36192|list(190,10)
				{
					true branch: CALL --fundamental
					 lead: ("given\link1")-> object link1  @38432|list(188,3)
					 method: (direct)-> method $30<7>( begin<node1> )  @34032|$appendix(,)
					 input: ("io.first")-> object first  @37424|list(327,3)
				}
			}
		}

		method get_last  @29072|list(193,3) --external
		 viable = yes
		{

			given
			{
				object io  @36512|list(193,3) --internal
				 type: (direct)-> type list  @30304|list(99,6)

				object link1  @35232|list(193,3) --internal
				 type: (direct)-> type $6<7>( op<node1> )  @38288|$appendix(,)
			}

			BLOCK --domain
			{
				MAKE
				 object: (direct)-> object (anon)  @40032|list(195,10)
				 type: ("bool")-> type bool  @19936|bool(5,6)
				CALL --fundamental
				 lead: ("io.last")-> object last  @34224|list(328,3)
				 method: ("is_not_null?")-> method is_not_null?  @42320|object(36,3)
				 output: (direct)-> object (anon)  @40032|list(195,10)
				IF
				 condition: (direct)-> object (anon)  @40032|list(195,10)
				{
					true branch: CALL --fundamental
					 lead: ("given\link1")-> object link1  @35232|list(193,3)
					 method: (direct)-> method $30<7>( begin<node1> )  @34032|$appendix(,)
					 input: ("io.last")-> object last  @34224|list(328,3)
				}
			}
		}

		method get_next  @42624|list(203,3) --external
		 viable = yes
		{

			given
			{
				object io  @29472|list(203,3) --internal
				 type: (direct)-> type list  @30304|list(99,6)

				object link1  @29152|list(203,3) --internal
				 type: (direct)-> type $6<7>( op<node1> )  @38288|$appendix(,)
			}

			BLOCK --domain
			{
				MAKE
				 object: (direct)-> object (anon)  @29792|list(205,10)
				 type: ("bool")-> type bool  @19936|bool(5,6)
				CALL --fundamental
				 lead: ("io.current")-> object current  @33904|list(329,3)
				 method: ("is_not_null?")-> method is_not_null?  @42320|object(36,3)
				 output: (direct)-> object (anon)  @29792|list(205,10)
				IF
				 condition: (direct)-> object (anon)  @29792|list(205,10)
				{
					true branch: BLOCK --domain
					{
						MAKE
						 proxy: (direct)-> proxy (anon)  @08640|list(205,50)
						 type: ("node1")-> type node1  @34528|list(22,6)
						 permission: [upd]
						CALL --fundamental
						 lead: ("io.current")-> object current  @33904|list(329,3)
						 method: ("deref")-> method deref  @36384|$appendix(,)
						 result: (direct)-> proxy (anon)  @08640|list(205,50)
						CALL
						 lead: (direct)-> proxy (anon)  @08640|list(205,50)
						 method: ("get_next")-> method get_next  @29488|list(34,3)
						 output: ("given\link1")-> object link1  @29152|list(203,3)
					}
				}
			}
		}

		method go_first  @43040|list(214,3) --external
		 viable = yes
		{

			given
			{
				object io  @04144|list(214,3) --internal
				 type: (direct)-> type list  @30304|list(99,6)
			}

			BLOCK --domain
			{
				MAKE
				 object: (direct)-> object (anon)  @06704|list(216,10)
				 type: ("bool")-> type bool  @19936|bool(5,6)
				CALL --fundamental
				 lead: ("io.first")-> object first  @37424|list(327,3)
				 method: ("is_not_null?")-> method is_not_null?  @42320|object(36,3)
				 output: (direct)-> object (anon)  @06704|list(216,10)
				IF
				 condition: (direct)-> object (anon)  @06704|list(216,10)
				{
					true branch: BLOCK --domain
					{
						CALL --terminal, fundamental
						 lead: ("io.current")-> object current  @33904|list(329,3)
						 method: ("recycle")-> method recycle  @42736|object(38,3)
						CALL --fundamental
						 lead: ("io.current")-> object current  @33904|list(329,3)
						 method: (direct)-> method $30<7>( begin<node1> )  @34032|$appendix(,)
						 input: ("io.first")-> object first  @37424|list(327,3)
					}
				}
			}
		}

		method go_front  @35552|list(209,3) --external
		 viable = yes
		{

			given
			{
				object io  @30112|list(209,3) --internal
				 type: (direct)-> type list  @30304|list(99,6)
			}

			BLOCK --domain
			{
				CALL --terminal, fundamental
				 lead: ("io.current")-> object current  @33904|list(329,3)
				 method: ("recycle")-> method recycle  @42736|object(38,3)
			}
		}

		method go_here  @29728|list(237,3) --external
		 viable = yes
		{

			given
			{
				object io  @62960|list(237,3) --internal
				 type: (direct)-> type list  @30304|list(99,6)

				object link1  @06384|list(237,3) --internal
				 type: (direct)-> type $6<7>( op<node1> )  @38288|$appendix(,)
			}

			BLOCK --domain
			{
				CALL --terminal, fundamental
				 lead: ("io.current")-> object current  @33904|list(329,3)
				 method: ("recycle")-> method recycle  @42736|object(38,3)
				CALL --fundamental
				 lead: ("io.current")-> object current  @33904|list(329,3)
				 method: (direct)-> method $30<7>( begin<node1> )  @34032|$appendix(,)
				 input: ("given\link1")-> object link1  @06384|list(237,3)
			}
		}

		method go_last  @39296|list(219,3) --external
		 viable = yes
		{

			given
			{
				object io  @07984|list(219,3) --internal
				 type: (direct)-> type list  @30304|list(99,6)
			}

			BLOCK --domain
			{
				MAKE
				 object: (direct)-> object (anon)  @04784|list(221,10)
				 type: ("bool")-> type bool  @19936|bool(5,6)
				CALL --fundamental
				 lead: ("io.last")-> object last  @34224|list(328,3)
				 method: ("is_not_null?")-> method is_not_null?  @42320|object(36,3)
				 output: (direct)-> object (anon)  @04784|list(221,10)
				IF
				 condition: (direct)-> object (anon)  @04784|list(221,10)
				{
					true branch: BLOCK --domain
					{
						CALL --terminal, fundamental
						 lead: ("io.current")-> object current  @33904|list(329,3)
						 method: ("recycle")-> method recycle  @42736|object(38,3)
						CALL --fundamental
						 lead: ("io.current")-> object current  @33904|list(329,3)
						 method: (direct)-> method $30<7>( begin<node1> )  @34032|$appendix(,)
						 input: ("io.last")-> object last  @34224|list(328,3)
					}
				}
			}
		}

		method go_next  @35968|list(224,3) --external
		 viable = yes
		{

			given
			{
				object io  @07664|list(224,3) --internal
				 type: (direct)-> type list  @30304|list(99,6)
			}

			BLOCK --domain
			{
				MAKE
				 object: (direct)-> object (anon)  @01584|list(226,10)
				 type: ("bool")-> type bool  @19936|bool(5,6)
				CALL --fundamental
				 lead: ("io.current")-> object current  @33904|list(329,3)
				 method: ("is_null?")-> method is_null?  @41904|object(34,3)
				 output: (direct)-> object (anon)  @01584|list(226,10)
				IF
				 condition: (direct)-> object (anon)  @01584|list(226,10)
				{
					true branch: BLOCK --domain
					{
						MAKE
						 object: (direct)-> object (anon)  @58800|list(228,11)
						 type: ("bool")-> type bool  @19936|bool(5,6)
						CALL --fundamental
						 lead: ("io.first")-> object first  @37424|list(327,3)
						 method: ("is_not_null?")-> method is_not_null?  @42320|object(36,3)
						 output: (direct)-> object (anon)  @58800|list(228,11)
						IF
						 condition: (direct)-> object (anon)  @58800|list(228,11)
						{
							true branch: BLOCK --domain
							{
								CALL --terminal, fundamental
								 lead: ("io.current")-> object current  @33904|list(329,3)
								 method: ("recycle")-> method recycle  @42736|object(38,3)
								CALL --fundamental
								 lead: ("io.current")-> object current  @33904|list(329,3)
								 method: (direct)-> method $30<7>( begin<node1> )  @34032|$appendix(,)
								 input: ("io.first")-> object first  @37424|list(327,3)
							}
						}
					}
					false branch: BLOCK --domain
					{
						MAKE
						 proxy: (direct)-> proxy (anon)  @13504|list(232,15)
						 type: ("node1")-> type node1  @34528|list(22,6)
						 permission: [upd]
						CALL --fundamental
						 lead: ("io.current")-> object current  @33904|list(329,3)
						 method: ("deref")-> method deref  @36384|$appendix(,)
						 result: (direct)-> proxy (anon)  @13504|list(232,15)
						MAKE
						 object: (direct)-> object nl  @02224|list(232,34)
						 type: (direct)-> type $6<7>( op<node1> )  @38288|$appendix(,)
						CALL
						 lead: (direct)-> proxy (anon)  @13504|list(232,15)
						 method: ("get_next")-> method get_next  @29488|list(34,3)
						 output: (direct)-> object nl  @02224|list(232,34)
						MAKE
						 object: (direct)-> object (anon)  @57520|list(233,11)
						 type: ("bool")-> type bool  @19936|bool(5,6)
						CALL --fundamental
						 lead: ("nl")-> object nl  @02224|list(232,34)
						 method: ("is_not_null?")-> method is_not_null?  @42320|object(36,3)
						 output: (direct)-> object (anon)  @57520|list(233,11)
						IF
						 condition: (direct)-> object (anon)  @57520|list(233,11)
						{
							true branch: BLOCK --domain
							{
								CALL --terminal, fundamental
								 lead: ("io.current")-> object current  @33904|list(329,3)
								 method: ("recycle")-> method recycle  @42736|object(38,3)
								CALL --fundamental
								 lead: ("io.current")-> object current  @33904|list(329,3)
								 method: (direct)-> method $30<7>( begin<node1> )  @34032|$appendix(,)
								 input: ("nl")-> object nl  @02224|list(232,34)
							}
						}
					}
				}
			}
		}

		method insert  @34720|list(242,3) --external
		 viable = yes
		{

			given
			{
				object io  @57840|list(242,3) --internal
				 type: (direct)-> type list  @30304|list(99,6)

				object link1  @63280|list(242,3) --internal
				 type: (direct)-> type $6<7>( op<node1> )  @38288|$appendix(,)
			}

			BLOCK --domain
			{
				MAKE
				 proxy: (direct)-> proxy (anon)  @11376|list(244,15)
				 type: ("node1")-> type node1  @34528|list(22,6)
				 permission: [upd]
				CALL --fundamental
				 lead: ("given\link1")-> object link1  @63280|list(242,3)
				 method: ("deref")-> method deref  @36384|$appendix(,)
				 result: (direct)-> proxy (anon)  @11376|list(244,15)
				CALL
				 lead: (direct)-> proxy (anon)  @11376|list(244,15)
				 method: ("unlink")-> method unlink  @30320|list(44,3)
				MAKE
				 object: (direct)-> object (anon)  @08304|list(245,10)
				 type: ("bool")-> type bool  @19936|bool(5,6)
				CALL --fundamental
				 lead: ("io.current")-> object current  @33904|list(329,3)
				 method: ("is_not_null?")-> method is_not_null?  @42320|object(36,3)
				 output: (direct)-> object (anon)  @08304|list(245,10)
				IF
				 condition: (direct)-> object (anon)  @08304|list(245,10)
				{
					true branch: BLOCK --domain
					{
						MAKE
						 proxy: (direct)-> proxy (anon)  @10464|list(248,15)
						 type: ("node1")-> type node1  @34528|list(22,6)
						 permission: [upd]
						CALL --fundamental
						 lead: ("io.current")-> object current  @33904|list(329,3)
						 method: ("deref")-> method deref  @36384|$appendix(,)
						 result: (direct)-> proxy (anon)  @10464|list(248,15)
						MAKE
						 object: (direct)-> object before  @01904|list(248,39)
						 type: (direct)-> type $6<7>( op<node1> )  @38288|$appendix(,)
						CALL
						 lead: (direct)-> proxy (anon)  @10464|list(248,15)
						 method: ("get_next")-> method get_next  @29488|list(34,3)
						 output: (direct)-> object before  @01904|list(248,39)
						CALL
						 lead: (direct)-> proxy (anon)  @10464|list(248,15)
						 method: ("set_next")-> method set_next  @29904|list(39,3)
						 input: ("given\link1")-> object link1  @63280|list(242,3)
						MAKE
						 object: (direct)-> object (anon)  @03184|list(249,11)
						 type: ("bool")-> type bool  @19936|bool(5,6)
						CALL --fundamental
						 lead: ("before")-> object before  @01904|list(248,39)
						 method: ("is_null?")-> method is_null?  @41904|object(34,3)
						 output: (direct)-> object (anon)  @03184|list(249,11)
						IF
						 condition: (direct)-> object (anon)  @03184|list(249,11)
						{
							true branch: BLOCK --domain
							{
								CALL --terminal, fundamental
								 lead: ("io.last")-> object last  @34224|list(328,3)
								 method: ("recycle")-> method recycle  @42736|object(38,3)
								CALL --fundamental
								 lead: ("io.last")-> object last  @34224|list(328,3)
								 method: (direct)-> method $30<7>( begin<node1> )  @34032|$appendix(,)
								 input: ("given\link1")-> object link1  @63280|list(242,3)
							}
							false branch: BLOCK --domain
							{
								MAKE
								 proxy: (direct)-> proxy (anon)  @10768|list(252,17)
								 type: ("node1")-> type node1  @34528|list(22,6)
								 permission: [upd]
								CALL --fundamental
								 lead: ("given\link1")-> object link1  @63280|list(242,3)
								 method: ("deref")-> method deref  @36384|$appendix(,)
								 result: (direct)-> proxy (anon)  @10768|list(252,17)
								CALL
								 lead: (direct)-> proxy (anon)  @10768|list(252,17)
								 method: ("set_next")-> method set_next  @29904|list(39,3)
								 input: ("before")-> object before  @01904|list(248,39)
							}
						}
					}
					false branch: BLOCK --domain
					{
						MAKE
						 object: (direct)-> object (anon)  @04464|list(254,15)
						 type: ("bool")-> type bool  @19936|bool(5,6)
						CALL --fundamental
						 lead: ("io.first")-> object first  @37424|list(327,3)
						 method: ("is_not_null?")-> method is_not_null?  @42320|object(36,3)
						 output: (direct)-> object (anon)  @04464|list(254,15)
						IF
						 condition: (direct)-> object (anon)  @04464|list(254,15)
						{
							true branch: BLOCK --domain
							{
								MAKE
								 proxy: (direct)-> proxy (anon)  @11072|list(257,16)
								 type: ("node1")-> type node1  @34528|list(22,6)
								 permission: [upd]
								CALL --fundamental
								 lead: ("given\link1")-> object link1  @63280|list(242,3)
								 method: ("deref")-> method deref  @36384|$appendix(,)
								 result: (direct)-> proxy (anon)  @11072|list(257,16)
								CALL
								 lead: (direct)-> proxy (anon)  @11072|list(257,16)
								 method: ("set_next")-> method set_next  @29904|list(39,3)
								 input: ("io.first")-> object first  @37424|list(327,3)
								CALL --terminal, fundamental
								 lead: ("io.first")-> object first  @37424|list(327,3)
								 method: ("recycle")-> method recycle  @42736|object(38,3)
								CALL --fundamental
								 lead: ("io.first")-> object first  @37424|list(327,3)
								 method: (direct)-> method $30<7>( begin<node1> )  @34032|$appendix(,)
								 input: ("given\link1")-> object link1  @63280|list(242,3)
							}
							false branch: BLOCK --domain
							{
								CALL --fundamental
								 lead: ("io.first")-> object first  @37424|list(327,3)
								 method: (direct)-> method $30<7>( begin<node1> )  @34032|$appendix(,)
								 input: ("given\link1")-> object link1  @63280|list(242,3)
								CALL --fundamental
								 lead: ("io.last")-> object last  @34224|list(328,3)
								 method: (direct)-> method $30<7>( begin<node1> )  @34032|$appendix(,)
								 input: ("given\link1")-> object link1  @63280|list(242,3)
							}
						}
					}
				}
			}
		}

		method is_empty?  @26992|list(183,3) --external
		 viable = yes
		{

			given
			{
				object io  @36832|list(183,3) --internal
				 type: (direct)-> type list  @30304|list(99,6)

				object yes  @38752|list(183,3) --internal
				 type: ("bool")-> type bool  @19936|bool(5,6)
			}

			BLOCK --domain
			{
				CALL --fundamental
				 lead: ("io.first")-> object first  @37424|list(327,3)
				 method: ("is_null?")-> method is_null?  @41904|object(34,3)
				 output: ("yes")-> object yes  @38752|list(183,3)
			}
		}

		method remove_next  @37216|list(268,3) --external
		 viable = yes
		{

			given
			{
				object io  @61360|list(268,3) --internal
				 type: (direct)-> type list  @30304|list(99,6)
			}

			BLOCK --domain
			{
				MAKE
				 object: (direct)-> object (anon)  @60080|list(270,10)
				 type: ("bool")-> type bool  @19936|bool(5,6)
				CALL --fundamental
				 lead: ("io.current")-> object current  @33904|list(329,3)
				 method: ("is_not_null?")-> method is_not_null?  @42320|object(36,3)
				 output: (direct)-> object (anon)  @60080|list(270,10)
				IF
				 condition: (direct)-> object (anon)  @60080|list(270,10)
				{
					true branch: BLOCK --domain
					{
						MAKE
						 proxy: (direct)-> proxy (anon)  @12896|list(273,15)
						 type: ("node1")-> type node1  @34528|list(22,6)
						 permission: [upd]
						CALL --fundamental
						 lead: ("io.current")-> object current  @33904|list(329,3)
						 method: ("deref")-> method deref  @36384|$appendix(,)
						 result: (direct)-> proxy (anon)  @12896|list(273,15)
						MAKE
						 object: (direct)-> object next  @63600|list(273,34)
						 type: (direct)-> type $6<7>( op<node1> )  @38288|$appendix(,)
						CALL
						 lead: (direct)-> proxy (anon)  @12896|list(273,15)
						 method: ("get_next")-> method get_next  @29488|list(34,3)
						 output: (direct)-> object next  @63600|list(273,34)
						MAKE
						 object: (direct)-> object (anon)  @60400|list(274,11)
						 type: ("bool")-> type bool  @19936|bool(5,6)
						CALL --fundamental
						 lead: ("next")-> object next  @63600|list(273,34)
						 method: ("is_not_null?")-> method is_not_null?  @42320|object(36,3)
						 output: (direct)-> object (anon)  @60400|list(274,11)
						IF
						 condition: (direct)-> object (anon)  @60400|list(274,11)
						{
							true branch: BLOCK --domain
							{
								MAKE
								 proxy: (direct)-> proxy (anon)  @13200|list(276,10)
								 type: ("node1")-> type node1  @34528|list(22,6)
								 permission: [upd]
								CALL --fundamental
								 lead: ("next")-> object next  @63600|list(273,34)
								 method: ("deref")-> method deref  @36384|$appendix(,)
								 result: (direct)-> proxy (anon)  @13200|list(276,10)
								MAKE
								 object: (direct)-> object next_next  @59120|list(276,34)
								 type: (direct)-> type $6<7>( op<node1> )  @38288|$appendix(,)
								CALL
								 lead: (direct)-> proxy (anon)  @13200|list(276,10)
								 method: ("get_next")-> method get_next  @29488|list(34,3)
								 output: (direct)-> object next_next  @59120|list(276,34)
								CALL
								 lead: (direct)-> proxy (anon)  @13200|list(276,10)
								 method: ("unlink")-> method unlink  @30320|list(44,3)
								MAKE
								 object: (direct)-> object (anon)  @64240|list(277,12)
								 type: ("bool")-> type bool  @19936|bool(5,6)
								CALL --fundamental
								 lead: ("next_next")-> object next_next  @59120|list(276,34)
								 method: ("is_null?")-> method is_null?  @41904|object(34,3)
								 output: (direct)-> object (anon)  @64240|list(277,12)
								IF
								 condition: (direct)-> object (anon)  @64240|list(277,12)
								{
									true branch: BLOCK --domain
									{
										CALL --terminal, fundamental
										 lead: ("io.last")-> object last  @34224|list(328,3)
										 method: ("recycle")-> method recycle  @42736|object(38,3)
										CALL --fundamental
										 lead: ("io.last")-> object last  @34224|list(328,3)
										 method: (direct)-> method $30<7>( begin<node1> )  @34032|$appendix(,)
										 input: ("io.current")-> object current  @33904|list(329,3)
									}
									false branch: BLOCK --domain
									{
										MAKE
										 proxy: (direct)-> proxy (anon)  @11680|list(280,17)
										 type: ("node1")-> type node1  @34528|list(22,6)
										 permission: [upd]
										CALL --fundamental
										 lead: ("io.current")-> object current  @33904|list(329,3)
										 method: ("deref")-> method deref  @36384|$appendix(,)
										 result: (direct)-> proxy (anon)  @11680|list(280,17)
										CALL
										 lead: (direct)-> proxy (anon)  @11680|list(280,17)
										 method: ("set_next")-> method set_next  @29904|list(39,3)
										 input: ("next_next")-> object next_next  @59120|list(276,34)
									}
								}
							}
						}
					}
					false branch: BLOCK --domain
					{
						MAKE
						 object: (direct)-> object (anon)  @59440|list(283,15)
						 type: ("bool")-> type bool  @19936|bool(5,6)
						CALL --fundamental
						 lead: ("io.first")-> object first  @37424|list(327,3)
						 method: ("is_not_null?")-> method is_not_null?  @42320|object(36,3)
						 output: (direct)-> object (anon)  @59440|list(283,15)
						IF
						 condition: (direct)-> object (anon)  @59440|list(283,15)
						{
							true branch: BLOCK --domain
							{
								MAKE
								 proxy: (direct)-> proxy (anon)  @12288|list(286,13)
								 type: ("node1")-> type node1  @34528|list(22,6)
								 permission: [upd]
								CALL --fundamental
								 lead: ("io.first")-> object first  @37424|list(327,3)
								 method: ("deref")-> method deref  @36384|$appendix(,)
								 result: (direct)-> proxy (anon)  @12288|list(286,13)
								MAKE
								 object: (direct)-> object next_next  @63920|list(286,37)
								 type: (direct)-> type $6<7>( op<node1> )  @38288|$appendix(,)
								CALL
								 lead: (direct)-> proxy (anon)  @12288|list(286,13)
								 method: ("get_next")-> method get_next  @29488|list(34,3)
								 output: (direct)-> object next_next  @63920|list(286,37)
								CALL
								 lead: (direct)-> proxy (anon)  @12288|list(286,13)
								 method: ("unlink")-> method unlink  @30320|list(44,3)
								MAKE
								 object: (direct)-> object (anon)  @02544|list(287,11)
								 type: ("bool")-> type bool  @19936|bool(5,6)
								CALL --fundamental
								 lead: ("next_next")-> object next_next  @63920|list(286,37)
								 method: ("is_null?")-> method is_null?  @41904|object(34,3)
								 output: (direct)-> object (anon)  @02544|list(287,11)
								IF
								 condition: (direct)-> object (anon)  @02544|list(287,11)
								{
									true branch: BLOCK --domain
									{
										CALL --terminal, fundamental
										 lead: ("io.first")-> object first  @37424|list(327,3)
										 method: ("recycle")-> method recycle  @42736|object(38,3)
										CALL --terminal, fundamental
										 lead: ("io.last")-> object last  @34224|list(328,3)
										 method: ("recycle")-> method recycle  @42736|object(38,3)
									}
									false branch: BLOCK --domain
									{
										CALL --terminal, fundamental
										 lead: ("io.first")-> object first  @37424|list(327,3)
										 method: ("recycle")-> method recycle  @42736|object(38,3)
										CALL --fundamental
										 lead: ("io.first")-> object first  @37424|list(327,3)
										 method: (direct)-> method $30<7>( begin<node1> )  @34032|$appendix(,)
										 input: ("next_next")-> object next_next  @63920|list(286,37)
									}
								}
							}
						}
					}
				}
			}
		}

		abstract method ~flip_cursor  @40784|list(314,11) --fraternal
		 key = serial_access<t><c>-2
		 viable = yes
		{

			given
			{
				object c  @61040|list(314,11) --internal
				 type: ("list_cursor")-> type list_cursor  @36832|list(57,13)

				object io  @62640|list(314,11) --internal
				 type: (direct)-> type list  @30304|list(99,6)
			}

			BLOCK --domain
			{
				CALL
				 lead: ("c")-> object c  @61040|list(314,11)
				 method: ("flip")-> method flip  @26576|list(80,3)
			}
		}

		abstract method ~move_cursor  @57152|list(309,11) --fraternal
		 key = serial_access<t><c>-1
		 viable = yes
		{

			given
			{
				object c  @60720|list(309,11) --internal
				 type: ("list_cursor")-> type list_cursor  @36832|list(57,13)

				object io  @07024|list(309,11) --internal
				 type: (direct)-> type list  @30304|list(99,6)
			}

			BLOCK --domain
			{
				CALL
				 lead: ("c")-> object c  @60720|list(309,11)
				 method: ("move")-> method move  @27824|list(70,3)
			}
		}

		abstract method ~open_cursor  @56656|list(304,11) --fraternal
		 key = serial_access<t><c>-0
		 viable = yes
		{

			given
			{
				object c  @65200|list(304,11) --internal
				 type: ("list_cursor")-> type list_cursor  @36832|list(57,13)

				object io  @59760|list(304,11) --internal
				 type: (direct)-> type list  @30304|list(99,6)

				object step  @02864|list(304,11) --internal
				 type: ("int")-> type int  @21536|int(6,6)
			}

			BLOCK --domain
			{
				MAKE
				 object: (direct)-> object (anon)  @62320|list(306,10)
				 type: ("bool")-> type bool  @19936|bool(5,6)
				CALL --fundamental
				 lead: ("step")-> object step  @02864|list(304,11)
				 method: ("is_equal?")-> method is_equal?  @34336|int(64,3)
				 input: ("one")-> object one  @38640|conventional(36,2)
				 output: (direct)-> object (anon)  @62320|list(306,10)
				IF
				 condition: (direct)-> object (anon)  @62320|list(306,10)
				{
					true branch: CALL --initial
					 lead: ("c")-> object c  @65200|list(304,11)
					 method: ("begin")-> method begin  @26160|list(65,3)
					 input: ("io.first")-> object first  @37424|list(327,3)
					false branch: CALL --initial
					 lead: ("c")-> object c  @65200|list(304,11)
					 method: ("begin")-> method begin  @26160|list(65,3)
					 input: (pending)->
				}
			}
		}

		abstract method ~use@  @57648|list(319,11) --fraternal
		 key = serial_access<t><c>-3
		 viable = yes
		{

			given
			{
				object c  @62000|list(319,11) --internal
				 type: ("list_cursor")-> type list_cursor  @36832|list(57,13)

				object io  @61680|list(319,11) --internal
				 type: (direct)-> type list  @30304|list(99,6)

				proxy ~n  @48448|list(319,11) --internal
				 type: ("node1")-> type node1  @34528|list(22,6)
			}

			BLOCK --domain
			{
				MAKE
				 proxy: (direct)-> proxy (anon)  @45712|list(321,11)
				 type: ("node1")-> type node1  @34528|list(22,6)
				 permission: [eval]
				CALL
				 lead: ("c")-> object c  @62000|list(319,11)
				 method: ("use_node")-> method use_node  @27408|list(85,3)
				 result: (direct)-> proxy (anon)  @45712|list(321,11)
				JOIN
				 left: ("~n")-> proxy ~n  @48448|list(319,11)
				 right: (direct)-> proxy (anon)  @45712|list(321,11)
			}
		}

		instance
		{
			object current  @33904|list(329,3) --internal
			 type: (direct)-> type $6<7>( op<node1> )  @38288|$appendix(,)

			object first  @37424|list(327,3) --internal
			 type: (direct)-> type $6<7>( op<node1> )  @38288|$appendix(,)

			object last  @34224|list(328,3) --internal
			 type: (direct)-> type $6<7>( op<node1> )  @38288|$appendix(,)
		}

	}

	type list<t>  @32992|list(350,6) --external
	 from ("list")-> type list  @30304|list(99,6)
	 viable = no
	{
		method begin  @40544|list(359,3) --external
		 viable = no
		{

			given
			{
				object io  @64560|list(359,3) --internal
				 type: (direct)-> type list<t>  @32992|list(350,6)
			}

			BLOCK --domain
			{
				MAKE
				 proxy: (direct)-> proxy (anon)  @14112|list(361,6)
				 type: ("list")-> type list  @30304|list(99,6)
				 permission: [init]
				TRANSLATE --base
				 lead: ("io")-> object io  @64560|list(359,3)
				 method: (direct)-> method $18<31>( as_base<list> )  @37360|$appendix(,)
				 result: (direct)-> proxy (anon)  @14112|list(361,6)
				CALL --initial
				 lead: (direct)-> proxy (anon)  @14112|list(361,6)
				 method: ("begin")-> method begin  @31152|list(167,3)
			}
		}

		method begin  @30560|list(364,3) --external
		 viable = no
		{

			given
			{
				object io  @65520|list(364,3) --internal
				 type: (direct)-> type list<t>  @32992|list(350,6)

				object other  @03504|list(364,3) --internal
				 type: ("list<t>")-> type list<t>  @32992|list(350,6)
			}

			BLOCK --domain
			{
				MAKE
				 proxy: (direct)-> proxy (anon)  @14416|list(366,6)
				 type: ("list")-> type list  @30304|list(99,6)
				 permission: [init]
				TRANSLATE --base
				 lead: ("io")-> object io  @65520|list(364,3)
				 method: (direct)-> method $18<31>( as_base<list> )  @37360|$appendix(,)
				 result: (direct)-> proxy (anon)  @14416|list(366,6)
				MAKE
				 proxy: (direct)-> proxy (anon)  @17776|list(366,34)
				 type: ("list")-> type list  @30304|list(99,6)
				 permission: [init]
				TRANSLATE --base
				 lead: ("other")-> object other  @03504|list(364,3)
				 method: (direct)-> method $18<31>( as_base<list> )  @37360|$appendix(,)
				 result: (direct)-> proxy (anon)  @17776|list(366,34)
				CALL --initial
				 lead: (direct)-> proxy (anon)  @14416|list(366,6)
				 method: ("begin")-> method begin  @28656|list(172,3)
				 input: (direct)-> proxy (anon)  @17776|list(366,34)
			}
		}

		method begin  @30144|list(370,3) --external
		 viable = no
		{

			given
			{
				object io  @03824|list(370,3) --internal
				 type: (direct)-> type list<t>  @32992|list(350,6)

				object other  @05104|list(370,3) --internal
				 type: ("list<t>")-> type list<t>  @32992|list(350,6)
			}

			BLOCK* --domain
			{
				MAKE
				 object: (direct)-> object (anon)  @00304|list(,)
				 type: ("list_cursor")-> type list_cursor  @36832|list(57,13)
				CALL --fundamental
				 lead: ("other")-> object other  @05104|list(370,3)
				 method: ("open_cursor")-> method open_cursor  @28064|$appendix(,)
				 input: (pending)->
				 output: (direct)-> object (anon)  @00304|list(,)
				LOOP* --unconditional
				{
					iteration branch: BLOCK* --domain
					{
						MAKE
						 proxy: (direct)-> proxy ~n  @18992|list(,)
						 type: ("node1")-> type node1  @34528|list(22,6)
						 permission: [eval]
						CALL --fundamental
						 lead: ("other")-> object other  @05104|list(370,3)
						 method: ("use@")-> method use@  @29312|$appendix(,)
						 input: (direct)-> object (anon)  @00304|list(,)
						 result: (direct)-> proxy ~n  @18992|list(,)
						MAKE
						 analog: (direct)-> analog (anon)  @22160|list(,)
						 type: ("analog")-> type analog  @07968|analog(5,6)
						MAKE
						 object: (direct)-> object (anon)  @00624|list(,)
						 type: ("bool")-> type bool  @19936|bool(5,6)
						CALL --fundamental
						 lead: (direct)-> analog (anon)  @22160|list(,)
						 method: ("is_void?")-> method is_void?  @55776|analog(23,3)
						 output: (direct)-> object (anon)  @00624|list(,)
						IF
						 condition: (direct)-> object (anon)  @00624|list(,)
						{
							true branch: RETURN --to loop (escape)
						}
						BLOCK* --domain
						{
							MAKE
							 object: (direct)-> object nl  @00944|list(374,5)
							 type: (direct)-> type $6<7>( op<node1> )  @38288|$appendix(,)
							CALL* --provisional --initial, fundamental
							 lead: (direct)-> object nl  @00944|list(374,5)
							 method: ("begin<<t>node1>")-> method begin<xt>  @12448|$appendix(,)
							CALL* --provisional
							 lead: (direct)-> blank (anon)  @01536|list(,)
							 method: ("begin")-> (unmatched)
							TRANSLATE* --provisional --random
							 lead: ("~n")-> proxy ~n  @18992|list(,)
							 method: ("as<t>")-> method as<t>  @15696|object(55,3)
							CALL* --provisional
							 lead: ("~new_t")-> blank ~new_t  @08608|list(,)
							 method: ("begin")-> (unmatched)
							 input: (direct)-> blank (anon)  @10784|list(,)
							MAKE
							 proxy: (direct)-> proxy (anon)  @24160|list(376,7)
							 type: ("list")-> type list  @30304|list(99,6)
							 permission: [init]
							TRANSLATE --base
							 lead: ("io")-> object io  @03824|list(370,3)
							 method: (direct)-> method $18<31>( as_base<list> )  @37360|$appendix(,)
							 result: (direct)-> proxy (anon)  @24160|list(376,7)
							CALL
							 lead: (direct)-> proxy (anon)  @24160|list(376,7)
							 method: ("insert")-> method insert  @34720|list(242,3)
							 input: ("nl")-> object nl  @00944|list(374,5)
							CALL
							 lead: (direct)-> proxy (anon)  @24160|list(376,7)
							 method: ("go_next")-> method go_next  @35968|list(224,3)
						}
						CALL --fundamental
						 lead: ("other")-> object other  @05104|list(370,3)
						 method: ("move_cursor")-> method move_cursor  @27648|$appendix(,)
						 input: (direct)-> object (anon)  @00304|list(,)
					}
				}
			}
		}

		method begin  @37632|list(380,3) --external
		 viable = no
		{

			given
			{
				subroutine copier  @09168|list(380,3) --internal
				 viable = yes

				object io  @01264|list(380,3) --internal
				 type: (direct)-> type list<t>  @32992|list(350,6)

				object other  @08624|list(380,3) --internal
				 type: ("list<t>")-> type list<t>  @32992|list(350,6)
			}

			BLOCK* --domain
			{
				MAKE
				 object: (direct)-> object (anon)  @05424|list(,)
				 type: ("list_cursor")-> type list_cursor  @36832|list(57,13)
				CALL --fundamental
				 lead: ("other")-> object other  @08624|list(380,3)
				 method: ("open_cursor")-> method open_cursor  @28064|$appendix(,)
				 input: (pending)->
				 output: (direct)-> object (anon)  @05424|list(,)
				LOOP* --unconditional
				{
					iteration branch: BLOCK* --domain
					{
						MAKE
						 proxy: (direct)-> proxy ~n  @22336|list(,)
						 type: ("node1")-> type node1  @34528|list(22,6)
						 permission: [eval]
						CALL --fundamental
						 lead: ("other")-> object other  @08624|list(380,3)
						 method: ("use@")-> method use@  @29312|$appendix(,)
						 input: (direct)-> object (anon)  @05424|list(,)
						 result: (direct)-> proxy ~n  @22336|list(,)
						MAKE
						 analog: (direct)-> analog (anon)  @22544|list(,)
						 type: ("analog")-> type analog  @07968|analog(5,6)
						MAKE
						 object: (direct)-> object (anon)  @05744|list(,)
						 type: ("bool")-> type bool  @19936|bool(5,6)
						CALL --fundamental
						 lead: (direct)-> analog (anon)  @22544|list(,)
						 method: ("is_void?")-> method is_void?  @55776|analog(23,3)
						 output: (direct)-> object (anon)  @05744|list(,)
						IF
						 condition: (direct)-> object (anon)  @05744|list(,)
						{
							true branch: RETURN --to loop (escape)
						}
						BLOCK* --domain
						{
							MAKE
							 object: (direct)-> object nl  @06064|list(384,5)
							 type: (direct)-> type $6<7>( op<node1> )  @38288|$appendix(,)
							CALL* --provisional --initial, fundamental
							 lead: (direct)-> object nl  @06064|list(384,5)
							 method: ("begin<<t>node1>")-> method begin<xt>  @12448|$appendix(,)
							CALL* --provisional
							 lead: (direct)-> blank (anon)  @52656|list(,)
							 method: ("begin")-> (unmatched)
							TRANSLATE* --provisional --random
							 lead: ("~n")-> proxy ~n  @22336|list(,)
							 method: ("as<t>")-> method as<t>  @15696|object(55,3)
							CALL* --provisional
							 subroutine: ("copier")-> subroutine copier  @09168|list(380,3)
							 input: (direct)-> blank (anon)  @64080|list(,)
							 output: ("~new_t")-> blank ~new_t  @54832|list(,)
							MAKE
							 proxy: (direct)-> proxy (anon)  @16864|list(387,7)
							 type: ("list")-> type list  @30304|list(99,6)
							 permission: [init]
							TRANSLATE --base
							 lead: ("io")-> object io  @01264|list(380,3)
							 method: (direct)-> method $18<31>( as_base<list> )  @37360|$appendix(,)
							 result: (direct)-> proxy (anon)  @16864|list(387,7)
							CALL
							 lead: (direct)-> proxy (anon)  @16864|list(387,7)
							 method: ("insert")-> method insert  @34720|list(242,3)
							 input: ("nl")-> object nl  @06064|list(384,5)
							CALL
							 lead: (direct)-> proxy (anon)  @16864|list(387,7)
							 method: ("go_next")-> method go_next  @35968|list(224,3)
						}
						CALL --fundamental
						 lead: ("other")-> object other  @08624|list(380,3)
						 method: ("move_cursor")-> method move_cursor  @27648|$appendix(,)
						 input: (direct)-> object (anon)  @05424|list(,)
					}
				}
			}
		}

		method insert  @26816|list(391,3) --external
		 viable = no
		{

			given
			{
				object io  @07344|list(391,3) --internal
				 type: (direct)-> type list<t>  @32992|list(350,6)

				proxy ~t  @29840|list(391,3) --internal
				 type: ("t")-> (unmatched)
			}

			BLOCK* --domain
			{
				MAKE
				 object: (direct)-> object nl  @08944|list(393,10)
				 type: (direct)-> type $6<7>( op<node1> )  @38288|$appendix(,)
				CALL* --provisional --initial, fundamental
				 lead: (direct)-> object nl  @08944|list(393,10)
				 method: ("begin<<t>node1>")-> method begin<xt>  @12448|$appendix(,)
				CALL* --provisional
				 lead: (direct)-> blank (anon)  @58912|list(,)
				 method: ("begin")-> (unmatched)
				JOIN* --provisional
				 left: ("~t")-> proxy ~t  @29840|list(391,3)
				 right: (direct)-> blank (anon)  @61632|list(,)
				MAKE
				 proxy: (direct)-> proxy (anon)  @19296|list(394,6)
				 type: ("list")-> type list  @30304|list(99,6)
				 permission: [init]
				TRANSLATE --base
				 lead: ("io")-> object io  @07344|list(391,3)
				 method: (direct)-> method $18<31>( as_base<list> )  @37360|$appendix(,)
				 result: (direct)-> proxy (anon)  @19296|list(394,6)
				CALL
				 lead: (direct)-> proxy (anon)  @19296|list(394,6)
				 method: ("insert")-> method insert  @34720|list(242,3)
				 input: ("nl")-> object nl  @08944|list(393,10)
			}
		}

		nom type list_t  @17424|list(352,11) --internal
		 viable = no
		 equivalent: ("list<t>")-> type list<t>  @32992|list(350,6)

		method remove_next  @31808|list(421,3) --external
		 viable = no
		{

			given
			{
				subroutine copier  @15568|list(421,3) --internal
				 viable = yes

				object io  @12464|list(421,3) --internal
				 type: (direct)-> type list<t>  @32992|list(350,6)

				object next  @18224|list(421,3) --internal
				 type: ("t")-> (unmatched)
			}

			BLOCK* --domain
			{
				MAKE
				 proxy: (direct)-> proxy (anon)  @17472|list(423,6)
				 type: ("list")-> type list  @30304|list(99,6)
				 permission: [init]
				TRANSLATE --base
				 lead: ("io")-> object io  @12464|list(421,3)
				 method: (direct)-> method $18<31>( as_base<list> )  @37360|$appendix(,)
				 result: (direct)-> proxy (anon)  @17472|list(423,6)
				MAKE
				 object: (direct)-> object nl  @22704|list(423,33)
				 type: (direct)-> type $6<7>( op<node1> )  @38288|$appendix(,)
				CALL
				 lead: (direct)-> proxy (anon)  @17472|list(423,6)
				 method: ("get_next")-> method get_next  @42624|list(203,3)
				 output: (direct)-> object nl  @22704|list(423,33)
				MAKE
				 object: (direct)-> object (anon)  @13104|list(424,10)
				 type: ("bool")-> type bool  @19936|bool(5,6)
				CALL --fundamental
				 lead: ("nl")-> object nl  @22704|list(423,33)
				 method: ("is_not_null?")-> method is_not_null?  @42320|object(36,3)
				 output: (direct)-> object (anon)  @13104|list(424,10)
				IF*
				 condition: (direct)-> object (anon)  @13104|list(424,10)
				{
					true branch: BLOCK* --domain
					{
						MAKE
						 proxy: (direct)-> proxy (anon)  @18080|list(426,15)
						 type: ("node1")-> type node1  @34528|list(22,6)
						 permission: [upd]
						CALL --fundamental
						 lead: ("nl")-> object nl  @22704|list(423,33)
						 method: ("deref")-> method deref  @36384|$appendix(,)
						 result: (direct)-> proxy (anon)  @18080|list(426,15)
						TRANSLATE* --provisional --random
						 lead: (direct)-> proxy (anon)  @18080|list(426,15)
						 method: ("as<t>")-> method as<t>  @15696|object(55,3)
						CALL* --provisional
						 subroutine: ("copier")-> subroutine copier  @15568|list(421,3)
						 input: (direct)-> blank (anon)  @00448|list(,)
						 output: ("next")-> object next  @18224|list(421,3)
						MAKE
						 proxy: (direct)-> proxy (anon)  @22640|list(427,7)
						 type: ("list")-> type list  @30304|list(99,6)
						 permission: [init]
						TRANSLATE --base
						 lead: ("io")-> object io  @12464|list(421,3)
						 method: (direct)-> method $18<31>( as_base<list> )  @37360|$appendix(,)
						 result: (direct)-> proxy (anon)  @22640|list(427,7)
						CALL
						 lead: (direct)-> proxy (anon)  @22640|list(427,7)
						 method: ("remove_next")-> method remove_next  @37216|list(268,3)
					}
				}
			}
		}

		method remove_next  @28896|list(431,3) --external
		 viable = no
		{

			given
			{
				object io  @20464|list(431,3) --internal
				 type: (direct)-> type list<t>  @32992|list(350,6)

				object next  @20784|list(431,3) --internal
				 type: ("t")-> (unmatched)

				subroutine taker  @14768|list(431,3) --internal
				 viable = yes
			}

			BLOCK* --domain
			{
				MAKE
				 proxy: (direct)-> proxy (anon)  @22032|list(433,6)
				 type: ("list")-> type list  @30304|list(99,6)
				 permission: [init]
				TRANSLATE --base
				 lead: ("io")-> object io  @20464|list(431,3)
				 method: (direct)-> method $18<31>( as_base<list> )  @37360|$appendix(,)
				 result: (direct)-> proxy (anon)  @22032|list(433,6)
				MAKE
				 object: (direct)-> object nl  @21424|list(433,33)
				 type: (direct)-> type $6<7>( op<node1> )  @38288|$appendix(,)
				CALL
				 lead: (direct)-> proxy (anon)  @22032|list(433,6)
				 method: ("get_next")-> method get_next  @42624|list(203,3)
				 output: (direct)-> object nl  @21424|list(433,33)
				MAKE
				 object: (direct)-> object (anon)  @19504|list(434,10)
				 type: ("bool")-> type bool  @19936|bool(5,6)
				CALL --fundamental
				 lead: ("nl")-> object nl  @21424|list(433,33)
				 method: ("is_not_null?")-> method is_not_null?  @42320|object(36,3)
				 output: (direct)-> object (anon)  @19504|list(434,10)
				IF*
				 condition: (direct)-> object (anon)  @19504|list(434,10)
				{
					true branch: BLOCK* --domain
					{
						MAKE
						 proxy: (direct)-> proxy (anon)  @18384|list(436,15)
						 type: ("node1")-> type node1  @34528|list(22,6)
						 permission: [upd]
						CALL --fundamental
						 lead: ("nl")-> object nl  @21424|list(433,33)
						 method: ("deref")-> method deref  @36384|$appendix(,)
						 result: (direct)-> proxy (anon)  @18384|list(436,15)
						TRANSLATE* --provisional --random
						 lead: (direct)-> proxy (anon)  @18384|list(436,15)
						 method: ("as<t>")-> method as<t>  @15696|object(55,3)
						CALL* --provisional
						 subroutine: ("taker")-> subroutine taker  @14768|list(431,3)
						 input: (direct)-> blank (anon)  @55920|list(,)
						 output: ("next")-> object next  @20784|list(431,3)
						MAKE
						 proxy: (direct)-> proxy (anon)  @18688|list(437,7)
						 type: ("list")-> type list  @30304|list(99,6)
						 permission: [init]
						TRANSLATE --base
						 lead: ("io")-> object io  @20464|list(431,3)
						 method: (direct)-> method $18<31>( as_base<list> )  @37360|$appendix(,)
						 result: (direct)-> proxy (anon)  @18688|list(437,7)
						CALL
						 lead: (direct)-> proxy (anon)  @18688|list(437,7)
						 method: ("remove_next")-> method remove_next  @37216|list(268,3)
					}
				}
			}
		}

		nom type t_node1  @19472|list(354,11) --internal
		 viable = no
		 equivalent: ("<t>node1")-> type <t>node1  @32224|list(337,13)

		method use_current  @30976|list(409,3) --external
		 viable = no
		{

			given
			{
				object io  @10224|list(409,3) --internal
				 type: (direct)-> type list<t>  @32992|list(350,6)

				proxy ~t  @05312|list(409,3) --internal
				 type: ("t")-> (unmatched)
			}

			BLOCK* --domain
			{
				MAKE
				 proxy: (direct)-> proxy (anon)  @23856|list(411,6)
				 type: ("list")-> type list  @30304|list(99,6)
				 permission: [eval]
				TRANSLATE --base
				 lead: ("io")-> object io  @10224|list(409,3)
				 method: (direct)-> method $18<31>( as_base<list> )  @37360|$appendix(,)
				 result: (direct)-> proxy (anon)  @23856|list(411,6)
				MAKE
				 object: (direct)-> object nl  @10544|list(411,36)
				 type: (direct)-> type $6<7>( op<node1> )  @38288|$appendix(,)
				CALL
				 lead: (direct)-> proxy (anon)  @23856|list(411,6)
				 method: ("get_current")-> method get_current  @30736|list(198,3)
				 output: (direct)-> object nl  @10544|list(411,36)
				MAKE
				 object: (direct)-> object (anon)  @10864|list(412,10)
				 type: ("bool")-> type bool  @19936|bool(5,6)
				CALL --fundamental
				 lead: ("nl")-> object nl  @10544|list(411,36)
				 method: ("is_not_null?")-> method is_not_null?  @42320|object(36,3)
				 output: (direct)-> object (anon)  @10864|list(412,10)
				IF*
				 condition: (direct)-> object (anon)  @10864|list(412,10)
				{
					true branch: BLOCK* --domain
					{
						MAKE
						 proxy: (direct)-> proxy (anon)  @19600|list(412,40)
						 type: ("node1")-> type node1  @34528|list(22,6)
						 permission: [upd]
						CALL --fundamental
						 lead: ("nl")-> object nl  @10544|list(411,36)
						 method: ("deref")-> method deref  @36384|$appendix(,)
						 result: (direct)-> proxy (anon)  @19600|list(412,40)
						TRANSLATE* --provisional --random
						 lead: (direct)-> proxy (anon)  @19600|list(412,40)
						 method: ("as<t>")-> method as<t>  @15696|object(55,3)
						JOIN* --provisional
						 left: ("~t")-> proxy ~t  @05312|list(409,3)
						 right: (direct)-> blank (anon)  @65168|list(,)
					}
				}
			}
		}

		method use_first  @38048|list(397,3) --external
		 viable = no
		{

			given
			{
				object io  @09264|list(397,3) --internal
				 type: (direct)-> type list<t>  @32992|list(350,6)

				proxy ~t  @31056|list(397,3) --internal
				 type: ("t")-> (unmatched)
			}

			BLOCK* --domain
			{
				MAKE
				 proxy: (direct)-> proxy (anon)  @21728|list(399,6)
				 type: ("list")-> type list  @30304|list(99,6)
				 permission: [eval]
				TRANSLATE --base
				 lead: ("io")-> object io  @09264|list(397,3)
				 method: (direct)-> method $18<31>( as_base<list> )  @37360|$appendix(,)
				 result: (direct)-> proxy (anon)  @21728|list(399,6)
				MAKE
				 object: (direct)-> object nl  @58160|list(399,34)
				 type: (direct)-> type $6<7>( op<node1> )  @38288|$appendix(,)
				CALL
				 lead: (direct)-> proxy (anon)  @21728|list(399,6)
				 method: ("get_first")-> method get_first  @28240|list(188,3)
				 output: (direct)-> object nl  @58160|list(399,34)
				MAKE
				 object: (direct)-> object (anon)  @09584|list(400,10)
				 type: ("bool")-> type bool  @19936|bool(5,6)
				CALL --fundamental
				 lead: ("nl")-> object nl  @58160|list(399,34)
				 method: ("is_not_null?")-> method is_not_null?  @42320|object(36,3)
				 output: (direct)-> object (anon)  @09584|list(400,10)
				IF*
				 condition: (direct)-> object (anon)  @09584|list(400,10)
				{
					true branch: BLOCK* --domain
					{
						MAKE
						 proxy: (direct)-> proxy (anon)  @22944|list(400,40)
						 type: ("node1")-> type node1  @34528|list(22,6)
						 permission: [upd]
						CALL --fundamental
						 lead: ("nl")-> object nl  @58160|list(399,34)
						 method: ("deref")-> method deref  @36384|$appendix(,)
						 result: (direct)-> proxy (anon)  @22944|list(400,40)
						TRANSLATE* --provisional --random
						 lead: (direct)-> proxy (anon)  @22944|list(400,40)
						 method: ("as<t>")-> method as<t>  @15696|object(55,3)
						JOIN* --provisional
						 left: ("~t")-> proxy ~t  @31056|list(397,3)
						 right: (direct)-> blank (anon)  @00992|list(,)
					}
				}
			}
		}

		method use_last  @38464|list(403,3) --external
		 viable = no
		{

			given
			{
				object io  @58480|list(403,3) --internal
				 type: (direct)-> type list<t>  @32992|list(350,6)

				proxy ~t  @31664|list(403,3) --internal
				 type: ("t")-> (unmatched)
			}

			BLOCK* --domain
			{
				MAKE
				 proxy: (direct)-> proxy (anon)  @20816|list(405,6)
				 type: ("list")-> type list  @30304|list(99,6)
				 permission: [eval]
				TRANSLATE --base
				 lead: ("io")-> object io  @58480|list(403,3)
				 method: (direct)-> method $18<31>( as_base<list> )  @37360|$appendix(,)
				 result: (direct)-> proxy (anon)  @20816|list(405,6)
				MAKE
				 object: (direct)-> object nl  @12144|list(405,33)
				 type: (direct)-> type $6<7>( op<node1> )  @38288|$appendix(,)
				CALL
				 lead: (direct)-> proxy (anon)  @20816|list(405,6)
				 method: ("get_last")-> method get_last  @29072|list(193,3)
				 output: (direct)-> object nl  @12144|list(405,33)
				MAKE
				 object: (direct)-> object (anon)  @09904|list(406,10)
				 type: ("bool")-> type bool  @19936|bool(5,6)
				CALL --fundamental
				 lead: ("nl")-> object nl  @12144|list(405,33)
				 method: ("is_not_null?")-> method is_not_null?  @42320|object(36,3)
				 output: (direct)-> object (anon)  @09904|list(406,10)
				IF*
				 condition: (direct)-> object (anon)  @09904|list(406,10)
				{
					true branch: BLOCK* --domain
					{
						MAKE
						 proxy: (direct)-> proxy (anon)  @16560|list(406,40)
						 type: ("node1")-> type node1  @34528|list(22,6)
						 permission: [upd]
						CALL --fundamental
						 lead: ("nl")-> object nl  @12144|list(405,33)
						 method: ("deref")-> method deref  @36384|$appendix(,)
						 result: (direct)-> proxy (anon)  @16560|list(406,40)
						TRANSLATE* --provisional --random
						 lead: (direct)-> proxy (anon)  @16560|list(406,40)
						 method: ("as<t>")-> method as<t>  @15696|object(55,3)
						JOIN* --provisional
						 left: ("~t")-> proxy ~t  @31664|list(403,3)
						 right: (direct)-> blank (anon)  @59728|list(,)
					}
				}
			}
		}

		method use_next  @32224|list(415,3) --external
		 viable = no
		{

			given
			{
				object io  @11184|list(415,3) --internal
				 type: (direct)-> type list<t>  @32992|list(350,6)

				proxy ~t  @03488|list(415,3) --internal
				 type: ("t")-> (unmatched)
			}

			BLOCK* --domain
			{
				MAKE
				 proxy: (direct)-> proxy (anon)  @19904|list(417,6)
				 type: ("list")-> type list  @30304|list(99,6)
				 permission: [eval]
				TRANSLATE --base
				 lead: ("io")-> object io  @11184|list(415,3)
				 method: (direct)-> method $18<31>( as_base<list> )  @37360|$appendix(,)
				 result: (direct)-> proxy (anon)  @19904|list(417,6)
				MAKE
				 object: (direct)-> object nl  @11504|list(417,33)
				 type: (direct)-> type $6<7>( op<node1> )  @38288|$appendix(,)
				CALL
				 lead: (direct)-> proxy (anon)  @19904|list(417,6)
				 method: ("get_next")-> method get_next  @42624|list(203,3)
				 output: (direct)-> object nl  @11504|list(417,33)
				MAKE
				 object: (direct)-> object (anon)  @11824|list(418,10)
				 type: ("bool")-> type bool  @19936|bool(5,6)
				CALL --fundamental
				 lead: ("nl")-> object nl  @11504|list(417,33)
				 method: ("is_not_null?")-> method is_not_null?  @42320|object(36,3)
				 output: (direct)-> object (anon)  @11824|list(418,10)
				IF*
				 condition: (direct)-> object (anon)  @11824|list(418,10)
				{
					true branch: BLOCK* --domain
					{
						MAKE
						 proxy: (direct)-> proxy (anon)  @17168|list(418,40)
						 type: ("node1")-> type node1  @34528|list(22,6)
						 permission: [upd]
						CALL --fundamental
						 lead: ("nl")-> object nl  @11504|list(417,33)
						 method: ("deref")-> method deref  @36384|$appendix(,)
						 result: (direct)-> proxy (anon)  @17168|list(418,40)
						TRANSLATE* --provisional --random
						 lead: (direct)-> proxy (anon)  @17168|list(418,40)
						 method: ("as<t>")-> method as<t>  @15696|object(55,3)
						JOIN* --provisional
						 left: ("~t")-> proxy ~t  @03488|list(415,3)
						 right: (direct)-> blank (anon)  @62176|list(,)
					}
				}
			}
		}
	}

	type list_cursor  @36832|list(57,13) --internal
	 viable = yes
	{
		method begin  @26160|list(65,3) --external
		 viable = yes
		{

			given
			{
				object io  @28832|list(65,3) --internal
				 type: (direct)-> type list_cursor  @36832|list(57,13)

				object link1  @34592|list(65,3) --internal
				 type: (direct)-> type $6<7>( op<node1> )  @38288|$appendix(,)
			}

			BLOCK --domain
			{
				MAKE
				 object: (direct)-> object (anon)  @35872|list(67,10)
				 type: ("bool")-> type bool  @19936|bool(5,6)
				CALL --fundamental
				 lead: ("given\link1")-> object link1  @34592|list(65,3)
				 method: ("is_not_null?")-> method is_not_null?  @42320|object(36,3)
				 output: (direct)-> object (anon)  @35872|list(67,10)
				IF
				 condition: (direct)-> object (anon)  @35872|list(67,10)
				{
					true branch: CALL --fundamental
					 lead: ("io.link1")-> object link1  @39664|list(93,3)
					 method: (direct)-> method $30<7>( begin<node1> )  @34032|$appendix(,)
					 input: ("given\link1")-> object link1  @34592|list(65,3)
				}
			}
		}

		method flip  @26576|list(80,3) --external
		 viable = yes
		{

			given
			{
				object io  @31072|list(80,3) --internal
				 type: (direct)-> type list_cursor  @36832|list(57,13)
			}

			BLOCK --domain
			{
				CALL --terminal, fundamental
				 lead: ("io.link1")-> object link1  @39664|list(93,3)
				 method: ("recycle")-> method recycle  @42736|object(38,3)
			}
		}

		method move  @27824|list(70,3) --external
		 viable = yes
		{

			given
			{
				object io  @33632|list(70,3) --internal
				 type: (direct)-> type list_cursor  @36832|list(57,13)
			}

			BLOCK --domain
			{
				MAKE
				 object: (direct)-> object (anon)  @31392|list(72,10)
				 type: ("bool")-> type bool  @19936|bool(5,6)
				CALL --fundamental
				 lead: ("io.link1")-> object link1  @39664|list(93,3)
				 method: ("is_not_null?")-> method is_not_null?  @42320|object(36,3)
				 output: (direct)-> object (anon)  @31392|list(72,10)
				IF
				 condition: (direct)-> object (anon)  @31392|list(72,10)
				{
					true branch: BLOCK --domain
					{
						MAKE
						 proxy: (direct)-> proxy (anon)  @20208|list(74,13)
						 type: ("node1")-> type node1  @34528|list(22,6)
						 permission: [upd]
						CALL --fundamental
						 lead: ("io.link1")-> object link1  @39664|list(93,3)
						 method: ("deref")-> method deref  @36384|$appendix(,)
						 result: (direct)-> proxy (anon)  @20208|list(74,13)
						MAKE
						 object: (direct)-> object next  @35552|list(74,32)
						 type: (direct)-> type $6<7>( op<node1> )  @38288|$appendix(,)
						CALL
						 lead: (direct)-> proxy (anon)  @20208|list(74,13)
						 method: ("get_next")-> method get_next  @29488|list(34,3)
						 output: (direct)-> object next  @35552|list(74,32)
						CALL --terminal, fundamental
						 lead: ("io.link1")-> object link1  @39664|list(93,3)
						 method: ("recycle")-> method recycle  @42736|object(38,3)
						MAKE
						 object: (direct)-> object (anon)  @32672|list(76,11)
						 type: ("bool")-> type bool  @19936|bool(5,6)
						CALL --fundamental
						 lead: ("next")-> object next  @35552|list(74,32)
						 method: ("is_not_null?")-> method is_not_null?  @42320|object(36,3)
						 output: (direct)-> object (anon)  @32672|list(76,11)
						IF
						 condition: (direct)-> object (anon)  @32672|list(76,11)
						{
							true branch: CALL --fundamental
							 lead: ("io.link1")-> object link1  @39664|list(93,3)
							 method: (direct)-> method $30<7>( begin<node1> )  @34032|$appendix(,)
							 input: ("next")-> object next  @35552|list(74,32)
						}
					}
				}
			}
		}

		method use_node  @27408|list(85,3) --external
		 viable = yes
		{

			given
			{
				object io  @38112|list(85,3) --internal
				 type: (direct)-> type list_cursor  @36832|list(57,13)

				proxy ~n  @47840|list(85,3) --internal
				 type: ("node1")-> type node1  @34528|list(22,6)
			}

			BLOCK --domain
			{
				MAKE
				 object: (direct)-> object (anon)  @32992|list(87,10)
				 type: ("bool")-> type bool  @19936|bool(5,6)
				CALL --fundamental
				 lead: ("io.link1")-> object link1  @39664|list(93,3)
				 method: ("is_not_null?")-> method is_not_null?  @42320|object(36,3)
				 output: (direct)-> object (anon)  @32992|list(87,10)
				IF
				 condition: (direct)-> object (anon)  @32992|list(87,10)
				{
					true branch: BLOCK --domain
					{
						MAKE
						 proxy: (direct)-> proxy (anon)  @20512|list(87,52)
						 type: ("node1")-> type node1  @34528|list(22,6)
						 permission: [upd]
						CALL --fundamental
						 lead: ("io.link1")-> object link1  @39664|list(93,3)
						 method: ("deref")-> method deref  @36384|$appendix(,)
						 result: (direct)-> proxy (anon)  @20512|list(87,52)
						JOIN
						 left: ("~n")-> proxy ~n  @47840|list(85,3)
						 right: (direct)-> proxy (anon)  @20512|list(87,52)
					}
				}
			}
		}

		instance
		{
			object link1  @39664|list(93,3) --internal
			 type: (direct)-> type $6<7>( op<node1> )  @38288|$appendix(,)
		}

	}

	type node1  @34528|list(22,6) --external
	 viable = yes
	{
		method begin  @25744|list(30,3) --external
		 viable = yes
		{

			given
			{
				object io  @40672|list(30,3) --internal
				 type: (direct)-> type node1  @34528|list(22,6)
			}

			BLOCK --domain
			{
			}
		}

		method get_next  @29488|list(34,3) --external
		 viable = yes
		{

			given
			{
				object io  @33952|list(34,3) --internal
				 type: (direct)-> type node1  @34528|list(22,6)

				object link1  @30432|list(34,3) --internal
				 type: (direct)-> type $6<7>( op<node1> )  @38288|$appendix(,)
			}

			BLOCK --domain
			{
				MAKE
				 object: (direct)-> object (anon)  @30752|list(36,10)
				 type: ("bool")-> type bool  @19936|bool(5,6)
				CALL --fundamental
				 lead: ("io.next")-> object next  @33584|list(52,3)
				 method: ("is_not_null?")-> method is_not_null?  @42320|object(36,3)
				 output: (direct)-> object (anon)  @30752|list(36,10)
				IF
				 condition: (direct)-> object (anon)  @30752|list(36,10)
				{
					true branch: CALL --fundamental
					 lead: ("given\link1")-> object link1  @30432|list(34,3)
					 method: (direct)-> method $30<7>( begin<node1> )  @34032|$appendix(,)
					 input: ("io.next")-> object next  @33584|list(52,3)
				}
			}
		}

		method set_next  @29904|list(39,3) --external
		 viable = yes
		{

			given
			{
				object io  @37152|list(39,3) --internal
				 type: (direct)-> type node1  @34528|list(22,6)

				object link1  @39712|list(39,3) --internal
				 type: (direct)-> type $6<7>( op<node1> )  @38288|$appendix(,)
			}

			BLOCK --domain
			{
				CALL --terminal, fundamental
				 lead: ("io.next")-> object next  @33584|list(52,3)
				 method: ("recycle")-> method recycle  @42736|object(38,3)
				CALL --fundamental
				 lead: ("io.next")-> object next  @33584|list(52,3)
				 method: (direct)-> method $30<7>( begin<node1> )  @34032|$appendix(,)
				 input: ("given\link1")-> object link1  @39712|list(39,3)
			}
		}

		method unlink  @30320|list(44,3) --external
		 viable = yes
		{

			given
			{
				object io  @39072|list(44,3) --internal
				 type: (direct)-> type node1  @34528|list(22,6)
			}

			BLOCK --domain
			{
				CALL --terminal, fundamental
				 lead: ("io.next")-> object next  @33584|list(52,3)
				 method: ("recycle")-> method recycle  @42736|object(38,3)
			}
		}

		instance
		{
			object next  @33584|list(52,3) --internal
			 type: (direct)-> type $6<7>( op<node1> )  @38288|$appendix(,)
		}

	}

	type queue<t>  @31072|list(506,6) --external
	 viable = no
	{
		method begin  @36384|list(520,3) --external
		 viable = no
		{

			given
			{
				object io  @19824|list(520,3) --internal
				 type: (direct)-> type queue<t>  @31072|list(506,6)
			}

			BLOCK* --domain
			{
				CALL* --initial
				 lead: ("io.list")-> object list  @34544|list(566,3)
				 method: ("begin")-> method begin  @40544|list(359,3)
			}
		}

		method begin  @28480|list(525,3) --external
		 viable = no
		{

			given
			{
				object io  @14704|list(525,3) --internal
				 type: (direct)-> type queue<t>  @31072|list(506,6)

				object other  @12784|list(525,3) --internal
				 type: ("queue<t>")-> type queue<t>  @31072|list(506,6)
			}

			BLOCK* --domain
			{
				CALL* --provisional --initial
				 lead: ("io.list")-> object list  @34544|list(566,3)
				 method: ("begin")-> method begin  @30560|list(364,3)
				 input: ("other.list")-> object list  @34544|list(566,3)
			}
		}

		method begin  @40960|list(530,3) --external
		 viable = no
		{

			given
			{
				subroutine copier  @11168|list(530,3) --internal
				 viable = yes

				object io  @17584|list(530,3) --internal
				 type: (direct)-> type queue<t>  @31072|list(506,6)

				object other  @22064|list(530,3) --internal
				 type: ("queue<t>")-> type queue<t>  @31072|list(506,6)
			}

			BLOCK* --domain
			{
				CALL* --provisional --initial
				 lead: ("io.list")-> object list  @34544|list(566,3)
				 method: ("begin")-> method begin  @37632|list(380,3)
				 input: ("other.list")-> object list  @34544|list(566,3)
				 co-routine: ("copier")-> subroutine copier  @11168|list(530,3)
			}
		}

		method is_empty?  @28064|list(535,3) --external
		 viable = no
		{

			given
			{
				object io  @13744|list(535,3) --internal
				 type: (direct)-> type queue<t>  @31072|list(506,6)

				object yes  @16304|list(535,3) --internal
				 type: ("bool")-> type bool  @19936|bool(5,6)
			}

			BLOCK --domain
			{
				CALL
				 lead: ("io.list")-> object list  @34544|list(566,3)
				 method: ("is_empty?")-> method is_empty?  @26992|list(183,3)
				 output: ("yes")-> object yes  @16304|list(535,3)
			}
		}

		method pull  @33056|list(546,3) --external
		 viable = no
		{

			given
			{
				subroutine copier  @15968|list(546,3) --internal
				 viable = yes

				object first  @15344|list(546,3) --internal
				 type: ("t")-> (unmatched)

				object io  @15984|list(546,3) --internal
				 type: (direct)-> type queue<t>  @31072|list(506,6)
			}

			BLOCK* --domain
			{
				MAKE
				 object: (direct)-> object (anon)  @16624|list(548,31)
				 type: ("bool")-> type bool  @19936|bool(5,6)
				CALL
				 lead: ("io.list")-> object list  @34544|list(566,3)
				 method: ("is_empty?")-> method is_empty?  @26992|list(183,3)
				 output: (direct)-> object (anon)  @16624|list(548,31)
				CALL --fundamental
				 lead: (direct)-> object (anon)  @16624|list(548,31)
				 method: ("not")-> method not  @38544|bool(42,3)
				IF*
				 condition: (direct)-> object (anon)  @16624|list(548,31)
				{
					true branch: BLOCK* --domain
					{
						CALL
						 lead: ("io.list")-> object list  @34544|list(566,3)
						 method: ("go_front")-> method go_front  @35552|list(209,3)
						CALL* --provisional
						 lead: ("io.list")-> object list  @34544|list(566,3)
						 method: ("remove_next")-> method remove_next  @31808|list(421,3)
						 output: ("first")-> object first  @15344|list(546,3)
						 co-routine: ("copier")-> subroutine copier  @15968|list(546,3)
					}
				}
			}
		}

		method pull  @27232|list(552,3) --external
		 viable = no
		{

			given
			{
				object first  @19184|list(552,3) --internal
				 type: ("t")-> (unmatched)

				object io  @17904|list(552,3) --internal
				 type: (direct)-> type queue<t>  @31072|list(506,6)

				subroutine taker  @13168|list(552,3) --internal
				 viable = yes
			}

			BLOCK* --domain
			{
				MAKE
				 object: (direct)-> object (anon)  @22384|list(554,31)
				 type: ("bool")-> type bool  @19936|bool(5,6)
				CALL
				 lead: ("io.list")-> object list  @34544|list(566,3)
				 method: ("is_empty?")-> method is_empty?  @26992|list(183,3)
				 output: (direct)-> object (anon)  @22384|list(554,31)
				CALL --fundamental
				 lead: (direct)-> object (anon)  @22384|list(554,31)
				 method: ("not")-> method not  @38544|bool(42,3)
				IF*
				 condition: (direct)-> object (anon)  @22384|list(554,31)
				{
					true branch: BLOCK* --domain
					{
						CALL
						 lead: ("io.list")-> object list  @34544|list(566,3)
						 method: ("go_front")-> method go_front  @35552|list(209,3)
						CALL* --provisional
						 lead: ("io.list")-> object list  @34544|list(566,3)
						 method: ("remove_next")-> method remove_next  @28896|list(431,3)
						 output: ("first")-> object first  @19184|list(552,3)
						 co-routine: ("taker")-> subroutine taker  @13168|list(552,3)
					}
				}
			}
		}

		method push  @29312|list(540,3) --external
		 viable = no
		{

			given
			{
				object io  @15024|list(540,3) --internal
				 type: (direct)-> type queue<t>  @31072|list(506,6)

				proxy ~t  @00448|list(540,3) --internal
				 type: ("t")-> (unmatched)
			}

			BLOCK* --domain
			{
				CALL
				 lead: ("io.list")-> object list  @34544|list(566,3)
				 method: ("go_last")-> method go_last  @39296|list(219,3)
				CALL* --provisional
				 lead: ("io.list")-> object list  @34544|list(566,3)
				 method: ("insert")-> method insert  @26816|list(391,3)
				JOIN* --provisional
				 left: ("~t")-> proxy ~t  @00448|list(540,3)
				 right: (direct)-> blank (anon)  @52112|list(,)
			}
		}

		nom type queue_t  @16656|list(516,11) --internal
		 viable = no
		 equivalent: ("queue<t>")-> type queue<t>  @31072|list(506,6)

		method use_first  @33472|list(558,3) --external
		 viable = no
		{

			given
			{
				object io  @21104|list(558,3) --internal
				 type: (direct)-> type queue<t>  @31072|list(506,6)

				proxy ~t  @03184|list(558,3) --internal
				 type: ("t")-> (unmatched)
			}

			BLOCK* --domain
			{
				CALL* --provisional
				 lead: ("io.list")-> object list  @34544|list(566,3)
				 method: ("use_first")-> method use_first  @38048|list(397,3)
				JOIN* --provisional
				 left: ("~t")-> proxy ~t  @03184|list(558,3)
				 right: (direct)-> blank (anon)  @51840|list(,)
			}
		}

		instance
		{
			object list  @34544|list(566,3) --internal
			 type: ("list<t>")-> type list<t>  @32992|list(350,6)
		}

	}

	type stack<t>  @29920|list(444,6) --external
	 viable = no
	{
		method begin  @39712|list(461,3) --external
		 viable = no
		{

			given
			{
				object io  @16944|list(461,3) --internal
				 type: (direct)-> type stack<t>  @29920|list(444,6)
			}

			BLOCK* --domain
			{
				CALL* --initial
				 lead: ("io.list")-> object list  @39984|list(500,3)
				 method: ("begin")-> method begin  @40544|list(359,3)
			}
		}

		method begin  @33888|list(466,3) --external
		 viable = no
		{

			given
			{
				object io  @14064|list(466,3) --internal
				 type: (direct)-> type stack<t>  @29920|list(444,6)

				object other  @18544|list(466,3) --internal
				 type: ("stack<t>")-> type stack<t>  @29920|list(444,6)
			}

			BLOCK* --domain
			{
				CALL* --provisional --initial
				 lead: ("io.list")-> object list  @39984|list(500,3)
				 method: ("begin")-> method begin  @30560|list(364,3)
				 input: ("other.list")-> object list  @39984|list(500,3)
			}
		}

		method begin  @31392|list(471,3) --external
		 viable = no
		{

			given
			{
				subroutine copier  @09568|list(471,3) --internal
				 viable = yes

				object io  @17264|list(471,3) --internal
				 type: (direct)-> type stack<t>  @29920|list(444,6)

				object other  @18864|list(471,3) --internal
				 type: ("stack<t>")-> type stack<t>  @29920|list(444,6)
			}

			BLOCK* --domain
			{
				CALL* --provisional --initial
				 lead: ("io.list")-> object list  @39984|list(500,3)
				 method: ("begin")-> method begin  @37632|list(380,3)
				 input: ("other.list")-> object list  @39984|list(500,3)
				 co-routine: ("copier")-> subroutine copier  @09568|list(471,3)
			}
		}

		method is_empty?  @43456|list(477,3) --external
		 viable = no
		{

			given
			{
				object io  @23024|list(477,3) --internal
				 type: (direct)-> type stack<t>  @29920|list(444,6)

				object yes  @14384|list(477,3) --internal
				 type: ("bool")-> type bool  @19936|bool(5,6)
			}

			BLOCK --domain
			{
				CALL
				 lead: ("io.list")-> object list  @39984|list(500,3)
				 method: ("is_empty?")-> method is_empty?  @26992|list(183,3)
				 output: ("yes")-> object yes  @14384|list(477,3)
			}
		}

		method pop  @32640|list(487,3) --external
		 viable = no
		{

			given
			{
				object io  @23344|list(487,3) --internal
				 type: (direct)-> type stack<t>  @29920|list(444,6)
			}

			BLOCK --domain
			{
				CALL
				 lead: ("io.list")-> object list  @39984|list(500,3)
				 method: ("remove_next")-> method remove_next  @37216|list(268,3)
			}
		}

		method push  @38880|list(482,3) --external
		 viable = no
		{

			given
			{
				object io  @13424|list(482,3) --internal
				 type: (direct)-> type stack<t>  @29920|list(444,6)

				proxy ~t  @00144|list(482,3) --internal
				 type: ("t")-> (unmatched)
			}

			BLOCK* --domain
			{
				CALL* --provisional
				 lead: ("io.list")-> object list  @39984|list(500,3)
				 method: ("insert")-> method insert  @26816|list(391,3)
				JOIN* --provisional
				 left: ("~t")-> proxy ~t  @00144|list(482,3)
				 right: (direct)-> blank (anon)  @56736|list(,)
			}
		}

		nom type stack_t  @18192|list(457,11) --internal
		 viable = no
		 equivalent: ("stack<t>")-> type stack<t>  @29920|list(444,6)

		method use_top  @40128|list(492,3) --external
		 viable = no
		{

			given
			{
				object io  @15664|list(492,3) --internal
				 type: (direct)-> type stack<t>  @29920|list(444,6)

				proxy ~t  @04400|list(492,3) --internal
				 type: ("t")-> (unmatched)
			}

			BLOCK* --domain
			{
				CALL* --provisional
				 lead: ("io.list")-> object list  @39984|list(500,3)
				 method: ("use_first")-> method use_first  @38048|list(397,3)
				JOIN* --provisional
				 left: ("~t")-> proxy ~t  @04400|list(492,3)
				 right: (direct)-> blank (anon)  @61904|list(,)
			}
		}

		instance
		{
			object list  @39984|list(500,3) --internal
			 type: ("list<t>")-> type list<t>  @32992|list(350,6)
		}

	}
}

