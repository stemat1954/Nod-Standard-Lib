page console
{
	type console  @29536|console(5,6) --external
	 viable = yes
	{
		method begin  @20336|console(20,3) --external
		 viable = yes
		{

			given
			{
				object io  @15840|console(20,3) --internal
				 type: (direct)-> type console  @29536|console(5,6)
			}

			BLOCK --domain
			{
				MAKE
				 object: (direct)-> object hcon  @15520|console(22,39)
				 type: ("handle")-> type handle  @23456|handle(5,6)
				CALL --initial, fundamental
				 lead: (direct)-> object hcon  @15520|console(22,39)
				 method: ("begin")-> method begin  @28928|handle(23,3)
				CALL --compatible
				 subroutine: ("kernel\console_identify")-> subroutine console_identify  @02816|console(62,2)
				 input: ("no_addr")-> object no_addr  @44080|conventional(14,2)
				 input: (direct)-> object hcon  @15520|console(22,39)
				MAKE
				 object: (direct)-> object (anon)  @05280|console(23,10)
				 type: ("bool")-> type bool  @19936|bool(5,6)
				CALL --fundamental
				 lead: ("hcon")-> object hcon  @15520|console(22,39)
				 method: ("is_equal?")-> method is_equal?  @26848|handle(31,3)
				 input: ("no_handle")-> object no_handle  @41200|conventional(16,2)
				 output: (direct)-> object (anon)  @05280|console(23,10)
				IF
				 condition: (direct)-> object (anon)  @05280|console(23,10)
				{
					true branch: RETURN --to isolate (quit)
					 trace: (direct)-> object (anon)  @08480|console(,)
						trace branch: BLOCK --domain
						{
							MAKE
							 object: (direct)-> object (anon)  @08480|console(,)
							 type: (direct)-> type $6<26>( alpha\op<fault> )  @40208|$appendix(,)
							MAKE
							 proxy: (direct)-> proxy (anon)  @11984|console(,)
							 type: ("fault")-> type fault  @24224|fault(49,6)
							 permission: [init]
							CALL --initial, fundamental
							 lead: (direct)-> object (anon)  @08480|console(,)
							 method: ("begin")-> method begin  @31120|$appendix(,)
							 result: (direct)-> proxy (anon)  @11984|console(,)
							MAKE
							 literal: (direct)-> literal (anon)  @09440|console(,) --'platform'
							 type: ("expr")-> type expr  @18368|expr(5,6)
							MAKE
							 literal: (direct)-> literal (anon)  @06240|console(,) --'no system console'
							 type: ("expr")-> type expr  @18368|expr(5,6)
							MAKE
							 object: (direct)-> object (anon)  @63520|console(23,47)
							 type: ("fault_category")-> enum type fault_category  @01568|fault(5,11)
							CALL --initial
							 lead: (direct)-> object (anon)  @63520|console(23,47)
							 method: ("begin")-> method begin  @34464|fault(5,11)
							 input: (direct)-> literal (anon)  @09440|console(,)
							CALL --initial, fundamental
							 lead: (direct)-> proxy (anon)  @11984|console(,)
							 method: ("begin")-> method begin  @01984|fault(97,3)
							 input: (direct)-> object (anon)  @63520|console(23,47)
							 input: (direct)-> literal (anon)  @06240|console(,)
						}
				}
				MAKE
				 object: (direct)-> object err  @04320|console(24,26)
				 type: ("string")-> type string  @11552|string(4,6)
				CALL
				 lead: ("io")-> object io  @15840|console(20,3)
				 method: ("configure")-> method configure  @24912|console(121,3)
				 input: ("hcon")-> object hcon  @15520|console(22,39)
				 output: (direct)-> object err  @04320|console(24,26)
				MAKE
				 object: (direct)-> object (anon)  @06560|console(25,10)
				 type: ("bool")-> type bool  @19936|bool(5,6)
				CALL --fundamental
				 lead: ("err")-> object err  @04320|console(24,26)
				 method: ("is_not_null?")-> method is_not_null?  @42320|object(36,3)
				 output: (direct)-> object (anon)  @06560|console(25,10)
				IF
				 condition: (direct)-> object (anon)  @06560|console(25,10)
				{
					true branch: RETURN --to isolate (quit)
					 trace: (direct)-> object (anon)  @05600|console(,)
						trace branch: BLOCK --domain
						{
							MAKE
							 object: (direct)-> object (anon)  @05600|console(,)
							 type: (direct)-> type $6<26>( alpha\op<fault> )  @40208|$appendix(,)
							MAKE
							 proxy: (direct)-> proxy (anon)  @15328|console(,)
							 type: ("fault")-> type fault  @24224|fault(49,6)
							 permission: [init]
							CALL --initial, fundamental
							 lead: (direct)-> object (anon)  @05600|console(,)
							 method: ("begin")-> method begin  @31120|$appendix(,)
							 result: (direct)-> proxy (anon)  @15328|console(,)
							MAKE
							 literal: (direct)-> literal (anon)  @06880|console(,) --'platform'
							 type: ("expr")-> type expr  @18368|expr(5,6)
							MAKE
							 literal: (direct)-> literal (anon)  @07520|console(,) --'system console broken'
							 type: ("expr")-> type expr  @18368|expr(5,6)
							MAKE
							 object: (direct)-> object (anon)  @63840|console(25,48)
							 type: ("fault_category")-> enum type fault_category  @01568|fault(5,11)
							CALL --initial
							 lead: (direct)-> object (anon)  @63840|console(25,48)
							 method: ("begin")-> method begin  @34464|fault(5,11)
							 input: (direct)-> literal (anon)  @06880|console(,)
							CALL --initial, fundamental
							 lead: (direct)-> proxy (anon)  @15328|console(,)
							 method: ("begin")-> method begin  @01984|fault(97,3)
							 input: (direct)-> object (anon)  @63840|console(25,48)
							 input: (direct)-> literal (anon)  @07520|console(,)
						}
				}
			}
		}

		method begin  @22000|console(28,3) --external
		 viable = yes
		{

			given
			{
				object error  @54496|console(28,3) --internal
				 type: ("string")-> type string  @11552|string(4,6)

				object io  @11040|console(28,3) --internal
				 type: (direct)-> type console  @29536|console(5,6)

				object name  @11360|console(28,3) --internal
				 type: ("string")-> type string  @11552|string(4,6)
			}

			BLOCK --domain
			{
				MAKE
				 object: (direct)-> object pname  @50656|console(30,27)
				 type: ("addr")-> type addr  @44496|addr(4,6)
				CALL
				 subroutine: ("alpha_to_cstr")-> subroutine alpha_to_cstr  @41760|conventional(160,2)
				 input: ("name")-> object name  @11360|console(28,3)
				 output: (direct)-> object pname  @50656|console(30,27)
				MAKE
				 object: (direct)-> object hcon  @62816|console(31,37)
				 type: ("handle")-> type handle  @23456|handle(5,6)
				CALL --initial, fundamental
				 lead: (direct)-> object hcon  @62816|console(31,37)
				 method: ("begin")-> method begin  @28928|handle(23,3)
				CALL --compatible
				 subroutine: ("kernel\console_identify")-> subroutine console_identify  @02816|console(62,2)
				 input: ("pname")-> object pname  @50656|console(30,27)
				 input: (direct)-> object hcon  @62816|console(31,37)
				CALL --compatible
				 subroutine: ("kernel\heap_free")-> subroutine heap_free  @04816|heap(27,2)
				 input: ("pname")-> object pname  @50656|console(30,27)
				MAKE
				 object: (direct)-> object (anon)  @00480|console(34,10)
				 type: ("bool")-> type bool  @19936|bool(5,6)
				CALL --fundamental
				 lead: ("hcon")-> object hcon  @62816|console(31,37)
				 method: ("is_equal?")-> method is_equal?  @26848|handle(31,3)
				 input: ("no_handle")-> object no_handle  @41200|conventional(16,2)
				 output: (direct)-> object (anon)  @00480|console(34,10)
				IF
				 condition: (direct)-> object (anon)  @00480|console(34,10)
				{
					true branch: BLOCK --domain
					{
						MAKE
						 object: (direct)-> object (anon)  @51616|console(36,5)
						 type: ("text_mediator")-> type text_mediator  @35680|text_mediator(40,6)
						MAKE
						 literal: (direct)-> literal (anon)  @51936|console(,) --'unknown console: '
						 type: ("expr")-> type expr  @18368|expr(5,6)
						CALL --initial
						 lead: (direct)-> object (anon)  @51616|console(36,5)
						 method: ("begin")-> method begin  @45536|text_mediator(117,3)
						 input: (direct)-> literal (anon)  @51936|console(,)
						CALL
						 lead: (direct)-> object (anon)  @51616|console(36,5)
						 method: ("write")-> method write  @49696|text_mediator(258,3)
						 input: ("name")-> object name  @11360|console(28,3)
						CALL
						 lead: (direct)-> object (anon)  @51616|console(36,5)
						 method: ("detach")-> method detach  @50528|text_mediator(124,3)
						 output: ("error")-> object error  @54496|console(28,3)
						CALL --initial, fundamental
						 lead: ("io.ready")-> object ready  @44720|console(165,3)
						 method: ("begin")-> method begin  @42288|bool(26,3)
						 input: ("false")-> object false  @40880|conventional(24,2)
					}
					false branch: CALL
					 lead: ("io")-> object io  @11040|console(28,3)
					 method: ("configure")-> method configure  @24912|console(121,3)
					 input: ("hcon")-> object hcon  @62816|console(31,37)
					 output: ("error")-> object error  @54496|console(28,3)
				}
			}
		}

		method configure  @24912|console(121,3) --internal
		 viable = yes
		{

			common
			{
				enumerator $index  @59360|console(,) --internal
				 type: (direct)-> type $1<5>( <int>enumerator )  @33296|$appendix(,)

				subroutine $start1  @33616|console(,) --internal
				 viable = yes
				{

					given
					{
					}

					BLOCK --domain
					{
						MAKE
						 enumerator: (direct)-> enumerator $index  @59360|console(,)
						 type: (direct)-> type $1<5>( <int>enumerator )  @33296|$appendix(,)
					}
				}
			}


			given
			{
				object err  @64736|console(121,3) --internal
				 type: ("string")-> type string  @11552|string(4,6)

				object hcon  @50336|console(121,3) --internal
				 type: ("handle")-> type handle  @23456|handle(5,6)

				object io  @62176|console(121,3) --internal
				 type: (direct)-> type console  @29536|console(5,6)
			}

			BLOCK --domain
			{
				MAKE
				 object: (direct)-> object hch  @65376|console(123,40)
				 type: ("handle")-> type handle  @23456|handle(5,6)
				CALL --initial, fundamental
				 lead: (direct)-> object hch  @65376|console(123,40)
				 method: ("begin")-> method begin  @28928|handle(23,3)
				MAKE
				 object: (direct)-> object pnote  @62496|console(123,59)
				 type: ("addr")-> type addr  @44496|addr(4,6)
				CALL --initial, fundamental
				 lead: (direct)-> object pnote  @62496|console(123,59)
				 method: ("begin")-> method begin  @46672|addr(34,3)
				CALL --compatible
				 subroutine: ("kernel\console_open_channel")-> subroutine console_open_channel  @04416|console(64,2)
				 input: ("hcon")-> object hcon  @50336|console(121,3)
				 input: (direct)-> object hch  @65376|console(123,40)
				 input: (direct)-> object pnote  @62496|console(123,59)
				MAKE
				 object: (direct)-> object (anon)  @57376|console(125,10)
				 type: ("bool")-> type bool  @19936|bool(5,6)
				CALL --fundamental
				 lead: ("hch")-> object hch  @65376|console(123,40)
				 method: ("is_equal?")-> method is_equal?  @26848|handle(31,3)
				 input: ("no_handle")-> object no_handle  @41200|conventional(16,2)
				 output: (direct)-> object (anon)  @57376|console(125,10)
				MAKE
				 object: (direct)-> object (anon)  @57696|console(125,10)
				 type: ("bool")-> type bool  @19936|bool(5,6)
				CALL --fundamental
				 lead: (direct)-> object (anon)  @57376|console(125,10)
				 method: ("not")-> method not  @39376|bool(43,3)
				 output: (direct)-> object (anon)  @57696|console(125,10)
				IF
				 condition: (direct)-> object (anon)  @57696|console(125,10)
				{
					true branch: BLOCK --domain
					{
						CALL --initial
						 lead: ("io.channel")-> object channel  @42800|console(167,3)
						 method: ("begin")-> method begin  @42208|text_channel(149,3)
						 input: ("hch")-> object hch  @65376|console(123,40)
						MAKE
						 object: (direct)-> object unit  @58016|console(129,41)
						 type: ("int")-> type int  @21536|int(6,6)
						CALL --initial, fundamental
						 lead: (direct)-> object unit  @58016|console(129,41)
						 method: ("begin")-> method begin  @31424|int(52,3)
						 input: (pending)->
						MAKE
						 object: (direct)-> object bom  @58336|console(129,58)
						 type: (direct)-> type $3<'16'>( word<'16'> )  @36368|$appendix(,)
						CALL --initial, fundamental
						 lead: (direct)-> object bom  @58336|console(129,58)
						 method: ("begin")-> method begin  @33840|$appendix(,)
						 input: (pending)->
						MAKE
						 object: (direct)-> object eol  @00160|console(129,77)
						 type: ("int")-> type int  @21536|int(6,6)
						CALL --initial, fundamental
						 lead: (direct)-> object eol  @00160|console(129,77)
						 method: ("begin")-> method begin  @31424|int(52,3)
						 input: (pending)->
						CALL --compatible
						 subroutine: ("kernel\console_get_protocol")-> subroutine console_get_protocol  @03216|console(66,2)
						 input: ("hcon")-> object hcon  @50336|console(121,3)
						 input: (direct)-> object unit  @58016|console(129,41)
						 input: (direct)-> object bom  @58336|console(129,58)
						 input: (direct)-> object eol  @00160|console(129,77)
						CALL --initial, fundamental
						 lead: ("io.eol")-> object eol  @37680|console(170,3)
						 method: ("begin")-> method begin  @40656|unicode(30,3)
						 input: ("eol")-> object eol  @00160|console(129,77)
						SELECT
						 selector: ("unit")-> object unit  @58016|console(129,41)
						 enumerator: (direct)-> enumerator $index  @59360|console(,)
						 '1' -> branch 0
						 '2' -> branch 1
						 '4' -> branch 2
						{

							branch 0: BLOCK --domain
							{
								MAKE
								 literal: (direct)-> literal (anon)  @01120|console(,) --'UTF-8'
								 type: ("expr")-> type expr  @18368|expr(5,6)
								CALL --initial
								 lead: ("io.utf")-> object utf  @43440|console(168,3)
								 method: ("begin")-> method begin  @40704|mediator(7,11)
								 input: (direct)-> literal (anon)  @01120|console(,)
							}

							branch 1: BLOCK --domain
							{
								MAKE
								 literal: (direct)-> literal (anon)  @01440|console(,) --'UTF-16'
								 type: ("expr")-> type expr  @18368|expr(5,6)
								CALL --initial
								 lead: ("io.utf")-> object utf  @43440|console(168,3)
								 method: ("begin")-> method begin  @40704|mediator(7,11)
								 input: (direct)-> literal (anon)  @01440|console(,)
							}

							branch 2: BLOCK --domain
							{
								MAKE
								 literal: (direct)-> literal (anon)  @01760|console(,) --'UTF-32'
								 type: ("expr")-> type expr  @18368|expr(5,6)
								CALL --initial
								 lead: ("io.utf")-> object utf  @43440|console(168,3)
								 method: ("begin")-> method begin  @40704|mediator(7,11)
								 input: (direct)-> literal (anon)  @01760|console(,)
							}

							default branch: RETURN --to isolate (quit)
							 trace: (direct)-> object (anon)  @59936|console(,)
								trace branch: BLOCK --domain
								{
									MAKE
									 object: (direct)-> object (anon)  @59936|console(,)
									 type: (direct)-> type $6<26>( alpha\op<fault> )  @40208|$appendix(,)
									MAKE
									 proxy: (direct)-> proxy (anon)  @15632|console(,)
									 type: ("fault")-> type fault  @24224|fault(49,6)
									 permission: [init]
									CALL --initial, fundamental
									 lead: (direct)-> object (anon)  @59936|console(,)
									 method: ("begin")-> method begin  @31120|$appendix(,)
									 result: (direct)-> proxy (anon)  @15632|console(,)
									MAKE
									 literal: (direct)-> literal (anon)  @49376|console(,) --'bug'
									 type: ("expr")-> type expr  @18368|expr(5,6)
									MAKE
									 literal: (direct)-> literal (anon)  @00800|console(,) --'unexpected code unit value'
									 type: ("expr")-> type expr  @18368|expr(5,6)
									MAKE
									 object: (direct)-> object (anon)  @20720|console(138,26)
									 type: ("fault_category")-> enum type fault_category  @01568|fault(5,11)
									CALL --initial
									 lead: (direct)-> object (anon)  @20720|console(138,26)
									 method: ("begin")-> method begin  @34464|fault(5,11)
									 input: (direct)-> literal (anon)  @49376|console(,)
									CALL --initial, fundamental
									 lead: (direct)-> proxy (anon)  @15632|console(,)
									 method: ("begin")-> method begin  @01984|fault(97,3)
									 input: (direct)-> object (anon)  @20720|console(138,26)
									 input: (direct)-> literal (anon)  @00800|console(,)
								}
						}
						MAKE
						 object: (direct)-> object (anon)  @31600|console(141,11)
						 type: ("bool")-> type bool  @19936|bool(5,6)
						CALL --fundamental
						 lead: ("bom")-> object bom  @58336|console(129,58)
						 method: ("is_equal?")-> method is_equal?  @33424|$appendix(,)
						 input: ("unicode_bom_FEFF")-> object unicode_bom_FEFF  @02400|ucdb(10,2)
						 output: (direct)-> object (anon)  @31600|console(141,11)
						IF
						 condition: (direct)-> object (anon)  @31600|console(141,11)
						{
							true branch: BLOCK --domain
							{
								MAKE
								 literal: (direct)-> literal (anon)  @02080|console(,) --'big-endian'
								 type: ("expr")-> type expr  @18368|expr(5,6)
								CALL --initial
								 lead: ("io.endian")-> object endian  @37360|console(169,3)
								 method: ("begin")-> method begin  @22816|mediator(5,11)
								 input: (direct)-> literal (anon)  @02080|console(,)
							}
							false branch: BLOCK --domain
							{
								MAKE
								 object: (direct)-> object (anon)  @28720|console(142,16)
								 type: ("bool")-> type bool  @19936|bool(5,6)
								CALL --fundamental
								 lead: ("bom")-> object bom  @58336|console(129,58)
								 method: ("is_equal?")-> method is_equal?  @33424|$appendix(,)
								 input: ("unicode_bom_FFFE")-> object unicode_bom_FFFE  @06240|ucdb(12,2)
								 output: (direct)-> object (anon)  @28720|console(142,16)
								IF
								 condition: (direct)-> object (anon)  @28720|console(142,16)
								{
									true branch: BLOCK --domain
									{
										MAKE
										 literal: (direct)-> literal (anon)  @03360|console(,) --'little-endian'
										 type: ("expr")-> type expr  @18368|expr(5,6)
										CALL --initial
										 lead: ("io.endian")-> object endian  @37360|console(169,3)
										 method: ("begin")-> method begin  @22816|mediator(5,11)
										 input: (direct)-> literal (anon)  @03360|console(,)
									}
									false branch: BLOCK --domain
									{
										MAKE
										 object: (direct)-> object (anon)  @02720|console(143,21)
										 type: ("bool")-> type bool  @19936|bool(5,6)
										CALL --fundamental
										 lead: ("bom")-> object bom  @58336|console(129,58)
										 method: ("is_zero?")-> method is_zero?  @34256|$appendix(,)
										 output: (direct)-> object (anon)  @02720|console(143,21)
										MAKE
										 object: (direct)-> object (anon)  @02400|console(143,16)
										 type: ("bool")-> type bool  @19936|bool(5,6)
										CALL --fundamental
										 lead: (direct)-> object (anon)  @02720|console(143,21)
										 method: ("not")-> method not  @39376|bool(43,3)
										 output: (direct)-> object (anon)  @02400|console(143,16)
										IF
										 condition: (direct)-> object (anon)  @02400|console(143,16)
										{
											true branch: RETURN --to isolate (quit)
											 trace: (direct)-> object (anon)  @03040|console(,)
												trace branch: BLOCK --domain
												{
													MAKE
													 object: (direct)-> object (anon)  @03040|console(,)
													 type: (direct)-> type $6<26>( alpha\op<fault> )  @40208|$appendix(,)
													MAKE
													 proxy: (direct)-> proxy (anon)  @08944|console(,)
													 type: ("fault")-> type fault  @24224|fault(49,6)
													 permission: [init]
													CALL --initial, fundamental
													 lead: (direct)-> object (anon)  @03040|console(,)
													 method: ("begin")-> method begin  @31120|$appendix(,)
													 result: (direct)-> proxy (anon)  @08944|console(,)
													MAKE
													 literal: (direct)-> literal (anon)  @03680|console(,) --'bug'
													 type: ("expr")-> type expr  @18368|expr(5,6)
													MAKE
													 literal: (direct)-> literal (anon)  @04000|console(,) --'invalid byte order mark'
													 type: ("expr")-> type expr  @18368|expr(5,6)
													MAKE
													 object: (direct)-> object (anon)  @19760|console(143,57)
													 type: ("fault_category")-> enum type fault_category  @01568|fault(5,11)
													CALL --initial
													 lead: (direct)-> object (anon)  @19760|console(143,57)
													 method: ("begin")-> method begin  @34464|fault(5,11)
													 input: (direct)-> literal (anon)  @03680|console(,)
													CALL --initial, fundamental
													 lead: (direct)-> proxy (anon)  @08944|console(,)
													 method: ("begin")-> method begin  @01984|fault(97,3)
													 input: (direct)-> object (anon)  @19760|console(143,57)
													 input: (direct)-> literal (anon)  @04000|console(,)
												}
										}
									}
								}
							}
						}
						CALL --initial, fundamental
						 lead: ("io.ready")-> object ready  @44720|console(165,3)
						 method: ("begin")-> method begin  @42288|bool(26,3)
						 input: ("true")-> object true  @44400|conventional(22,2)
					}
					false branch: BLOCK --domain
					{
						CALL --initial, fundamental
						 lead: ("io.ready")-> object ready  @44720|console(165,3)
						 method: ("begin")-> method begin  @42288|bool(26,3)
						 input: ("false")-> object false  @40880|conventional(24,2)
						MAKE
						 object: (direct)-> object tm  @24992|console(151,5)
						 type: ("text_mediator")-> type text_mediator  @35680|text_mediator(40,6)
						MAKE
						 literal: (direct)-> literal (anon)  @21472|console(,) --'could not open console channel ['
						 type: ("expr")-> type expr  @18368|expr(5,6)
						CALL --initial
						 lead: (direct)-> object tm  @24992|console(151,5)
						 method: ("begin")-> method begin  @45536|text_mediator(117,3)
						 input: (direct)-> literal (anon)  @21472|console(,)
						MAKE
						 object: (direct)-> object (anon)  @19552|console(152,11)
						 type: ("bool")-> type bool  @19936|bool(5,6)
						CALL --fundamental
						 lead: ("pnote")-> object pnote  @62496|console(123,59)
						 method: ("is_equal?")-> method is_equal?  @48336|addr(42,3)
						 input: ("no_addr")-> object no_addr  @44080|conventional(14,2)
						 output: (direct)-> object (anon)  @19552|console(152,11)
						MAKE
						 object: (direct)-> object (anon)  @12192|console(152,11)
						 type: ("bool")-> type bool  @19936|bool(5,6)
						CALL --fundamental
						 lead: (direct)-> object (anon)  @19552|console(152,11)
						 method: ("not")-> method not  @39376|bool(43,3)
						 output: (direct)-> object (anon)  @12192|console(152,11)
						IF
						 condition: (direct)-> object (anon)  @12192|console(152,11)
						{
							true branch: BLOCK --domain
							{
								MAKE
								 object: (direct)-> object (anon)  @14112|console(152,70)
								 type: ("string")-> type string  @11552|string(4,6)
								CALL
								 subroutine: ("cstr_to_alpha")-> subroutine cstr_to_alpha  @42160|conventional(165,2)
								 input: ("pnote")-> object pnote  @62496|console(123,59)
								 output: (direct)-> object (anon)  @14112|console(152,70)
								CALL
								 lead: ("tm")-> object tm  @24992|console(151,5)
								 method: ("write")-> method write  @49696|text_mediator(258,3)
								 input: (direct)-> object (anon)  @14112|console(152,70)
							}
						}
						MAKE
						 literal: (direct)-> literal (anon)  @13472|console(,) --']'
						 type: ("expr")-> type expr  @18368|expr(5,6)
						CALL
						 lead: ("tm")-> object tm  @24992|console(151,5)
						 method: ("write")-> method write  @51360|text_mediator(263,3)
						 input: (direct)-> literal (anon)  @13472|console(,)
						CALL
						 lead: ("tm")-> object tm  @24992|console(151,5)
						 method: ("detach")-> method detach  @50528|text_mediator(124,3)
						 output: ("err")-> object err  @64736|console(121,3)
					}
				}
				CALL --compatible
				 subroutine: ("kernel\heap_free")-> subroutine heap_free  @04816|heap(27,2)
				 input: ("pnote")-> object pnote  @62496|console(123,59)
			}
		}

		method end  @44016|console(,) --internal
		 viable = yes
		{

			given
			{
				object io  @53360|console(,) --internal
				 type: (direct)-> type console  @29536|console(5,6)
			}

			BLOCK --domain
			{
				CALL --terminal
				 lead: (direct)-> object channel  @42800|console(167,3)
				 method: (direct)-> method end  @54416|console(,)
			}
		}

		method get_encoding  @20752|console(43,3) --external
		 viable = yes
		{

			given
			{
				object e  @57056|console(43,3) --internal
				 type: ("endian")-> enum type endian  @10752|mediator(5,11)

				object f  @61856|console(43,3) --internal
				 type: ("utf")-> enum type utf  @11168|mediator(7,11)

				object io  @63136|console(43,3) --internal
				 type: (direct)-> type console  @29536|console(5,6)
			}

			BLOCK --domain
			{
				CALL --initial
				 lead: ("f")-> object f  @61856|console(43,3)
				 method: ("begin")-> method begin  @41120|mediator(7,11)
				 input: ("io.utf")-> object utf  @43440|console(168,3)
				CALL --initial
				 lead: ("e")-> object e  @57056|console(43,3)
				 method: ("begin")-> method begin  @26976|mediator(5,11)
				 input: ("io.endian")-> object endian  @37360|console(169,3)
			}
		}

		method read  @22416|console(50,3) --external
		 viable = yes
		{

			given
			{
				object error  @52256|console(50,3) --internal
				 type: ("string")-> type string  @11552|string(4,6)

				object io  @59616|console(50,3) --internal
				 type: (direct)-> type console  @29536|console(5,6)

				object q  @52576|console(50,3) --internal
				 type: ("int")-> type int  @21536|int(6,6)

				object tm  @55776|console(50,3) --internal
				 type: ("text_mediator")-> type text_mediator  @35680|text_mediator(40,6)
			}

			BLOCK --domain
			{
				IF
				 condition: ("io.ready")-> object ready  @44720|console(165,3)
				{
					true branch: CALL
					 lead: ("io.channel")-> object channel  @42800|console(167,3)
					 method: ("read")-> method read  @27648|text_channel(154,3)
					 input: ("tm")-> object tm  @55776|console(50,3)
					 input: ("q")-> object q  @52576|console(50,3)
					 output: ("error")-> object error  @52256|console(50,3)
					false branch: CALL --initial, fundamental
					 lead: ("error")-> object error  @52256|console(50,3)
					 method: ("begin")-> method begin  @31088|string(59,3)
					 input: ("not_ready")-> object not_ready  @43760|console(161,9)
				}
			}
		}

		method read  @22832|console(58,3) --external
		 viable = yes
		{

			given
			{
				object error  @50976|console(58,3) --internal
				 type: ("string")-> type string  @11552|string(4,6)

				object input  @49696|console(58,3) --internal
				 type: ("string")-> type string  @11552|string(4,6)

				object io  @52896|console(58,3) --internal
				 type: (direct)-> type console  @29536|console(5,6)

				object q  @54816|console(58,3) --internal
				 type: ("int")-> type int  @21536|int(6,6)
			}

			BLOCK --domain
			{
				IF
				 condition: ("io.ready")-> object ready  @44720|console(165,3)
				{
					true branch: BLOCK --domain
					{
						MAKE
						 object: (direct)-> object tm  @53216|console(62,5)
						 type: ("text_mediator")-> type text_mediator  @35680|text_mediator(40,6)
						CALL --initial
						 lead: (direct)-> object tm  @53216|console(62,5)
						 method: ("begin")-> method begin  @50944|text_mediator(103,3)
						 input: ("io.utf")-> object utf  @43440|console(168,3)
						 input: ("io.endian")-> object endian  @37360|console(169,3)
						CALL
						 lead: ("io.channel")-> object channel  @42800|console(167,3)
						 method: ("read")-> method read  @27648|text_channel(154,3)
						 input: ("tm")-> object tm  @53216|console(62,5)
						 input: ("q")-> object q  @54816|console(58,3)
						 output: ("error")-> object error  @50976|console(58,3)
						MAKE
						 object: (direct)-> object (anon)  @64416|console(64,11)
						 type: ("bool")-> type bool  @19936|bool(5,6)
						CALL --fundamental
						 lead: ("error")-> object error  @50976|console(58,3)
						 method: ("is_null?")-> method is_null?  @41904|object(34,3)
						 output: (direct)-> object (anon)  @64416|console(64,11)
						IF
						 condition: (direct)-> object (anon)  @64416|console(64,11)
						{
							true branch: CALL
							 lead: ("tm")-> object tm  @53216|console(62,5)
							 method: ("read")-> method read  @64672|text_mediator(327,3)
							 input: (pending)->
							 output: ("input")-> object input  @49696|console(58,3)
						}
					}
					false branch: CALL --initial, fundamental
					 lead: ("error")-> object error  @50976|console(58,3)
					 method: ("begin")-> method begin  @31088|string(59,3)
					 input: ("not_ready")-> object not_ready  @43760|console(161,9)
				}
			}
		}

		method read  @23248|console(71,3) --external
		 viable = yes
		{

			given
			{
				object c  @53536|console(71,3) --internal
				 type: ("unicode")-> type unicode  @05408|unicode(4,6)

				object error  @50016|console(71,3) --internal
				 type: ("string")-> type string  @11552|string(4,6)

				object io  @64096|console(71,3) --internal
				 type: (direct)-> type console  @29536|console(5,6)

				object tm  @60576|console(71,3) --internal
				 type: ("text_mediator")-> type text_mediator  @35680|text_mediator(40,6)
			}

			BLOCK --domain
			{
				MAKE
				 proxy: (direct)-> proxy ~c  @09856|console(73,4)
				 type: ("unicode")-> type unicode  @05408|unicode(4,6)
				 permission: [eval]
				CALL
				 subroutine: (direct)-> subroutine $22<13>( fix<unicode> )  @63088|$appendix(,)
				 input: ("c")-> object c  @53536|console(71,3)
				 input: ("io.eol")-> object eol  @37680|console(170,3)
				 result: (direct)-> proxy ~c  @09856|console(73,4)
				IF
				 condition: ("io.ready")-> object ready  @44720|console(165,3)
				{
					true branch: CALL
					 lead: ("io.channel")-> object channel  @42800|console(167,3)
					 method: ("read")-> method read  @44288|text_channel(159,3)
					 input: ("tm")-> object tm  @60576|console(71,3)
					 input: ("~c")-> proxy ~c  @09856|console(73,4)
					 output: ("error")-> object error  @50016|console(71,3)
					false branch: CALL --initial, fundamental
					 lead: ("error")-> object error  @50016|console(71,3)
					 method: ("begin")-> method begin  @31088|string(59,3)
					 input: ("not_ready")-> object not_ready  @43760|console(161,9)
				}
			}
		}

		method read  @07024|console(81,3) --external
		 viable = yes
		{

			given
			{
				object c  @53856|console(81,3) --internal
				 type: ("unicode")-> type unicode  @05408|unicode(4,6)

				object error  @54176|console(81,3) --internal
				 type: ("string")-> type string  @11552|string(4,6)

				object input  @56096|console(81,3) --internal
				 type: ("string")-> type string  @11552|string(4,6)

				object io  @63456|console(81,3) --internal
				 type: (direct)-> type console  @29536|console(5,6)
			}

			BLOCK --domain
			{
				MAKE
				 proxy: (direct)-> proxy ~c  @15024|console(83,4)
				 type: ("unicode")-> type unicode  @05408|unicode(4,6)
				 permission: [eval]
				CALL
				 subroutine: (direct)-> subroutine $22<13>( fix<unicode> )  @63088|$appendix(,)
				 input: ("c")-> object c  @53856|console(81,3)
				 input: ("io.eol")-> object eol  @37680|console(170,3)
				 result: (direct)-> proxy ~c  @15024|console(83,4)
				IF
				 condition: ("io.ready")-> object ready  @44720|console(165,3)
				{
					true branch: BLOCK --domain
					{
						MAKE
						 object: (direct)-> object tm  @60896|console(86,5)
						 type: ("text_mediator")-> type text_mediator  @35680|text_mediator(40,6)
						CALL --initial
						 lead: (direct)-> object tm  @60896|console(86,5)
						 method: ("begin")-> method begin  @50944|text_mediator(103,3)
						 input: ("io.utf")-> object utf  @43440|console(168,3)
						 input: ("io.endian")-> object endian  @37360|console(169,3)
						CALL
						 lead: ("io.channel")-> object channel  @42800|console(167,3)
						 method: ("read")-> method read  @44288|text_channel(159,3)
						 input: ("tm")-> object tm  @60896|console(86,5)
						 input: ("~c")-> proxy ~c  @15024|console(83,4)
						 output: ("error")-> object error  @54176|console(81,3)
						MAKE
						 object: (direct)-> object (anon)  @56416|console(88,11)
						 type: ("bool")-> type bool  @19936|bool(5,6)
						CALL --fundamental
						 lead: ("error")-> object error  @54176|console(81,3)
						 method: ("is_null?")-> method is_null?  @41904|object(34,3)
						 output: (direct)-> object (anon)  @56416|console(88,11)
						IF
						 condition: (direct)-> object (anon)  @56416|console(88,11)
						{
							true branch: CALL
							 lead: ("tm")-> object tm  @60896|console(86,5)
							 method: ("read")-> method read  @64672|text_mediator(327,3)
							 input: (pending)->
							 output: ("input")-> object input  @56096|console(81,3)
						}
					}
					false branch: CALL --initial, fundamental
					 lead: ("error")-> object error  @54176|console(81,3)
					 method: ("begin")-> method begin  @31088|string(59,3)
					 input: ("not_ready")-> object not_ready  @43760|console(161,9)
				}
			}
		}

		method write  @23664|console(95,3) --external
		 viable = yes
		{

			given
			{
				object error  @55136|console(95,3) --internal
				 type: ("string")-> type string  @11552|string(4,6)

				object io  @51296|console(95,3) --internal
				 type: (direct)-> type console  @29536|console(5,6)

				object string  @59296|console(95,3) --internal
				 type: ("string")-> type string  @11552|string(4,6)
			}

			BLOCK --domain
			{
				MAKE
				 object: (direct)-> object tm  @61216|console(97,4)
				 type: ("text_mediator")-> type text_mediator  @35680|text_mediator(40,6)
				CALL --initial
				 lead: (direct)-> object tm  @61216|console(97,4)
				 method: ("begin")-> method begin  @45120|text_mediator(109,3)
				 input: ("given\string")-> object string  @59296|console(95,3)
				CALL
				 lead: ("io")-> object io  @51296|console(95,3)
				 method: ("write")-> method write  @24496|console(107,3)
				 input: ("tm")-> object tm  @61216|console(97,4)
				 output: ("error")-> object error  @55136|console(95,3)
			}
		}

		method write  @24080|console(101,3) --external
		 viable = yes
		{

			given
			{
				object error  @60256|console(101,3) --internal
				 type: ("string")-> type string  @11552|string(4,6)

				object expr  @55456|console(101,3) --internal
				 type: ("expr")-> type expr  @18368|expr(5,6)

				object io  @58976|console(101,3) --internal
				 type: (direct)-> type console  @29536|console(5,6)
			}

			BLOCK --domain
			{
				MAKE
				 object: (direct)-> object tm  @63776|console(103,4)
				 type: ("text_mediator")-> type text_mediator  @35680|text_mediator(40,6)
				CALL --initial
				 lead: (direct)-> object tm  @63776|console(103,4)
				 method: ("begin")-> method begin  @45536|text_mediator(117,3)
				 input: ("given\expr")-> object expr  @55456|console(101,3)
				CALL
				 lead: ("io")-> object io  @58976|console(101,3)
				 method: ("write")-> method write  @24496|console(107,3)
				 input: ("tm")-> object tm  @63776|console(103,4)
				 output: ("error")-> object error  @60256|console(101,3)
			}
		}

		method write  @24496|console(107,3) --external
		 viable = yes
		{

			given
			{
				object error  @61536|console(107,3) --internal
				 type: ("string")-> type string  @11552|string(4,6)

				object io  @65056|console(107,3) --internal
				 type: (direct)-> type console  @29536|console(5,6)

				object tm  @56736|console(107,3) --internal
				 type: ("text_mediator")-> type text_mediator  @35680|text_mediator(40,6)
			}

			BLOCK --domain
			{
				IF
				 condition: ("io.ready")-> object ready  @44720|console(165,3)
				{
					true branch: CALL
					 lead: ("io.channel")-> object channel  @42800|console(167,3)
					 method: ("write")-> method write  @44704|text_channel(164,3)
					 input: ("tm")-> object tm  @56736|console(107,3)
					 output: ("error")-> object error  @61536|console(107,3)
					false branch: CALL --initial, fundamental
					 lead: ("error")-> object error  @61536|console(107,3)
					 method: ("begin")-> method begin  @31088|string(59,3)
					 input: ("not_ready")-> object not_ready  @43760|console(161,9)
				}
			}
		}

		common
		{
			subroutine $start1  @34016|console(,) --internal
			 viable = yes
			{

				given
				{
				}

				BLOCK --domain
				{
					MAKE
					 object: (direct)-> object not_ready  @43760|console(161,9) --'not ready'
					 type: ("string")-> type string  @11552|string(4,6)
					MAKE
					 literal: (direct)-> literal (anon)  @11552|console(,) --'not ready'
					 type: ("expr")-> type expr  @18368|expr(5,6)
					CALL --initial, fundamental
					 lead: (direct)-> object not_ready  @43760|console(161,9)
					 method: ("begin")-> method begin  @31504|string(57,3)
					 input: (direct)-> literal (anon)  @11552|console(,)
					 input: (pending)->
					 input: (pending)->
				}
			}

			object not_ready  @43760|console(161,9) --internal
			 type: ("string")-> type string  @11552|string(4,6)
		}


		instance
		{
			object channel  @42800|console(167,3) --internal
			 type: ("read_write_text_channel")-> type read_write_text_channel  @31456|text_channel(145,6)

			object endian  @37360|console(169,3) --internal
			 type: ("endian")-> enum type endian  @10752|mediator(5,11)

			object eol  @37680|console(170,3) --internal
			 type: ("unicode")-> type unicode  @05408|unicode(4,6)

			object ready  @44720|console(165,3) --internal
			 type: ("bool")-> type bool  @19936|bool(5,6)

			object utf  @43440|console(168,3) --internal
			 type: ("utf")-> enum type utf  @11168|mediator(7,11)
		}

	}
}

