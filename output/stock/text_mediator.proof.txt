page text_mediator
{
	subroutine exact_match?  @38560|text_mediator(9,2) --external
	 viable = yes
	{

		given
		{
			object c  @53808|text_mediator(9,2) --internal
			 type: ("unicode")-> type unicode  @05408|unicode(4,6)

			object d  @57328|text_mediator(9,2) --internal
			 type: ("sign")-> enum type sign  @25328|conventional(103,11)

			object fex  @59888|text_mediator(9,2) --internal
			 type: ("expr")-> type expr  @18368|expr(5,6)

			object ptm  @59248|text_mediator(9,2) --internal
			 type: ("text_mediator")-> type text_mediator  @35680|text_mediator(40,6)

			object yes  @51568|text_mediator(9,2) --internal
			 type: ("bool")-> type bool  @19936|bool(5,6)
		}

		BLOCK --domain
		{
		}
	}

	enum type match_mode  @45952|text_mediator(5,11) --external
	 from ("enumerated")-> type enumerated  @17216|enumerated(4,6)
	 viable = yes
	{
	    'exact' = 0
	    'similar' = 1
	    'regex' = 2
	}
	{
		method begin  @05600|text_mediator(5,11) --external
		 viable = yes
		{

			given
			{
				object expr  @49968|text_mediator(5,11) --internal
				 type: ("expr")-> type expr  @18368|expr(5,6)

				object io  @51888|text_mediator(5,11) --internal
				 type: (direct)-> enum type match_mode  @45952|text_mediator(5,11)
			}

			BLOCK --domain
			{
				MAKE
				 object: (direct)-> object (anon)  @01392|text_mediator(,)
				 type: ("int")-> type int  @21536|int(6,6)
				CALL --fundamental
				 lead: (direct)-> enumerator $index  @10960|text_mediator(,)
				 method: ("enumerate")-> method enumerate  @16832|$appendix(,)
				 input: (direct)-> object expr  @49968|text_mediator(5,11)
				 output: (direct)-> object (anon)  @01392|text_mediator(,)
				MAKE
				 proxy: (direct)-> proxy (anon)  @38992|text_mediator(,)
				 type: ("enumerated")-> type enumerated  @17216|enumerated(4,6)
				 permission: [init]
				TRANSLATE --base
				 lead: (direct)-> object io  @51888|text_mediator(5,11)
				 method: (direct)-> method $18<25>( as_base<enumerated> )  @21968|$appendix(,)
				 result: (direct)-> proxy (anon)  @38992|text_mediator(,)
				CALL --initial, fundamental
				 lead: (direct)-> proxy (anon)  @38992|text_mediator(,)
				 method: ("begin")-> method begin  @14128|enumerated(29,3)
				 input: (direct)-> object (anon)  @01392|text_mediator(,)
				CALL --initial, fundamental
				 lead: ("io.expr")-> object expr  @01120|text_mediator(,)
				 method: ("begin")-> method begin  @65024|expr(88,3)
				 input: (direct)-> object expr  @49968|text_mediator(5,11)
			}
		}

		method begin  @11424|text_mediator(5,11) --external
		 viable = yes
		{

			given
			{
				object io  @55088|text_mediator(5,11) --internal
				 type: (direct)-> enum type match_mode  @45952|text_mediator(5,11)

				object match_mode  @57968|text_mediator(5,11) --internal
				 type: (direct)-> enum type match_mode  @45952|text_mediator(5,11)
			}

			BLOCK --domain
			{
				MAKE
				 proxy: (direct)-> proxy (anon)  @01104|text_mediator(,)
				 type: ("int")-> type int  @21536|int(6,6)
				 permission: [eval]
				CALL --fundamental
				 lead: (direct)-> object match_mode  @57968|text_mediator(5,11)
				 method: ("use_code")-> method use_code  @34288|enumerated(31,3)
				 result: (direct)-> proxy (anon)  @01104|text_mediator(,)
				MAKE
				 proxy: (direct)-> proxy (anon)  @36256|text_mediator(,)
				 type: ("enumerated")-> type enumerated  @17216|enumerated(4,6)
				 permission: [init]
				TRANSLATE --base
				 lead: (direct)-> object io  @55088|text_mediator(5,11)
				 method: (direct)-> method $18<25>( as_base<enumerated> )  @21968|$appendix(,)
				 result: (direct)-> proxy (anon)  @36256|text_mediator(,)
				CALL --initial, fundamental
				 lead: (direct)-> proxy (anon)  @36256|text_mediator(,)
				 method: ("begin")-> method begin  @14128|enumerated(29,3)
				 input: (direct)-> proxy (anon)  @01104|text_mediator(,)
				CALL --initial, fundamental
				 lead: ("io.expr")-> object expr  @01120|text_mediator(,)
				 method: ("begin")-> method begin  @65024|expr(88,3)
				 input: ("match_mode.expr")-> object expr  @01120|text_mediator(,)
			}
		}

		method get_token  @14752|text_mediator(5,11) --external
		 viable = yes
		{

			given
			{
				object expr  @62448|text_mediator(5,11) --internal
				 type: ("expr")-> type expr  @18368|expr(5,6)

				object io  @60528|text_mediator(5,11) --internal
				 type: (direct)-> enum type match_mode  @45952|text_mediator(5,11)
			}

			BLOCK --domain
			{
				CALL --initial, fundamental
				 lead: (direct)-> object expr  @62448|text_mediator(5,11)
				 method: ("begin")-> method begin  @65024|expr(88,3)
				 input: ("io.expr")-> object expr  @01120|text_mediator(,)
			}
		}

		method is_before?  @15584|text_mediator(5,11) --external
		 viable = yes
		{

			given
			{
				object bool  @61808|text_mediator(5,11) --internal
				 type: ("bool")-> type bool  @19936|bool(5,6)

				object io  @54448|text_mediator(5,11) --internal
				 type: (direct)-> enum type match_mode  @45952|text_mediator(5,11)

				object match_mode  @53168|text_mediator(5,11) --internal
				 type: (direct)-> enum type match_mode  @45952|text_mediator(5,11)
			}

			BLOCK --domain
			{
				MAKE
				 proxy: (direct)-> proxy (anon)  @05056|text_mediator(,)
				 type: ("int")-> type int  @21536|int(6,6)
				 permission: [eval]
				CALL --fundamental
				 lead: (direct)-> object match_mode  @53168|text_mediator(5,11)
				 method: ("use_code")-> method use_code  @34288|enumerated(31,3)
				 result: (direct)-> proxy (anon)  @05056|text_mediator(,)
				MAKE
				 proxy: (direct)-> proxy (anon)  @02320|text_mediator(,)
				 type: ("int")-> type int  @21536|int(6,6)
				 permission: [eval]
				CALL --fundamental
				 lead: (direct)-> object io  @54448|text_mediator(5,11)
				 method: ("use_code")-> method use_code  @34288|enumerated(31,3)
				 result: (direct)-> proxy (anon)  @02320|text_mediator(,)
				CALL --fundamental
				 lead: (direct)-> proxy (anon)  @02320|text_mediator(,)
				 method: ("is_before?")-> method is_before?  @34752|int(66,3)
				 input: (direct)-> proxy (anon)  @05056|text_mediator(,)
				 output: (direct)-> object bool  @61808|text_mediator(5,11)
			}
		}

		method is_equal?  @00192|text_mediator(5,11) --external
		 viable = yes
		{

			given
			{
				object bool  @61488|text_mediator(5,11) --internal
				 type: ("bool")-> type bool  @19936|bool(5,6)

				object io  @50288|text_mediator(5,11) --internal
				 type: (direct)-> enum type match_mode  @45952|text_mediator(5,11)

				object match_mode  @51248|text_mediator(5,11) --internal
				 type: (direct)-> enum type match_mode  @45952|text_mediator(5,11)
			}

			BLOCK --domain
			{
				MAKE
				 proxy: (direct)-> proxy (anon)  @02016|text_mediator(,)
				 type: ("int")-> type int  @21536|int(6,6)
				 permission: [eval]
				CALL --fundamental
				 lead: (direct)-> object match_mode  @51248|text_mediator(5,11)
				 method: ("use_code")-> method use_code  @34288|enumerated(31,3)
				 result: (direct)-> proxy (anon)  @02016|text_mediator(,)
				MAKE
				 proxy: (direct)-> proxy (anon)  @05968|text_mediator(,)
				 type: ("int")-> type int  @21536|int(6,6)
				 permission: [eval]
				CALL --fundamental
				 lead: (direct)-> object io  @50288|text_mediator(5,11)
				 method: ("use_code")-> method use_code  @34288|enumerated(31,3)
				 result: (direct)-> proxy (anon)  @05968|text_mediator(,)
				CALL --fundamental
				 lead: (direct)-> proxy (anon)  @05968|text_mediator(,)
				 method: ("is_equal?")-> method is_equal?  @34336|int(64,3)
				 input: (direct)-> proxy (anon)  @02016|text_mediator(,)
				 output: (direct)-> object bool  @61488|text_mediator(5,11)
			}
		}

		method use_token  @03520|text_mediator(5,11) --external
		 viable = yes
		{

			given
			{
				object io  @53488|text_mediator(5,11) --internal
				 type: (direct)-> enum type match_mode  @45952|text_mediator(5,11)

				proxy ~t  @02928|text_mediator(5,11) --internal
				 type: ("expr")-> type expr  @18368|expr(5,6)
			}

			BLOCK --domain
			{
				JOIN
				 left: (direct)-> proxy ~t  @02928|text_mediator(5,11)
				 right: ("io.expr")-> object expr  @01120|text_mediator(,)
			}
		}

		common
		{
			enumerator $index  @10960|text_mediator(,) --internal
			 type: (direct)-> type $1<2>( <expr>enumerator )  @34064|$appendix(,)

			subroutine $start1  @12368|text_mediator(,) --internal
			 viable = yes
			{

				given
				{
				}

				BLOCK --domain
				{
					MAKE
					 enumerator: ("near\$index")-> enumerator $index  @10960|text_mediator(,)
					 type: (direct)-> type $1<2>( <expr>enumerator )  @34064|$appendix(,)
				}
			}
		}


		instance
		{
			object expr  @01120|text_mediator(,) --internal
			 type: ("expr")-> type expr  @18368|expr(5,6)
		}

	}

	subroutine regex_match?  @30016|text_mediator(32,2) --external
	 viable = yes
	{

		given
		{
			object c  @50608|text_mediator(32,2) --internal
			 type: ("unicode")-> type unicode  @05408|unicode(4,6)

			object d  @02032|text_mediator(32,2) --internal
			 type: ("sign")-> enum type sign  @25328|conventional(103,11)

			object fex  @02352|text_mediator(32,2) --internal
			 type: ("expr")-> type expr  @18368|expr(5,6)

			object ptm  @01712|text_mediator(32,2) --internal
			 type: ("text_mediator")-> type text_mediator  @35680|text_mediator(40,6)

			object yes  @02672|text_mediator(32,2) --internal
			 type: ("bool")-> type bool  @19936|bool(5,6)
		}

		BLOCK --domain
		{
		}
	}

	subroutine similar_match?  @32816|text_mediator(21,2) --external
	 viable = yes
	{

		given
		{
			object c  @56368|text_mediator(21,2) --internal
			 type: ("unicode")-> type unicode  @05408|unicode(4,6)

			object d  @60208|text_mediator(21,2) --internal
			 type: ("sign")-> enum type sign  @25328|conventional(103,11)

			object fex  @62128|text_mediator(21,2) --internal
			 type: ("expr")-> type expr  @18368|expr(5,6)

			object ptm  @56688|text_mediator(21,2) --internal
			 type: ("text_mediator")-> type text_mediator  @35680|text_mediator(40,6)

			object yes  @62768|text_mediator(21,2) --internal
			 type: ("bool")-> type bool  @19936|bool(5,6)
		}

		BLOCK --domain
		{
		}
	}

	type text_mediator  @35680|text_mediator(40,6) --external
	 from ("mediator")-> type mediator  @22304|mediator(21,6)
	 viable = yes
	{
		method add_zero  @46368|text_mediator(225,3) --external
		 viable = yes
		{

			given
			{
				object io  @25376|text_mediator(225,3) --internal
				 type: (direct)-> type text_mediator  @35680|text_mediator(40,6)
			}

			BLOCK --domain
			{
				CALL --fundamental
				 lead: ("zero")-> object zero  @41840|conventional(34,2)
				 method: ("store")-> method store  @33504|int(61,3)
				 input: ("io")-> object io  @25376|text_mediator(225,3)
				 input: ("io.codepoint_fex")-> object codepoint_fex  @07200|text_mediator(710,3)
			}
		}

		method begin  @50944|text_mediator(103,3) --external
		 viable = yes
		{

			given
			{
				object e  @03312|text_mediator(103,3) --internal
				 type: ("endian")-> enum type endian  @10752|mediator(5,11)

				object f  @03632|text_mediator(103,3) --internal
				 type: ("utf")-> enum type utf  @11168|mediator(7,11)

				object io  @02992|text_mediator(103,3) --internal
				 type: (direct)-> type text_mediator  @35680|text_mediator(40,6)
			}

			BLOCK --domain
			{
				MAKE
				 proxy: (direct)-> proxy (anon)  @38688|text_mediator(105,6)
				 type: ("mediator")-> type mediator  @22304|mediator(21,6)
				 permission: [init]
				TRANSLATE --base
				 lead: ("io")-> object io  @02992|text_mediator(103,3)
				 method: (direct)-> method $18<34>( as_base<mediator> )  @38608|$appendix(,)
				 result: (direct)-> proxy (anon)  @38688|text_mediator(105,6)
				CALL --initial, fundamental
				 lead: (direct)-> proxy (anon)  @38688|text_mediator(105,6)
				 method: ("begin")-> method begin  @60480|mediator(307,3)
				 input: ("e")-> object e  @03312|text_mediator(103,3)
				 input: ("f")-> object f  @03632|text_mediator(103,3)
				CALL
				 subroutine: ("describe_utf")-> subroutine describe_utf  @31616|text_mediator(683,13)
				 input: ("f")-> object f  @03632|text_mediator(103,3)
				 output: ("io.codepoint_unit")-> object codepoint_unit  @07520|text_mediator(711,3)
				 output: ("io.codepoint_fex")-> object codepoint_fex  @07200|text_mediator(710,3)
			}
		}

		method begin  @45120|text_mediator(109,3) --external
		 viable = yes
		{

			given
			{
				object io  @03952|text_mediator(109,3) --internal
				 type: (direct)-> type text_mediator  @35680|text_mediator(40,6)

				object string  @12896|text_mediator(109,3) --internal
				 type: ("string")-> type string  @11552|string(4,6)
			}

			BLOCK --domain
			{
				MAKE
				 object: (direct)-> object f  @16736|text_mediator(111,33)
				 type: ("utf")-> enum type utf  @11168|mediator(7,11)
				MAKE
				 object: (direct)-> object e  @09696|text_mediator(111,40)
				 type: ("endian")-> enum type endian  @10752|mediator(5,11)
				CALL --fundamental
				 lead: ("given\string")-> object string  @12896|text_mediator(109,3)
				 method: ("get_encoding")-> method get_encoding  @22768|string(66,3)
				 output: (direct)-> object f  @16736|text_mediator(111,33)
				 output: (direct)-> object e  @09696|text_mediator(111,40)
				MAKE
				 proxy: (direct)-> proxy (anon)  @37168|text_mediator(112,6)
				 type: ("mediator")-> type mediator  @22304|mediator(21,6)
				 permission: [init]
				TRANSLATE --base
				 lead: ("io")-> object io  @03952|text_mediator(109,3)
				 method: (direct)-> method $18<34>( as_base<mediator> )  @38608|$appendix(,)
				 result: (direct)-> proxy (anon)  @37168|text_mediator(112,6)
				CALL --initial, fundamental
				 lead: (direct)-> proxy (anon)  @37168|text_mediator(112,6)
				 method: ("begin")-> method begin  @60480|mediator(307,3)
				 input: ("e")-> object e  @09696|text_mediator(111,40)
				 input: ("f")-> object f  @16736|text_mediator(111,33)
				CALL
				 subroutine: ("describe_utf")-> subroutine describe_utf  @31616|text_mediator(683,13)
				 input: ("f")-> object f  @16736|text_mediator(111,33)
				 output: ("io.codepoint_unit")-> object codepoint_unit  @07520|text_mediator(711,3)
				 output: ("io.codepoint_fex")-> object codepoint_fex  @07200|text_mediator(710,3)
				CALL
				 lead: ("io")-> object io  @03952|text_mediator(109,3)
				 method: ("write")-> method write  @49696|text_mediator(258,3)
				 input: ("given\string")-> object string  @12896|text_mediator(109,3)
			}
		}

		method begin  @45536|text_mediator(117,3) --external
		 viable = yes
		{

			given
			{
				object expr  @13536|text_mediator(117,3) --internal
				 type: ("expr")-> type expr  @18368|expr(5,6)

				object io  @14816|text_mediator(117,3) --internal
				 type: (direct)-> type text_mediator  @35680|text_mediator(40,6)
			}

			BLOCK --domain
			{
				MAKE
				 proxy: (direct)-> proxy (anon)  @36560|text_mediator(119,6)
				 type: ("mediator")-> type mediator  @22304|mediator(21,6)
				 permission: [init]
				TRANSLATE --base
				 lead: ("io")-> object io  @14816|text_mediator(117,3)
				 method: (direct)-> method $18<34>( as_base<mediator> )  @38608|$appendix(,)
				 result: (direct)-> proxy (anon)  @36560|text_mediator(119,6)
				CALL --initial, fundamental
				 lead: (direct)-> proxy (anon)  @36560|text_mediator(119,6)
				 method: ("begin")-> method begin  @60480|mediator(307,3)
				 input: (pending)->
				 input: (pending)->
				CALL
				 subroutine: ("describe_utf")-> subroutine describe_utf  @31616|text_mediator(683,13)
				 input: ("default_utf")-> object default_utf  @63840|mediator(16,2)
				 output: ("io.codepoint_unit")-> object codepoint_unit  @07520|text_mediator(711,3)
				 output: ("io.codepoint_fex")-> object codepoint_fex  @07200|text_mediator(710,3)
				CALL
				 lead: ("io")-> object io  @14816|text_mediator(117,3)
				 method: ("write")-> method write  @51360|text_mediator(263,3)
				 input: ("given\expr")-> object expr  @13536|text_mediator(117,3)
			}
		}

		method compare  @52608|text_mediator(170,3) --external
		 viable = yes
		{

			given
			{
				object io  @15136|text_mediator(170,3) --internal
				 type: (direct)-> type text_mediator  @35680|text_mediator(40,6)

				object other  @23776|text_mediator(170,3) --internal
				 type: ("text_mediator")-> type text_mediator  @35680|text_mediator(40,6)

				object same  @19616|text_mediator(170,3) --internal
				 type: ("bool")-> type bool  @19936|bool(5,6)
			}

			BLOCK --domain
			{
				MAKE
				 object: (direct)-> object f  @19936|text_mediator(172,4)
				 type: ("utf")-> enum type utf  @11168|mediator(7,11)
				MAKE
				 object: (direct)-> object e  @12256|text_mediator(172,11)
				 type: ("endian")-> enum type endian  @10752|mediator(5,11)
				MAKE
				 object: (direct)-> object (anon)  @20576|text_mediator(173,10)
				 type: ("bool")-> type bool  @19936|bool(5,6)
				CALL --fundamental
				 lead: ("other")-> object other  @23776|text_mediator(170,3)
				 method: ("is_null?")-> method is_null?  @41904|object(34,3)
				 output: (direct)-> object (anon)  @20576|text_mediator(173,10)
				IF
				 condition: (direct)-> object (anon)  @20576|text_mediator(173,10)
				{
					true branch: BLOCK --domain
					{
						CALL --initial
						 lead: ("f")-> object f  @19936|text_mediator(172,4)
						 method: ("begin")-> method begin  @41120|mediator(7,11)
						 input: ("platform_utf")-> object platform_utf  @63200|mediator(13,2)
						CALL --initial
						 lead: ("e")-> object e  @12256|text_mediator(172,11)
						 method: ("begin")-> method begin  @26976|mediator(5,11)
						 input: ("platform_endian")-> object platform_endian  @62880|mediator(12,2)
					}
					false branch: BLOCK --domain
					{
						CALL --fundamental
						 lead: ("other")-> object other  @23776|text_mediator(170,3)
						 method: ("get_utf")-> method get_utf  @12832|mediator(316,3)
						 output: ("f")-> object f  @19936|text_mediator(172,4)
						CALL --fundamental
						 lead: ("other")-> object other  @23776|text_mediator(170,3)
						 method: ("get_endian")-> method get_endian  @12416|mediator(314,3)
						 output: ("e")-> object e  @12256|text_mediator(172,11)
					}
				}
				MAKE
				 object: (direct)-> object (anon)  @17376|text_mediator(182,17)
				 type: ("utf")-> enum type utf  @11168|mediator(7,11)
				CALL --fundamental
				 lead: ("io")-> object io  @15136|text_mediator(170,3)
				 method: ("get_utf")-> method get_utf  @12832|mediator(316,3)
				 output: (direct)-> object (anon)  @17376|text_mediator(182,17)
				MAKE
				 object: (direct)-> object (anon)  @15776|text_mediator(182,17)
				 type: ("bool")-> type bool  @19936|bool(5,6)
				CALL
				 lead: (direct)-> object (anon)  @17376|text_mediator(182,17)
				 method: ("is_equal?")-> method is_equal?  @42784|mediator(7,11)
				 input: ("f")-> object f  @19936|text_mediator(172,4)
				 output: (direct)-> object (anon)  @15776|text_mediator(182,17)
				CALL --initial, fundamental
				 lead: ("same")-> object same  @19616|text_mediator(170,3)
				 method: ("begin")-> method begin  @42288|bool(26,3)
				 input: (direct)-> object (anon)  @15776|text_mediator(182,17)
				MAKE
				 object: (direct)-> object (anon)  @20256|text_mediator(183,10)
				 type: ("bool")-> type bool  @19936|bool(5,6)
				CALL --fundamental
				 lead: ("same")-> object same  @19616|text_mediator(170,3)
				 method: ("not")-> method not  @39376|bool(43,3)
				 output: (direct)-> object (anon)  @20256|text_mediator(183,10)
				IF
				 condition: (direct)-> object (anon)  @20256|text_mediator(183,10)
				{
					true branch: RETURN --to caller
				}
				MAKE
				 object: (direct)-> object (anon)  @20896|text_mediator(184,15)
				 type: ("endian")-> enum type endian  @10752|mediator(5,11)
				CALL --fundamental
				 lead: ("io")-> object io  @15136|text_mediator(170,3)
				 method: ("get_endian")-> method get_endian  @12416|mediator(314,3)
				 output: (direct)-> object (anon)  @20896|text_mediator(184,15)
				MAKE
				 object: (direct)-> object (anon)  @23136|text_mediator(184,15)
				 type: ("bool")-> type bool  @19936|bool(5,6)
				CALL
				 lead: (direct)-> object (anon)  @20896|text_mediator(184,15)
				 method: ("is_equal?")-> method is_equal?  @40288|mediator(5,11)
				 input: ("e")-> object e  @12256|text_mediator(172,11)
				 output: (direct)-> object (anon)  @23136|text_mediator(184,15)
				CALL --fundamental
				 lead: ("same")-> object same  @19616|text_mediator(170,3)
				 method: ("and")-> method and  @41040|bool(33,3)
				 input: (direct)-> object (anon)  @23136|text_mediator(184,15)
			}
		}

		method copy  @55520|text_mediator(438,3) --external
		 viable = no

		method copy_pattern<t>  @12672|text_mediator(549,3) --internal
		 viable = no
		{

			given
			{
				object io  @40160|text_mediator(549,3) --internal
				 type: (direct)-> type text_mediator  @35680|text_mediator(40,6)

				object pattern  @40480|text_mediator(549,3) --internal
				 type: ("t")-> (unmatched)

				object tm  @40800|text_mediator(549,3) --internal
				 type: ("text_mediator")-> type text_mediator  @35680|text_mediator(40,6)
			}

			BLOCK* --domain
			{
				CALL* --provisional
				 lead: ("pattern")-> object pattern  @40480|text_mediator(549,3)
				 method: ("get_length")-> (unmatched)
				 input: ("pattern")-> object pattern  @40480|text_mediator(549,3)
				CALL* --provisional
				 lead: (direct)-> blank (anon)  @36400|text_mediator(,)
				 method: ("is_equal?")-> (unmatched)
				 input: (direct)-> blank (anon)  @36400|text_mediator(,)
				 input: ("zero")-> object zero  @41840|conventional(34,2)
				IF* --provisional
				 condition: (direct)-> blank (anon)  @36672|text_mediator(,)
				{
					true branch: RETURN --to isolate (quit)
					 trace: (direct)-> object (anon)  @52320|text_mediator(,)
						trace branch: BLOCK --domain
						{
							MAKE
							 object: (direct)-> object (anon)  @52320|text_mediator(,)
							 type: (direct)-> type $6<26>( alpha\op<fault> )  @40208|$appendix(,)
							MAKE
							 proxy: (direct)-> proxy (anon)  @38384|text_mediator(,)
							 type: ("fault")-> type fault  @24224|fault(49,6)
							 permission: [init]
							CALL --initial, fundamental
							 lead: (direct)-> object (anon)  @52320|text_mediator(,)
							 method: ("begin")-> method begin  @31120|$appendix(,)
							 result: (direct)-> proxy (anon)  @38384|text_mediator(,)
							MAKE
							 literal: (direct)-> literal (anon)  @51040|text_mediator(,) --'bug'
							 type: ("expr")-> type expr  @18368|expr(5,6)
							MAKE
							 literal: (direct)-> literal (anon)  @57440|text_mediator(,) --'no pattern'
							 type: ("expr")-> type expr  @18368|expr(5,6)
							MAKE
							 object: (direct)-> object (anon)  @25520|text_mediator(551,59)
							 type: ("fault_category")-> enum type fault_category  @01568|fault(5,11)
							CALL --initial
							 lead: (direct)-> object (anon)  @25520|text_mediator(551,59)
							 method: ("begin")-> method begin  @34464|fault(5,11)
							 input: (direct)-> literal (anon)  @51040|text_mediator(,)
							CALL --initial, fundamental
							 lead: (direct)-> proxy (anon)  @38384|text_mediator(,)
							 method: ("begin")-> method begin  @01984|fault(97,3)
							 input: (direct)-> object (anon)  @25520|text_mediator(551,59)
							 input: (direct)-> literal (anon)  @57440|text_mediator(,)
						}
				}
				CALL
				 lead: ("io")-> object io  @40160|text_mediator(549,3)
				 method: ("spawn")-> method spawn  @51776|text_mediator(187,3)
				 output: ("tm")-> object tm  @40800|text_mediator(549,3)
				CALL* --provisional
				 lead: ("tm")-> object tm  @40800|text_mediator(549,3)
				 method: ("write")-> method write  @48032|text_mediator(238,3); method write  @49280|text_mediator(243,3); method write  @49696|text_mediator(258,3); method write  @51360|text_mediator(263,3)
				 input: ("pattern")-> object pattern  @40480|text_mediator(549,3)
			}
		}

		method dec_rp  @16416|text_mediator(604,3) --internal
		 viable = yes
		{

			given
			{
				object io  @44640|text_mediator(604,3) --internal
				 type: (direct)-> type text_mediator  @35680|text_mediator(40,6)
			}

			BLOCK --domain
			{
				MAKE
				 object: (direct)-> object rp  @48480|text_mediator(612,17)
				 type: ("int")-> type int  @21536|int(6,6)
				CALL --fundamental
				 lead: ("io")-> object io  @44640|text_mediator(604,3)
				 method: ("get_rp")-> method get_rp  @16992|mediator(344,3)
				 output: (direct)-> object rp  @48480|text_mediator(612,17)
				MAKE
				 object: (direct)-> object (anon)  @57760|text_mediator(613,10)
				 type: ("bool")-> type bool  @19936|bool(5,6)
				CALL --fundamental
				 lead: ("rp")-> object rp  @48480|text_mediator(612,17)
				 method: ("is_equal?")-> method is_equal?  @34336|int(64,3)
				 input: ("zero")-> object zero  @41840|conventional(34,2)
				 output: (direct)-> object (anon)  @57760|text_mediator(613,10)
				IF
				 condition: (direct)-> object (anon)  @57760|text_mediator(613,10)
				{
					true branch: BLOCK --domain
					{
						CALL --fundamental
						 lead: ("io")-> object io  @44640|text_mediator(604,3)
						 method: ("set_rp_end")-> method set_rp_end  @16160|mediator(340,3)
					}
					false branch: BLOCK --domain
					{
						MAKE
						 object: (direct)-> object (anon)  @44000|text_mediator(617,15)
						 type: ("bool")-> type bool  @19936|bool(5,6)
						CALL --fundamental
						 lead: ("io.codepoint_unit")-> object codepoint_unit  @07520|text_mediator(711,3)
						 method: ("is_equal?")-> method is_equal?  @34336|int(64,3)
						 input: ("two")-> object two  @38960|conventional(38,2)
						 output: (direct)-> object (anon)  @44000|text_mediator(617,15)
						IF
						 condition: (direct)-> object (anon)  @44000|text_mediator(617,15)
						{
							true branch: BLOCK --domain
							{
								CALL --fundamental
								 lead: ("rp")-> object rp  @48480|text_mediator(612,17)
								 method: ("sub")-> method sub  @46576|int(79,3)
								 input: ("two")-> object two  @38960|conventional(38,2)
								CALL --fundamental
								 lead: ("io")-> object io  @44640|text_mediator(604,3)
								 method: ("set_rp")-> method set_rp  @15328|mediator(336,3)
								 input: ("rp")-> object rp  @48480|text_mediator(612,17)
								MAKE
								 object: (direct)-> object w  @52960|text_mediator(621,5)
								 type: (direct)-> type $3<'16'>( word<'16'> )  @36368|$appendix(,)
								MAKE
								 literal: (direct)-> literal (anon)  @56800|text_mediator(,) --'b'
								 type: ("expr")-> type expr  @18368|expr(5,6)
								CALL --initial, fundamental
								 lead: (direct)-> object w  @52960|text_mediator(621,5)
								 method: ("begin")-> method begin  @31344|$appendix(,)
								 input: ("io")-> object io  @44640|text_mediator(604,3)
								 input: (direct)-> literal (anon)  @56800|text_mediator(,)
								MAKE
								 object: (direct)-> object (anon)  @19120|text_mediator(622,12)
								 type: ("bool")-> type bool  @19936|bool(5,6)
								CALL --fundamental
								 lead: ("w")-> object w  @52960|text_mediator(621,5)
								 method: ("is_less?")-> method is_less?  @32176|$appendix(,)
								 input: ("xDC00")-> object xDC00  @05920|text_mediator(463,3)
								 output: (direct)-> object (anon)  @19120|text_mediator(622,12)
								MAKE
								 object: (direct)-> object (anon)  @32240|text_mediator(622,12)
								 type: ("bool")-> type bool  @19936|bool(5,6)
								CALL --fundamental
								 lead: (direct)-> object (anon)  @19120|text_mediator(622,12)
								 method: ("not")-> method not  @39376|bool(43,3)
								 output: (direct)-> object (anon)  @32240|text_mediator(622,12)
								MAKE
								 object: (direct)-> object (anon)  @20400|text_mediator(622,35)
								 type: ("bool")-> type bool  @19936|bool(5,6)
								CALL --fundamental
								 lead: ("xDFFF")-> object xDFFF  @05280|text_mediator(464,3)
								 method: ("is_less?")-> method is_less?  @32176|$appendix(,)
								 input: ("w")-> object w  @52960|text_mediator(621,5)
								 output: (direct)-> object (anon)  @20400|text_mediator(622,35)
								MAKE
								 object: (direct)-> object (anon)  @32880|text_mediator(622,35)
								 type: ("bool")-> type bool  @19936|bool(5,6)
								CALL --fundamental
								 lead: (direct)-> object (anon)  @20400|text_mediator(622,35)
								 method: ("not")-> method not  @39376|bool(43,3)
								 output: (direct)-> object (anon)  @32880|text_mediator(622,35)
								MAKE
								 object: (direct)-> object (anon)  @24880|text_mediator(622,11)
								 type: ("bool")-> type bool  @19936|bool(5,6)
								CALL --fundamental
								 lead: (direct)-> object (anon)  @32240|text_mediator(622,12)
								 method: ("and")-> method and  @38128|bool(34,3)
								 input: (direct)-> object (anon)  @32880|text_mediator(622,35)
								 output: (direct)-> object (anon)  @24880|text_mediator(622,11)
								IF
								 condition: (direct)-> object (anon)  @24880|text_mediator(622,11)
								{
									true branch: CALL --fundamental
									 lead: ("rp")-> object rp  @48480|text_mediator(612,17)
									 method: ("sub")-> method sub  @46576|int(79,3)
									 input: ("two")-> object two  @38960|conventional(38,2)
								}
								CALL --fundamental
								 lead: ("io")-> object io  @44640|text_mediator(604,3)
								 method: ("set_rp")-> method set_rp  @15328|mediator(336,3)
								 input: ("rp")-> object rp  @48480|text_mediator(612,17)
							}
							false branch: BLOCK --domain
							{
								MAKE
								 object: (direct)-> object (anon)  @49120|text_mediator(626,15)
								 type: ("bool")-> type bool  @19936|bool(5,6)
								CALL --fundamental
								 lead: ("io.codepoint_unit")-> object codepoint_unit  @07520|text_mediator(711,3)
								 method: ("is_equal?")-> method is_equal?  @34336|int(64,3)
								 input: ("one")-> object one  @38640|conventional(36,2)
								 output: (direct)-> object (anon)  @49120|text_mediator(626,15)
								IF
								 condition: (direct)-> object (anon)  @49120|text_mediator(626,15)
								{
									true branch: BLOCK --domain
									{
										LOOP --unconditional
										{
											iteration branch: BLOCK --domain
											{
												CALL --fundamental
												 lead: ("rp")-> object rp  @48480|text_mediator(612,17)
												 method: ("dec")-> method dec  @44912|int(119,3)
												CALL --fundamental
												 lead: ("io")-> object io  @44640|text_mediator(604,3)
												 method: ("set_rp")-> method set_rp  @15328|mediator(336,3)
												 input: ("rp")-> object rp  @48480|text_mediator(612,17)
												MAKE
												 object: (direct)-> object w  @43040|text_mediator(632,6)
												 type: (direct)-> type $3<'8'>( word<'8'> )  @37136|$appendix(,)
												MAKE
												 literal: (direct)-> literal (anon)  @43360|text_mediator(,) --'b'
												 type: ("expr")-> type expr  @18368|expr(5,6)
												CALL --initial, fundamental
												 lead: (direct)-> object w  @43040|text_mediator(632,6)
												 method: ("begin")-> method begin  @20160|$appendix(,)
												 input: ("io")-> object io  @44640|text_mediator(604,3)
												 input: (direct)-> literal (anon)  @43360|text_mediator(,)
												MAKE
												 object: (direct)-> object (anon)  @17520|text_mediator(633,14)
												 type: (direct)-> type $3<'8'>( word<'8'> )  @37136|$appendix(,)
												CALL --fundamental
												 lead: ("w")-> object w  @43040|text_mediator(632,6)
												 method: ("and")-> method and  @17664|$appendix(,)
												 input: ("xC0")-> object xC0  @00800|text_mediator(469,3)
												 output: (direct)-> object (anon)  @17520|text_mediator(633,14)
												MAKE
												 object: (direct)-> object (anon)  @33200|text_mediator(633,12)
												 type: ("bool")-> type bool  @19936|bool(5,6)
												CALL --fundamental
												 lead: (direct)-> object (anon)  @17520|text_mediator(633,14)
												 method: ("is_equal?")-> method is_equal?  @21408|$appendix(,)
												 input: ("x80")-> object x80  @03680|text_mediator(466,3)
												 output: (direct)-> object (anon)  @33200|text_mediator(633,12)
												MAKE
												 object: (direct)-> object (anon)  @16880|text_mediator(633,12)
												 type: ("bool")-> type bool  @19936|bool(5,6)
												CALL --fundamental
												 lead: (direct)-> object (anon)  @33200|text_mediator(633,12)
												 method: ("not")-> method not  @39376|bool(43,3)
												 output: (direct)-> object (anon)  @16880|text_mediator(633,12)
												IF
												 condition: (direct)-> object (anon)  @16880|text_mediator(633,12)
												{
													true branch: RETURN --to loop (escape)
												}
												CALL --fundamental
												 lead: ("io")-> object io  @44640|text_mediator(604,3)
												 method: ("set_rp")-> method set_rp  @15328|mediator(336,3)
												 input: ("rp")-> object rp  @48480|text_mediator(612,17)
											}
										}
									}
									false branch: BLOCK --domain
									{
										CALL --fundamental
										 lead: ("rp")-> object rp  @48480|text_mediator(612,17)
										 method: ("sub")-> method sub  @46576|int(79,3)
										 input: ("four")-> object four  @41520|conventional(42,2)
										CALL --fundamental
										 lead: ("io")-> object io  @44640|text_mediator(604,3)
										 method: ("set_rp")-> method set_rp  @15328|mediator(336,3)
										 input: ("rp")-> object rp  @48480|text_mediator(612,17)
									}
								}
							}
						}
					}
				}
			}
		}

		method delete  @58848|text_mediator(440,3) --external
		 viable = no

		subroutine describe_utf  @31616|text_mediator(683,13) --internal
		 viable = yes
		{

			common
			{
				enumerator $index  @61600|text_mediator(,) --internal
				 type: (direct)-> type $1<11>( <utf>enumerator )  @32912|$appendix(,)

				subroutine $start1  @11568|text_mediator(,) --internal
				 viable = yes
				{

					given
					{
					}

					BLOCK --domain
					{
						MAKE
						 enumerator: (direct)-> enumerator $index  @61600|text_mediator(,)
						 type: (direct)-> type $1<11>( <utf>enumerator )  @32912|$appendix(,)
					}
				}
			}


			given
			{
				object fex  @58400|text_mediator(683,13) --internal
				 type: ("expr")-> type expr  @18368|expr(5,6)

				object unit  @41440|text_mediator(683,13) --internal
				 type: ("int")-> type int  @21536|int(6,6)

				object utf  @52000|text_mediator(683,13) --internal
				 type: ("utf")-> enum type utf  @11168|mediator(7,11)
			}

			BLOCK --domain
			{
				SELECT
				 selector: ("given\utf")-> object utf  @52000|text_mediator(683,13)
				 enumerator: (direct)-> enumerator $index  @61600|text_mediator(,)
				 'UTF-8' -> branch 0
				 'UTF-16' -> branch 1
				 'UTF-32' -> branch 2
				{

					branch 0: BLOCK --domain
					{
						CALL --initial, fundamental
						 lead: ("unit")-> object unit  @41440|text_mediator(683,13)
						 method: ("begin")-> method begin  @31840|int(54,3)
						 input: ("one")-> object one  @38640|conventional(36,2)
						MAKE
						 literal: (direct)-> literal (anon)  @52640|text_mediator(,) --'b:utf8'
						 type: ("expr")-> type expr  @18368|expr(5,6)
						CALL --initial, fundamental
						 lead: ("fex")-> object fex  @58400|text_mediator(683,13)
						 method: ("begin")-> method begin  @65024|expr(88,3)
						 input: (direct)-> literal (anon)  @52640|text_mediator(,)
					}

					branch 1: BLOCK --domain
					{
						CALL --initial, fundamental
						 lead: ("unit")-> object unit  @41440|text_mediator(683,13)
						 method: ("begin")-> method begin  @31840|int(54,3)
						 input: ("two")-> object two  @38960|conventional(38,2)
						MAKE
						 literal: (direct)-> literal (anon)  @44960|text_mediator(,) --'b:utf16'
						 type: ("expr")-> type expr  @18368|expr(5,6)
						CALL --initial, fundamental
						 lead: ("fex")-> object fex  @58400|text_mediator(683,13)
						 method: ("begin")-> method begin  @65024|expr(88,3)
						 input: (direct)-> literal (anon)  @44960|text_mediator(,)
					}

					branch 2: BLOCK --domain
					{
						CALL --initial, fundamental
						 lead: ("unit")-> object unit  @41440|text_mediator(683,13)
						 method: ("begin")-> method begin  @31840|int(54,3)
						 input: ("four")-> object four  @41520|conventional(42,2)
						MAKE
						 literal: (direct)-> literal (anon)  @50080|text_mediator(,) --'b:utf32'
						 type: ("expr")-> type expr  @18368|expr(5,6)
						CALL --initial, fundamental
						 lead: ("fex")-> object fex  @58400|text_mediator(683,13)
						 method: ("begin")-> method begin  @65024|expr(88,3)
						 input: (direct)-> literal (anon)  @50080|text_mediator(,)
					}
				}
			}
		}

		method detach  @50528|text_mediator(124,3) --external
		 viable = yes
		{

			given
			{
				object io  @19296|text_mediator(124,3) --internal
				 type: (direct)-> type text_mediator  @35680|text_mediator(40,6)

				object string  @10016|text_mediator(124,3) --internal
				 type: ("string")-> type string  @11552|string(4,6)
			}

			BLOCK --domain
			{
				MAKE
				 object: (direct)-> object f  @13856|text_mediator(126,18)
				 type: ("utf")-> enum type utf  @11168|mediator(7,11)
				CALL --fundamental
				 lead: ("io")-> object io  @19296|text_mediator(124,3)
				 method: ("get_utf")-> method get_utf  @12832|mediator(316,3)
				 output: (direct)-> object f  @13856|text_mediator(126,18)
				MAKE
				 object: (direct)-> object e  @17696|text_mediator(126,40)
				 type: ("endian")-> enum type endian  @10752|mediator(5,11)
				CALL --fundamental
				 lead: ("io")-> object io  @19296|text_mediator(124,3)
				 method: ("get_endian")-> method get_endian  @12416|mediator(314,3)
				 output: (direct)-> object e  @17696|text_mediator(126,40)
				MAKE
				 object: (direct)-> object a  @22496|text_mediator(127,17)
				 type: ("addr")-> type addr  @44496|addr(4,6)
				MAKE
				 object: (direct)-> object n  @18336|text_mediator(127,25)
				 type: ("int")-> type int  @21536|int(6,6)
				CALL --fundamental
				 lead: ("io")-> object io  @19296|text_mediator(124,3)
				 method: ("detach")-> method detach  @62144|mediator(319,3)
				 output: (direct)-> object a  @22496|text_mediator(127,17)
				 output: (direct)-> object n  @18336|text_mediator(127,25)
				CALL --initial, fundamental
				 lead: ("given\string")-> object string  @10016|text_mediator(124,3)
				 method: ("begin")-> method begin  @15280|string(53,3)
				 input: ("a")-> object a  @22496|text_mediator(127,17)
				 input: ("f")-> object f  @13856|text_mediator(126,18)
				 input: ("e")-> object e  @17696|text_mediator(126,40)
				 input: ("n")-> object n  @18336|text_mediator(127,25)
				CALL --fundamental
				 lead: ("io")-> object io  @19296|text_mediator(124,3)
				 method: ("set_size")-> method set_size  @13664|mediator(327,3)
				 input: ("zero")-> object zero  @41840|conventional(34,2)
			}
		}

		method export  @52192|text_mediator(209,3) --external
		 viable = yes
		{

			given
			{
				object io  @21536|text_mediator(209,3) --internal
				 type: (direct)-> type text_mediator  @35680|text_mediator(40,6)

				object other  @13216|text_mediator(209,3) --internal
				 type: ("text_mediator")-> type text_mediator  @35680|text_mediator(40,6)

				object q  @21856|text_mediator(209,3) --internal
				 type: ("int")-> type int  @21536|int(6,6)
			}

			BLOCK --domain
			{
				MAKE
				 proxy: (direct)-> proxy ~q  @35952|text_mediator(211,4)
				 type: ("int")-> type int  @21536|int(6,6)
				 permission: [eval]
				CALL
				 subroutine: (direct)-> subroutine $22<5>( fix<int> )  @58288|$appendix(,)
				 input: ("q")-> object q  @21856|text_mediator(209,3)
				 input: ("int_max")-> object int_max  @38320|conventional(32,2)
				 result: (direct)-> proxy ~q  @35952|text_mediator(211,4)
				CALL --fundamental
				 lead: ("io")-> object io  @21536|text_mediator(209,3)
				 method: ("set_rp")-> method set_rp  @15328|mediator(336,3)
				 input: ("zero")-> object zero  @41840|conventional(34,2)
				CALL --fundamental
				 lead: ("other")-> object other  @13216|text_mediator(209,3)
				 method: ("set_wp")-> method set_wp  @19904|mediator(353,3)
				 input: ("zero")-> object zero  @41840|conventional(34,2)
				MAKE
				 object: (direct)-> object q2  @22176|text_mediator(214,4)
				 type: ("int")-> type int  @21536|int(6,6)
				CALL --initial, fundamental
				 lead: (direct)-> object q2  @22176|text_mediator(214,4)
				 method: ("begin")-> method begin  @31424|int(52,3)
				 input: (pending)->
				LOOP
				 condition: (direct)-> object (anon)  @21040|text_mediator(215,12)
				{
					condition branch: BLOCK --macro
					{
						MAKE
						 object: (direct)-> object (anon)  @17200|text_mediator(215,14)
						 type: ("bool")-> type bool  @19936|bool(5,6)
						CALL --fundamental
						 lead: ("q2")-> object q2  @22176|text_mediator(214,4)
						 method: ("is_less?")-> method is_less?  @35168|int(68,3)
						 input: ("~q")-> proxy ~q  @35952|text_mediator(211,4)
						 output: (direct)-> object (anon)  @17200|text_mediator(215,14)
						MAKE
						 object: (direct)-> object (anon)  @24736|text_mediator(215,37)
						 type: ("bool")-> type bool  @19936|bool(5,6)
						CALL --fundamental
						 lead: ("io")-> object io  @21536|text_mediator(209,3)
						 method: ("rp_end?")-> method rp_end?  @18240|mediator(350,3)
						 output: (direct)-> object (anon)  @24736|text_mediator(215,37)
						MAKE
						 object: (direct)-> object (anon)  @25056|text_mediator(215,32)
						 type: ("bool")-> type bool  @19936|bool(5,6)
						CALL --fundamental
						 lead: (direct)-> object (anon)  @24736|text_mediator(215,37)
						 method: ("not")-> method not  @39376|bool(43,3)
						 output: (direct)-> object (anon)  @25056|text_mediator(215,32)
						MAKE
						 object: (direct)-> object (anon)  @21040|text_mediator(215,12)
						 type: ("bool")-> type bool  @19936|bool(5,6)
						CALL --fundamental
						 lead: (direct)-> object (anon)  @17200|text_mediator(215,14)
						 method: ("and")-> method and  @38128|bool(34,3)
						 input: (direct)-> object (anon)  @25056|text_mediator(215,32)
						 output: (direct)-> object (anon)  @21040|text_mediator(215,12)
					}
					iteration branch: BLOCK --domain
					{
						MAKE
						 object: (direct)-> object n  @08416|text_mediator(217,5)
						 type: ("int")-> type int  @21536|int(6,6)
						CALL --initial, fundamental
						 lead: (direct)-> object n  @08416|text_mediator(217,5)
						 method: ("begin")-> method begin  @33088|int(59,3)
						 input: ("io")-> object io  @21536|text_mediator(209,3)
						 input: ("io.codepoint_fex")-> object codepoint_fex  @07200|text_mediator(710,3)
						CALL --fundamental
						 lead: (direct)-> object n  @08416|text_mediator(217,5)
						 method: ("store")-> method store  @33504|int(61,3)
						 input: ("other")-> object other  @13216|text_mediator(209,3)
						 input: ("other.codepoint_fex")-> object codepoint_fex  @07200|text_mediator(710,3)
						CALL --fundamental
						 lead: ("q2")-> object q2  @22176|text_mediator(214,4)
						 method: ("inc")-> method inc  @44080|int(116,3)
					}
				}
			}
		}

		method fread<t>  @62176|text_mediator(341,3) --external
		 viable = no
		{

			given
			{
				object fex  @08160|text_mediator(341,3) --internal
				 type: ("expr")-> type expr  @18368|expr(5,6)

				object io  @01760|text_mediator(341,3) --internal
				 type: (direct)-> type text_mediator  @35680|text_mediator(40,6)

				object x  @04000|text_mediator(341,3) --internal
				 type: ("t")-> (unmatched)
			}

			BLOCK* --domain
			{
				MAKE
				 literal: (direct)-> literal (anon)  @02720|text_mediator(,) --'t'
				 type: ("expr")-> type expr  @18368|expr(5,6)
				MAKE
				 proxy: (direct)-> proxy ~fex  @39296|text_mediator(343,4)
				 type: ("expr")-> type expr  @18368|expr(5,6)
				 permission: [eval]
				CALL
				 subroutine: (direct)-> subroutine $22<2>( fix<expr> )  @59888|$appendix(,)
				 input: ("fex")-> object fex  @08160|text_mediator(341,3)
				 input: (direct)-> literal (anon)  @02720|text_mediator(,)
				 result: (direct)-> proxy ~fex  @39296|text_mediator(343,4)
				MAKE
				 proxy: (direct)-> proxy (anon)  @39904|text_mediator(344,6)
				 type: ("mediator")-> type mediator  @22304|mediator(21,6)
				 permission: [init]
				TRANSLATE --base
				 lead: ("io")-> object io  @01760|text_mediator(341,3)
				 method: (direct)-> method $18<34>( as_base<mediator> )  @38608|$appendix(,)
				 result: (direct)-> proxy (anon)  @39904|text_mediator(344,6)
				CALL* --provisional --fundamental
				 lead: (direct)-> proxy (anon)  @39904|text_mediator(344,6)
				 method: ("fread<t>")-> method fread<t>  @43568|mediator(385,3); method fread<t>  @44400|mediator(387,3)
				 input: ("~fex")-> proxy ~fex  @39296|text_mediator(343,4)
				 output: ("x")-> object x  @04000|text_mediator(341,3)
			}
		}

		method fread<t>  @58016|text_mediator(347,3) --external
		 viable = no
		{

			given
			{
				object etc  @07200|text_mediator(347,3) --internal
				 type: ("extra")-> type extra  @18752|extra(5,6)

				object fex  @04960|text_mediator(347,3) --internal
				 type: ("expr")-> type expr  @18368|expr(5,6)

				object io  @10720|text_mediator(347,3) --internal
				 type: (direct)-> type text_mediator  @35680|text_mediator(40,6)

				object x  @12640|text_mediator(347,3) --internal
				 type: ("t")-> (unmatched)
			}

			BLOCK* --domain
			{
				MAKE
				 literal: (direct)-> literal (anon)  @09120|text_mediator(,) --'t'
				 type: ("expr")-> type expr  @18368|expr(5,6)
				MAKE
				 proxy: (direct)-> proxy ~fex  @40208|text_mediator(349,4)
				 type: ("expr")-> type expr  @18368|expr(5,6)
				 permission: [eval]
				CALL
				 subroutine: (direct)-> subroutine $22<2>( fix<expr> )  @59888|$appendix(,)
				 input: ("fex")-> object fex  @04960|text_mediator(347,3)
				 input: (direct)-> literal (anon)  @09120|text_mediator(,)
				 result: (direct)-> proxy ~fex  @40208|text_mediator(349,4)
				MAKE
				 proxy: (direct)-> proxy (anon)  @35344|text_mediator(350,6)
				 type: ("mediator")-> type mediator  @22304|mediator(21,6)
				 permission: [init]
				TRANSLATE --base
				 lead: ("io")-> object io  @10720|text_mediator(347,3)
				 method: (direct)-> method $18<34>( as_base<mediator> )  @38608|$appendix(,)
				 result: (direct)-> proxy (anon)  @35344|text_mediator(350,6)
				CALL* --provisional --fundamental
				 lead: (direct)-> proxy (anon)  @35344|text_mediator(350,6)
				 method: ("fread<t>")-> method fread<t>  @44400|mediator(387,3)
				 input: ("~fex")-> proxy ~fex  @40208|text_mediator(349,4)
				 output: ("x")-> object x  @12640|text_mediator(347,3)
				 extra: ("etc")-> object etc  @07200|text_mediator(347,3)
			}
		}

		method fwrite<t>  @50112|text_mediator(269,3) --external
		 viable = no
		{

			given
			{
				object fex  @30176|text_mediator(269,3) --internal
				 type: ("expr")-> type expr  @18368|expr(5,6)

				object io  @40736|text_mediator(269,3) --internal
				 type: (direct)-> type text_mediator  @35680|text_mediator(40,6)

				object obj  @37536|text_mediator(269,3) --internal
				 type: ("t")-> (unmatched)
			}

			BLOCK* --domain
			{
				MAKE
				 literal: (direct)-> literal (anon)  @31136|text_mediator(,) --'t'
				 type: ("expr")-> type expr  @18368|expr(5,6)
				MAKE
				 proxy: (direct)-> proxy ~fex  @35040|text_mediator(271,4)
				 type: ("expr")-> type expr  @18368|expr(5,6)
				 permission: [eval]
				CALL
				 subroutine: (direct)-> subroutine $22<2>( fix<expr> )  @59888|$appendix(,)
				 input: ("fex")-> object fex  @30176|text_mediator(269,3)
				 input: (direct)-> literal (anon)  @31136|text_mediator(,)
				 result: (direct)-> proxy ~fex  @35040|text_mediator(271,4)
				MAKE
				 proxy: (direct)-> proxy (anon)  @40512|text_mediator(272,6)
				 type: ("mediator")-> type mediator  @22304|mediator(21,6)
				 permission: [init]
				TRANSLATE --base
				 lead: ("io")-> object io  @40736|text_mediator(269,3)
				 method: (direct)-> method $18<34>( as_base<mediator> )  @38608|$appendix(,)
				 result: (direct)-> proxy (anon)  @40512|text_mediator(272,6)
				CALL* --provisional --fundamental
				 lead: (direct)-> proxy (anon)  @40512|text_mediator(272,6)
				 method: ("fwrite<t>")-> method fwrite<t>  @45232|mediator(390,3); method fwrite<t>  @46480|mediator(392,3)
				 input: ("obj")-> object obj  @37536|text_mediator(269,3)
				 input: ("~fex")-> proxy ~fex  @35040|text_mediator(271,4)
			}
		}

		method fwrite<t>  @62592|text_mediator(275,3) --external
		 viable = no
		{

			given
			{
				object etc  @32096|text_mediator(275,3) --internal
				 type: ("extra")-> type extra  @18752|extra(5,6)

				object fex  @36576|text_mediator(275,3) --internal
				 type: ("expr")-> type expr  @18368|expr(5,6)

				object io  @37216|text_mediator(275,3) --internal
				 type: (direct)-> type text_mediator  @35680|text_mediator(40,6)

				object obj  @33376|text_mediator(275,3) --internal
				 type: ("t")-> (unmatched)
			}

			BLOCK* --domain
			{
				MAKE
				 literal: (direct)-> literal (anon)  @39136|text_mediator(,) --'t'
				 type: ("expr")-> type expr  @18368|expr(5,6)
				MAKE
				 proxy: (direct)-> proxy ~fex  @34736|text_mediator(277,4)
				 type: ("expr")-> type expr  @18368|expr(5,6)
				 permission: [eval]
				CALL
				 subroutine: (direct)-> subroutine $22<2>( fix<expr> )  @59888|$appendix(,)
				 input: ("fex")-> object fex  @36576|text_mediator(275,3)
				 input: (direct)-> literal (anon)  @39136|text_mediator(,)
				 result: (direct)-> proxy ~fex  @34736|text_mediator(277,4)
				MAKE
				 proxy: (direct)-> proxy (anon)  @34432|text_mediator(278,6)
				 type: ("mediator")-> type mediator  @22304|mediator(21,6)
				 permission: [init]
				TRANSLATE --base
				 lead: ("io")-> object io  @37216|text_mediator(275,3)
				 method: (direct)-> method $18<34>( as_base<mediator> )  @38608|$appendix(,)
				 result: (direct)-> proxy (anon)  @34432|text_mediator(278,6)
				CALL* --provisional --fundamental
				 lead: (direct)-> proxy (anon)  @34432|text_mediator(278,6)
				 method: ("fwrite<t>")-> method fwrite<t>  @46480|mediator(392,3)
				 input: ("obj")-> object obj  @33376|text_mediator(275,3)
				 input: ("~fex")-> proxy ~fex  @34736|text_mediator(277,4)
				 extra: ("etc")-> object etc  @32096|text_mediator(275,3)
			}
		}

		method import  @53024|text_mediator(196,3) --external
		 viable = yes
		{

			given
			{
				object io  @23456|text_mediator(196,3) --internal
				 type: (direct)-> type text_mediator  @35680|text_mediator(40,6)

				object other  @11616|text_mediator(196,3) --internal
				 type: ("text_mediator")-> type text_mediator  @35680|text_mediator(40,6)

				object q  @24096|text_mediator(196,3) --internal
				 type: ("int")-> type int  @21536|int(6,6)
			}

			BLOCK --domain
			{
				MAKE
				 proxy: (direct)-> proxy ~q  @34128|text_mediator(198,4)
				 type: ("int")-> type int  @21536|int(6,6)
				 permission: [eval]
				CALL
				 subroutine: (direct)-> subroutine $22<5>( fix<int> )  @58288|$appendix(,)
				 input: ("q")-> object q  @24096|text_mediator(196,3)
				 input: ("int_max")-> object int_max  @38320|conventional(32,2)
				 result: (direct)-> proxy ~q  @34128|text_mediator(198,4)
				CALL --fundamental
				 lead: ("other")-> object other  @11616|text_mediator(196,3)
				 method: ("set_rp")-> method set_rp  @15328|mediator(336,3)
				 input: ("zero")-> object zero  @41840|conventional(34,2)
				CALL --fundamental
				 lead: ("io")-> object io  @23456|text_mediator(196,3)
				 method: ("set_wp")-> method set_wp  @19904|mediator(353,3)
				 input: ("zero")-> object zero  @41840|conventional(34,2)
				MAKE
				 object: (direct)-> object q2  @10976|text_mediator(201,4)
				 type: ("int")-> type int  @21536|int(6,6)
				CALL --initial, fundamental
				 lead: (direct)-> object q2  @10976|text_mediator(201,4)
				 method: ("begin")-> method begin  @31424|int(52,3)
				 input: (pending)->
				LOOP
				 condition: (direct)-> object (anon)  @19440|text_mediator(202,12)
				{
					condition branch: BLOCK --macro
					{
						MAKE
						 object: (direct)-> object (anon)  @17840|text_mediator(202,14)
						 type: ("bool")-> type bool  @19936|bool(5,6)
						CALL --fundamental
						 lead: ("q2")-> object q2  @10976|text_mediator(201,4)
						 method: ("is_less?")-> method is_less?  @35168|int(68,3)
						 input: ("~q")-> proxy ~q  @34128|text_mediator(198,4)
						 output: (direct)-> object (anon)  @17840|text_mediator(202,14)
						MAKE
						 object: (direct)-> object (anon)  @16416|text_mediator(202,37)
						 type: ("bool")-> type bool  @19936|bool(5,6)
						CALL --fundamental
						 lead: ("other")-> object other  @11616|text_mediator(196,3)
						 method: ("rp_end?")-> method rp_end?  @18240|mediator(350,3)
						 output: (direct)-> object (anon)  @16416|text_mediator(202,37)
						MAKE
						 object: (direct)-> object (anon)  @24416|text_mediator(202,32)
						 type: ("bool")-> type bool  @19936|bool(5,6)
						CALL --fundamental
						 lead: (direct)-> object (anon)  @16416|text_mediator(202,37)
						 method: ("not")-> method not  @39376|bool(43,3)
						 output: (direct)-> object (anon)  @24416|text_mediator(202,32)
						MAKE
						 object: (direct)-> object (anon)  @19440|text_mediator(202,12)
						 type: ("bool")-> type bool  @19936|bool(5,6)
						CALL --fundamental
						 lead: (direct)-> object (anon)  @17840|text_mediator(202,14)
						 method: ("and")-> method and  @38128|bool(34,3)
						 input: (direct)-> object (anon)  @24416|text_mediator(202,32)
						 output: (direct)-> object (anon)  @19440|text_mediator(202,12)
					}
					iteration branch: BLOCK --domain
					{
						MAKE
						 object: (direct)-> object n  @10336|text_mediator(204,5)
						 type: ("int")-> type int  @21536|int(6,6)
						CALL --initial, fundamental
						 lead: (direct)-> object n  @10336|text_mediator(204,5)
						 method: ("begin")-> method begin  @33088|int(59,3)
						 input: ("other")-> object other  @11616|text_mediator(196,3)
						 input: ("other.codepoint_fex")-> object codepoint_fex  @07200|text_mediator(710,3)
						CALL --fundamental
						 lead: (direct)-> object n  @10336|text_mediator(204,5)
						 method: ("store")-> method store  @33504|int(61,3)
						 input: ("io")-> object io  @23456|text_mediator(196,3)
						 input: ("io.codepoint_fex")-> object codepoint_fex  @07200|text_mediator(710,3)
						CALL --fundamental
						 lead: ("q2")-> object q2  @10976|text_mediator(201,4)
						 method: ("inc")-> method inc  @44080|int(116,3)
					}
				}
			}
		}

		method inc_rp  @12256|text_mediator(598,3) --internal
		 viable = yes
		{

			given
			{
				object io  @47840|text_mediator(598,3) --internal
				 type: (direct)-> type text_mediator  @35680|text_mediator(40,6)
			}

			BLOCK --domain
			{
				MAKE
				 object: (direct)-> object (anon)  @55200|text_mediator(600,38)
				 type: ("int")-> type int  @21536|int(6,6)
				CALL
				 lead: ("io")-> object io  @47840|text_mediator(598,3)
				 method: ("predict_next_rp")-> method predict_next_rp  @04352|text_mediator(645,3)
				 output: (direct)-> object (anon)  @55200|text_mediator(600,38)
				CALL --fundamental
				 lead: ("io")-> object io  @47840|text_mediator(598,3)
				 method: ("set_rp")-> method set_rp  @15328|mediator(336,3)
				 input: (direct)-> object (anon)  @55200|text_mediator(600,38)
			}
		}

		method insert  @63424|text_mediator(442,3) --external
		 viable = no

		method insert  @58432|text_mediator(444,3) --external
		 viable = no

		method match  @10592|text_mediator(557,3) --internal
		 viable = yes
		{

			given
			{
				object d  @54560|text_mediator(557,3) --internal
				 type: ("sign")-> enum type sign  @25328|conventional(103,11)

				subroutine helper  @10368|text_mediator(557,3) --internal
				 viable = yes

				object io  @48160|text_mediator(557,3) --internal
				 type: (direct)-> type text_mediator  @35680|text_mediator(40,6)

				object ok  @47200|text_mediator(557,3) --internal
				 type: ("bool")-> type bool  @19936|bool(5,6)

				object ptm  @55840|text_mediator(557,3) --internal
				 type: ("text_mediator")-> type text_mediator  @35680|text_mediator(40,6)

				object q  @45920|text_mediator(557,3) --internal
				 type: ("int")-> type int  @21536|int(6,6)

				object rp  @54880|text_mediator(557,3) --internal
				 type: ("int")-> type int  @21536|int(6,6)
			}

			BLOCK --domain
			{
				MAKE
				 literal: (direct)-> literal (anon)  @42080|text_mediator(,) --'positive'
				 type: ("expr")-> type expr  @18368|expr(5,6)
				MAKE
				 object: (direct)-> object (anon)  @47520|text_mediator(575,10)
				 type: (direct)-> enum type sign  @25328|conventional(103,11)
				CALL --initial
				 lead: (direct)-> object (anon)  @47520|text_mediator(575,10)
				 method: ("begin")-> method begin  @02272|conventional(103,11)
				 input: (direct)-> literal (anon)  @42080|text_mediator(,)
				MAKE
				 object: (direct)-> object (anon)  @51360|text_mediator(575,10)
				 type: ("bool")-> type bool  @19936|bool(5,6)
				CALL
				 lead: ("d")-> object d  @54560|text_mediator(557,3)
				 method: ("is_equal?")-> method is_equal?  @15168|conventional(103,11)
				 input: (direct)-> object (anon)  @47520|text_mediator(575,10)
				 output: (direct)-> object (anon)  @51360|text_mediator(575,10)
				IF
				 condition: (direct)-> object (anon)  @51360|text_mediator(575,10)
				{
					true branch: CALL --fundamental
					 lead: ("ptm")-> object ptm  @55840|text_mediator(557,3)
					 method: ("set_rp")-> method set_rp  @15328|mediator(336,3)
					 input: ("zero")-> object zero  @41840|conventional(34,2)
					false branch: CALL --fundamental
					 lead: ("ptm")-> object ptm  @55840|text_mediator(557,3)
					 method: ("set_rp_last")-> method set_rp_last  @15744|mediator(338,3)
				}
				CALL --initial, fundamental
				 lead: ("q")-> object q  @45920|text_mediator(557,3)
				 method: ("begin")-> method begin  @31424|int(52,3)
				 input: (pending)->
				LOOP
				 condition: (direct)-> object (anon)  @42400|text_mediator(579,12)
				{
					condition branch: BLOCK --macro
					{
						MAKE
						 object: (direct)-> object (anon)  @51680|text_mediator(579,17)
						 type: ("bool")-> type bool  @19936|bool(5,6)
						CALL --fundamental
						 lead: ("io")-> object io  @48160|text_mediator(557,3)
						 method: ("rp_end?")-> method rp_end?  @18240|mediator(350,3)
						 output: (direct)-> object (anon)  @51680|text_mediator(579,17)
						MAKE
						 object: (direct)-> object (anon)  @42400|text_mediator(579,12)
						 type: ("bool")-> type bool  @19936|bool(5,6)
						CALL --fundamental
						 lead: (direct)-> object (anon)  @51680|text_mediator(579,17)
						 method: ("not")-> method not  @39376|bool(43,3)
						 output: (direct)-> object (anon)  @42400|text_mediator(579,12)
					}
					iteration branch: BLOCK --domain
					{
						MAKE
						 object: (direct)-> object c  @42720|text_mediator(581,5)
						 type: ("unicode")-> type unicode  @05408|unicode(4,6)
						MAKE
						 literal: (direct)-> literal (anon)  @50720|text_mediator(,) --'positive'
						 type: ("expr")-> type expr  @18368|expr(5,6)
						MAKE
						 object: (direct)-> object (anon)  @56160|text_mediator(582,11)
						 type: (direct)-> enum type sign  @25328|conventional(103,11)
						CALL --initial
						 lead: (direct)-> object (anon)  @56160|text_mediator(582,11)
						 method: ("begin")-> method begin  @02272|conventional(103,11)
						 input: (direct)-> literal (anon)  @50720|text_mediator(,)
						MAKE
						 object: (direct)-> object (anon)  @57120|text_mediator(582,11)
						 type: ("bool")-> type bool  @19936|bool(5,6)
						CALL
						 lead: ("d")-> object d  @54560|text_mediator(557,3)
						 method: ("is_equal?")-> method is_equal?  @15168|conventional(103,11)
						 input: (direct)-> object (anon)  @56160|text_mediator(582,11)
						 output: (direct)-> object (anon)  @57120|text_mediator(582,11)
						IF
						 condition: (direct)-> object (anon)  @57120|text_mediator(582,11)
						{
							true branch: CALL
							 lead: ("io")-> object io  @48160|text_mediator(557,3)
							 method: ("read")-> method read  @57600|text_mediator(284,3)
							 output: ("c")-> object c  @42720|text_mediator(581,5)
							false branch: BLOCK --domain
							{
								MAKE
								 object: (direct)-> object mark  @56480|text_mediator(585,19)
								 type: ("int")-> type int  @21536|int(6,6)
								CALL --fundamental
								 lead: ("io")-> object io  @48160|text_mediator(557,3)
								 method: ("get_rp")-> method get_rp  @16992|mediator(344,3)
								 output: (direct)-> object mark  @56480|text_mediator(585,19)
								CALL
								 lead: ("io")-> object io  @48160|text_mediator(557,3)
								 method: ("read")-> method read  @57600|text_mediator(284,3)
								 output: ("c")-> object c  @42720|text_mediator(581,5)
								CALL --fundamental
								 lead: ("io")-> object io  @48160|text_mediator(557,3)
								 method: ("set_rp")-> method set_rp  @15328|mediator(336,3)
								 input: ("mark")-> object mark  @56480|text_mediator(585,19)
								CALL
								 lead: ("io")-> object io  @48160|text_mediator(557,3)
								 method: ("dec_rp")-> method dec_rp  @16416|text_mediator(604,3)
							}
						}
						CALL
						 subroutine: ("helper")-> subroutine helper  @10368|text_mediator(557,3)
						 input: ("ptm")-> object ptm  @55840|text_mediator(557,3)
						 input: ("c")-> object c  @42720|text_mediator(581,5)
						 input: ("d")-> object d  @54560|text_mediator(557,3)
						 input: ("io.codepoint_fex")-> object codepoint_fex  @07200|text_mediator(710,3)
						 output: ("ok")-> object ok  @47200|text_mediator(557,3)
						MAKE
						 object: (direct)-> object (anon)  @44320|text_mediator(588,11)
						 type: ("bool")-> type bool  @19936|bool(5,6)
						CALL --fundamental
						 lead: ("ok")-> object ok  @47200|text_mediator(557,3)
						 method: ("is_not_null?")-> method is_not_null?  @42320|object(36,3)
						 output: (direct)-> object (anon)  @44320|text_mediator(588,11)
						IF
						 condition: (direct)-> object (anon)  @44320|text_mediator(588,11)
						{
							true branch: RETURN --to loop (escape)
						}
						CALL --fundamental
						 lead: ("q")-> object q  @45920|text_mediator(557,3)
						 method: ("inc")-> method inc  @44080|int(116,3)
					}
				}
				MAKE
				 object: (direct)-> object (anon)  @46880|text_mediator(593,10)
				 type: ("bool")-> type bool  @19936|bool(5,6)
				CALL --fundamental
				 lead: ("ok")-> object ok  @47200|text_mediator(557,3)
				 method: ("is_null?")-> method is_null?  @41904|object(34,3)
				 output: (direct)-> object (anon)  @46880|text_mediator(593,10)
				IF
				 condition: (direct)-> object (anon)  @46880|text_mediator(593,10)
				{
					true branch: CALL --initial, fundamental
					 lead: ("ok")-> object ok  @47200|text_mediator(557,3)
					 method: ("begin")-> method begin  @42288|bool(26,3)
					 input: ("false")-> object false  @40880|conventional(24,2)
					false branch: IF
					 condition: ("ok")-> object ok  @47200|text_mediator(557,3)
					{
						true branch: CALL --fundamental
						 lead: ("q")-> object q  @45920|text_mediator(557,3)
						 method: ("inc")-> method inc  @44080|int(116,3)
					}
				}
			}
		}

		method predict_next_rp  @04352|text_mediator(645,3) --internal
		 viable = yes
		{

			given
			{
				object io  @55520|text_mediator(645,3) --internal
				 type: (direct)-> type text_mediator  @35680|text_mediator(40,6)

				object rp  @41120|text_mediator(645,3) --internal
				 type: ("int")-> type int  @21536|int(6,6)
			}

			BLOCK --domain
			{
				CALL --fundamental
				 lead: ("io")-> object io  @55520|text_mediator(645,3)
				 method: ("get_rp")-> method get_rp  @16992|mediator(344,3)
				 output: ("rp")-> object rp  @41120|text_mediator(645,3)
				MAKE
				 object: (direct)-> object (anon)  @46560|text_mediator(655,10)
				 type: ("bool")-> type bool  @19936|bool(5,6)
				CALL --fundamental
				 lead: ("io.codepoint_unit")-> object codepoint_unit  @07520|text_mediator(711,3)
				 method: ("is_equal?")-> method is_equal?  @34336|int(64,3)
				 input: ("two")-> object two  @38960|conventional(38,2)
				 output: (direct)-> object (anon)  @46560|text_mediator(655,10)
				IF
				 condition: (direct)-> object (anon)  @46560|text_mediator(655,10)
				{
					true branch: BLOCK --domain
					{
						MAKE
						 object: (direct)-> object w  @49440|text_mediator(657,5)
						 type: (direct)-> type $3<'16'>( word<'16'> )  @36368|$appendix(,)
						MAKE
						 literal: (direct)-> literal (anon)  @50400|text_mediator(,) --'b'
						 type: ("expr")-> type expr  @18368|expr(5,6)
						CALL --initial, fundamental
						 lead: (direct)-> object w  @49440|text_mediator(657,5)
						 method: ("begin")-> method begin  @31344|$appendix(,)
						 input: ("io")-> object io  @55520|text_mediator(645,3)
						 input: (direct)-> literal (anon)  @50400|text_mediator(,)
						MAKE
						 object: (direct)-> object (anon)  @31280|text_mediator(658,12)
						 type: ("bool")-> type bool  @19936|bool(5,6)
						CALL --fundamental
						 lead: ("w")-> object w  @49440|text_mediator(657,5)
						 method: ("is_less?")-> method is_less?  @32176|$appendix(,)
						 input: ("xD800")-> object xD800  @01760|text_mediator(462,3)
						 output: (direct)-> object (anon)  @31280|text_mediator(658,12)
						MAKE
						 object: (direct)-> object (anon)  @18480|text_mediator(658,33)
						 type: ("bool")-> type bool  @19936|bool(5,6)
						CALL --fundamental
						 lead: ("xDFFF")-> object xDFFF  @05280|text_mediator(464,3)
						 method: ("is_less?")-> method is_less?  @32176|$appendix(,)
						 input: ("w")-> object w  @49440|text_mediator(657,5)
						 output: (direct)-> object (anon)  @18480|text_mediator(658,33)
						MAKE
						 object: (direct)-> object (anon)  @21360|text_mediator(658,11)
						 type: ("bool")-> type bool  @19936|bool(5,6)
						CALL --fundamental
						 lead: (direct)-> object (anon)  @31280|text_mediator(658,12)
						 method: ("or")-> method or  @41872|bool(37,3)
						 input: (direct)-> object (anon)  @18480|text_mediator(658,33)
						 output: (direct)-> object (anon)  @21360|text_mediator(658,11)
						IF
						 condition: (direct)-> object (anon)  @21360|text_mediator(658,11)
						{
							true branch: CALL --fundamental
							 lead: ("rp")-> object rp  @41120|text_mediator(645,3)
							 method: ("add")-> method add  @54480|int(76,3)
							 input: ("two")-> object two  @38960|conventional(38,2)
							false branch: CALL --fundamental
							 lead: ("rp")-> object rp  @41120|text_mediator(645,3)
							 method: ("add")-> method add  @54480|int(76,3)
							 input: ("four")-> object four  @41520|conventional(42,2)
						}
					}
					false branch: BLOCK --domain
					{
						MAKE
						 object: (direct)-> object (anon)  @58080|text_mediator(663,15)
						 type: ("bool")-> type bool  @19936|bool(5,6)
						CALL --fundamental
						 lead: ("io.codepoint_unit")-> object codepoint_unit  @07520|text_mediator(711,3)
						 method: ("is_equal?")-> method is_equal?  @34336|int(64,3)
						 input: ("one")-> object one  @38640|conventional(36,2)
						 output: (direct)-> object (anon)  @58080|text_mediator(663,15)
						IF
						 condition: (direct)-> object (anon)  @58080|text_mediator(663,15)
						{
							true branch: BLOCK --domain
							{
								MAKE
								 object: (direct)-> object w  @43680|text_mediator(665,5)
								 type: (direct)-> type $3<'8'>( word<'8'> )  @37136|$appendix(,)
								MAKE
								 literal: (direct)-> literal (anon)  @49760|text_mediator(,) --'b'
								 type: ("expr")-> type expr  @18368|expr(5,6)
								CALL --initial, fundamental
								 lead: (direct)-> object w  @43680|text_mediator(665,5)
								 method: ("begin")-> method begin  @20160|$appendix(,)
								 input: ("io")-> object io  @55520|text_mediator(645,3)
								 input: (direct)-> literal (anon)  @49760|text_mediator(,)
								MAKE
								 object: (direct)-> object (anon)  @20080|text_mediator(666,11)
								 type: ("bool")-> type bool  @19936|bool(5,6)
								CALL --fundamental
								 lead: ("w")-> object w  @43680|text_mediator(665,5)
								 method: ("is_less?")-> method is_less?  @21824|$appendix(,)
								 input: ("x80")-> object x80  @03680|text_mediator(466,3)
								 output: (direct)-> object (anon)  @20080|text_mediator(666,11)
								IF
								 condition: (direct)-> object (anon)  @20080|text_mediator(666,11)
								{
									true branch: CALL --fundamental
									 lead: ("rp")-> object rp  @41120|text_mediator(645,3)
									 method: ("inc")-> method inc  @44080|int(116,3)
									false branch: BLOCK --domain
									{
										MAKE
										 object: (direct)-> object (anon)  @16560|text_mediator(668,26)
										 type: (direct)-> type $3<'8'>( word<'8'> )  @37136|$appendix(,)
										CALL --fundamental
										 lead: ("w")-> object w  @43680|text_mediator(665,5)
										 method: ("and")-> method and  @17664|$appendix(,)
										 input: ("x20")-> object x20  @05600|text_mediator(467,3)
										 output: (direct)-> object (anon)  @16560|text_mediator(668,26)
										MAKE
										 object: (direct)-> object (anon)  @27120|text_mediator(668,16)
										 type: ("bool")-> type bool  @19936|bool(5,6)
										CALL --fundamental
										 lead: (direct)-> object (anon)  @16560|text_mediator(668,26)
										 method: ("is_zero?")-> method is_zero?  @22240|$appendix(,)
										 output: (direct)-> object (anon)  @27120|text_mediator(668,16)
										IF
										 condition: (direct)-> object (anon)  @27120|text_mediator(668,16)
										{
											true branch: CALL --fundamental
											 lead: ("rp")-> object rp  @41120|text_mediator(645,3)
											 method: ("add")-> method add  @54480|int(76,3)
											 input: ("two")-> object two  @38960|conventional(38,2)
											false branch: BLOCK --domain
											{
												MAKE
												 object: (direct)-> object (anon)  @33520|text_mediator(670,26)
												 type: (direct)-> type $3<'8'>( word<'8'> )  @37136|$appendix(,)
												CALL --fundamental
												 lead: ("w")-> object w  @43680|text_mediator(665,5)
												 method: ("and")-> method and  @17664|$appendix(,)
												 input: ("x10")-> object x10  @06880|text_mediator(468,3)
												 output: (direct)-> object (anon)  @33520|text_mediator(670,26)
												MAKE
												 object: (direct)-> object (anon)  @29040|text_mediator(670,16)
												 type: ("bool")-> type bool  @19936|bool(5,6)
												CALL --fundamental
												 lead: (direct)-> object (anon)  @33520|text_mediator(670,26)
												 method: ("is_zero?")-> method is_zero?  @22240|$appendix(,)
												 output: (direct)-> object (anon)  @29040|text_mediator(670,16)
												IF
												 condition: (direct)-> object (anon)  @29040|text_mediator(670,16)
												{
													true branch: CALL --fundamental
													 lead: ("rp")-> object rp  @41120|text_mediator(645,3)
													 method: ("add")-> method add  @54480|int(76,3)
													 input: ("three")-> object three  @40560|conventional(40,2)
													false branch: CALL --fundamental
													 lead: ("rp")-> object rp  @41120|text_mediator(645,3)
													 method: ("add")-> method add  @54480|int(76,3)
													 input: ("four")-> object four  @41520|conventional(42,2)
												}
											}
										}
									}
								}
							}
							false branch: BLOCK --domain
							{
								CALL --fundamental
								 lead: ("rp")-> object rp  @41120|text_mediator(645,3)
								 method: ("add")-> method add  @54480|int(76,3)
								 input: ("four")-> object four  @41520|conventional(42,2)
							}
						}
					}
				}
			}
		}

		method read  @57600|text_mediator(284,3) --external
		 viable = yes
		{

			given
			{
				object c  @36896|text_mediator(284,3) --internal
				 type: ("unicode")-> type unicode  @05408|unicode(4,6)

				object io  @30496|text_mediator(284,3) --internal
				 type: (direct)-> type text_mediator  @35680|text_mediator(40,6)
			}

			BLOCK --domain
			{
				CALL
				 lead: ("io")-> object io  @30496|text_mediator(284,3)
				 method: (direct)-> method $35<13>( read_one<unicode> )  @24880|$appendix(,)
				 output: ("c")-> object c  @36896|text_mediator(284,3)
			}
		}

		method read  @56352|text_mediator(289,3) --external
		 viable = yes
		{

			given
			{
				object c  @29216|text_mediator(289,3) --internal
				 type: ("ascii")-> type ascii  @19552|ascii(5,6)

				object io  @38496|text_mediator(289,3) --internal
				 type: (direct)-> type text_mediator  @35680|text_mediator(40,6)
			}

			BLOCK --domain
			{
				CALL
				 lead: ("io")-> object io  @38496|text_mediator(289,3)
				 method: (direct)-> method $35<4>( read_one<ascii> )  @35280|$appendix(,)
				 output: ("c")-> object c  @29216|text_mediator(289,3)
			}
		}

		method read  @60928|text_mediator(294,3) --external
		 viable = yes
		{

			given
			{
				object arr  @35296|text_mediator(294,3) --internal
				 type: (direct)-> type $12<13>( array<unicode> )  @34832|$appendix(,)

				object delim  @39456|text_mediator(294,3) --internal
				 type: ("unicode")-> type unicode  @05408|unicode(4,6)

				object io  @37856|text_mediator(294,3) --internal
				 type: (direct)-> type text_mediator  @35680|text_mediator(40,6)
			}

			BLOCK --domain
			{
				CALL
				 lead: ("io")-> object io  @37856|text_mediator(294,3)
				 method: (direct)-> method $36<13>( read_sequence<unicode> )  @35696|$appendix(,)
				 input: ("delim")-> object delim  @39456|text_mediator(294,3)
				 output: ("arr")-> object arr  @35296|text_mediator(294,3)
			}
		}

		method read  @56768|text_mediator(299,3) --external
		 viable = yes
		{

			given
			{
				object arr  @40096|text_mediator(299,3) --internal
				 type: (direct)-> type $12<4>( array<ascii> )  @39056|$appendix(,)

				object delim  @34976|text_mediator(299,3) --internal
				 type: ("ascii")-> type ascii  @19552|ascii(5,6)

				object io  @39776|text_mediator(299,3) --internal
				 type: (direct)-> type text_mediator  @35680|text_mediator(40,6)
			}

			BLOCK --domain
			{
				CALL
				 lead: ("io")-> object io  @39776|text_mediator(299,3)
				 method: (direct)-> method $36<4>( read_sequence<ascii> )  @36112|$appendix(,)
				 input: ("delim")-> object delim  @34976|text_mediator(299,3)
				 output: ("arr")-> object arr  @40096|text_mediator(299,3)
			}
		}

		method read  @61344|text_mediator(304,3) --external
		 viable = yes
		{

			given
			{
				object delim  @28896|text_mediator(304,3) --internal
				 type: ("unicode")-> type unicode  @05408|unicode(4,6)

				object io  @40416|text_mediator(304,3) --internal
				 type: (direct)-> type text_mediator  @35680|text_mediator(40,6)

				object string  @32736|text_mediator(304,3) --internal
				 type: ("string")-> type string  @11552|string(4,6)
			}

			BLOCK --domain
			{
				MAKE
				 object: (direct)-> object arr  @34016|text_mediator(306,31)
				 type: (direct)-> type $12<13>( array<unicode> )  @34832|$appendix(,)
				CALL
				 lead: ("io")-> object io  @40416|text_mediator(304,3)
				 method: (direct)-> method $36<13>( read_sequence<unicode> )  @35696|$appendix(,)
				 input: ("delim")-> object delim  @28896|text_mediator(304,3)
				 output: (direct)-> object arr  @34016|text_mediator(306,31)
				MAKE
				 object: (direct)-> object f  @33696|text_mediator(307,18)
				 type: ("utf")-> enum type utf  @11168|mediator(7,11)
				CALL --fundamental
				 lead: ("io")-> object io  @40416|text_mediator(304,3)
				 method: ("get_utf")-> method get_utf  @12832|mediator(316,3)
				 output: (direct)-> object f  @33696|text_mediator(307,18)
				MAKE
				 object: (direct)-> object e  @29536|text_mediator(307,40)
				 type: ("endian")-> enum type endian  @10752|mediator(5,11)
				CALL --fundamental
				 lead: ("io")-> object io  @40416|text_mediator(304,3)
				 method: ("get_endian")-> method get_endian  @12416|mediator(314,3)
				 output: (direct)-> object e  @29536|text_mediator(307,40)
				CALL --fundamental
				 lead: ("given\string")-> object string  @32736|text_mediator(304,3)
				 method: (direct)-> method $37<5>( begin<int> )  @36528|$appendix(,)
				 input: ("arr")-> object arr  @34016|text_mediator(306,31)
				 input: ("f")-> object f  @33696|text_mediator(307,18)
				 input: ("e")-> object e  @29536|text_mediator(307,40)
			}
		}

		method read  @53440|text_mediator(311,3) --external
		 viable = yes
		{

			given
			{
				object delim  @29856|text_mediator(311,3) --internal
				 type: ("ascii")-> type ascii  @19552|ascii(5,6)

				object expr  @30816|text_mediator(311,3) --internal
				 type: ("expr")-> type expr  @18368|expr(5,6)

				object io  @34336|text_mediator(311,3) --internal
				 type: (direct)-> type text_mediator  @35680|text_mediator(40,6)
			}

			BLOCK --domain
			{
				MAKE
				 object: (direct)-> object arr  @31456|text_mediator(313,31)
				 type: (direct)-> type $12<4>( array<ascii> )  @39056|$appendix(,)
				CALL
				 lead: ("io")-> object io  @34336|text_mediator(311,3)
				 method: (direct)-> method $36<4>( read_sequence<ascii> )  @36112|$appendix(,)
				 input: ("delim")-> object delim  @29856|text_mediator(311,3)
				 output: (direct)-> object arr  @31456|text_mediator(313,31)
				CALL --fundamental
				 lead: ("given\expr")-> object expr  @30816|text_mediator(311,3)
				 method: (direct)-> method $38<5>( begin<int> )  @22800|$appendix(,)
				 input: ("arr")-> object arr  @31456|text_mediator(313,31)
			}
		}

		method read  @55936|text_mediator(317,3) --external
		 viable = yes
		{

			given
			{
				object arr  @32416|text_mediator(317,3) --internal
				 type: (direct)-> type $12<13>( array<unicode> )  @34832|$appendix(,)

				object io  @34656|text_mediator(317,3) --internal
				 type: (direct)-> type text_mediator  @35680|text_mediator(40,6)

				object q  @31776|text_mediator(317,3) --internal
				 type: ("int")-> type int  @21536|int(6,6)
			}

			BLOCK --domain
			{
				CALL
				 lead: ("io")-> object io  @34656|text_mediator(317,3)
				 method: (direct)-> method $39<13>( read_sequence<unicode> )  @39440|$appendix(,)
				 input: ("q")-> object q  @31776|text_mediator(317,3)
				 output: ("arr")-> object arr  @32416|text_mediator(317,3)
			}
		}

		method read  @63840|text_mediator(322,3) --external
		 viable = yes
		{

			given
			{
				object arr  @01120|text_mediator(322,3) --internal
				 type: (direct)-> type $12<4>( array<ascii> )  @39056|$appendix(,)

				object io  @35616|text_mediator(322,3) --internal
				 type: (direct)-> type text_mediator  @35680|text_mediator(40,6)

				object q  @10400|text_mediator(322,3) --internal
				 type: ("int")-> type int  @21536|int(6,6)
			}

			BLOCK --domain
			{
				CALL
				 lead: ("io")-> object io  @35616|text_mediator(322,3)
				 method: (direct)-> method $39<4>( read_sequence<ascii> )  @36944|$appendix(,)
				 input: ("q")-> object q  @10400|text_mediator(322,3)
				 output: ("arr")-> object arr  @01120|text_mediator(322,3)
			}
		}

		method read  @64672|text_mediator(327,3) --external
		 viable = yes
		{

			given
			{
				object io  @16160|text_mediator(327,3) --internal
				 type: (direct)-> type text_mediator  @35680|text_mediator(40,6)

				object q  @15840|text_mediator(327,3) --internal
				 type: ("int")-> type int  @21536|int(6,6)

				object string  @00160|text_mediator(327,3) --internal
				 type: ("string")-> type string  @11552|string(4,6)
			}

			BLOCK --domain
			{
				MAKE
				 object: (direct)-> object arr  @13920|text_mediator(329,27)
				 type: (direct)-> type $12<13>( array<unicode> )  @34832|$appendix(,)
				CALL
				 lead: ("io")-> object io  @16160|text_mediator(327,3)
				 method: (direct)-> method $39<13>( read_sequence<unicode> )  @39440|$appendix(,)
				 input: ("q")-> object q  @15840|text_mediator(327,3)
				 output: (direct)-> object arr  @13920|text_mediator(329,27)
				MAKE
				 object: (direct)-> object f  @03680|text_mediator(330,18)
				 type: ("utf")-> enum type utf  @11168|mediator(7,11)
				CALL --fundamental
				 lead: ("io")-> object io  @16160|text_mediator(327,3)
				 method: ("get_utf")-> method get_utf  @12832|mediator(316,3)
				 output: (direct)-> object f  @03680|text_mediator(330,18)
				MAKE
				 object: (direct)-> object e  @07840|text_mediator(330,40)
				 type: ("endian")-> enum type endian  @10752|mediator(5,11)
				CALL --fundamental
				 lead: ("io")-> object io  @16160|text_mediator(327,3)
				 method: ("get_endian")-> method get_endian  @12416|mediator(314,3)
				 output: (direct)-> object e  @07840|text_mediator(330,40)
				CALL --fundamental
				 lead: ("given\string")-> object string  @00160|text_mediator(327,3)
				 method: (direct)-> method $37<5>( begin<int> )  @36528|$appendix(,)
				 input: ("arr")-> object arr  @13920|text_mediator(329,27)
				 input: ("f")-> object f  @03680|text_mediator(330,18)
				 input: ("e")-> object e  @07840|text_mediator(330,40)
			}
		}

		method read  @61760|text_mediator(334,3) --external
		 viable = yes
		{

			given
			{
				object expr  @05280|text_mediator(334,3) --internal
				 type: ("expr")-> type expr  @18368|expr(5,6)

				object io  @14240|text_mediator(334,3) --internal
				 type: (direct)-> type text_mediator  @35680|text_mediator(40,6)

				object q  @01440|text_mediator(334,3) --internal
				 type: ("int")-> type int  @21536|int(6,6)
			}

			BLOCK --domain
			{
				MAKE
				 object: (direct)-> object arr  @05600|text_mediator(336,27)
				 type: (direct)-> type $12<4>( array<ascii> )  @39056|$appendix(,)
				CALL
				 lead: ("io")-> object io  @14240|text_mediator(334,3)
				 method: (direct)-> method $39<4>( read_sequence<ascii> )  @36944|$appendix(,)
				 input: ("q")-> object q  @01440|text_mediator(334,3)
				 output: (direct)-> object arr  @05600|text_mediator(336,27)
				CALL --fundamental
				 lead: ("given\expr")-> object expr  @05280|text_mediator(334,3)
				 method: (direct)-> method $38<5>( begin<int> )  @22800|$appendix(,)
				 input: ("arr")-> object arr  @05600|text_mediator(336,27)
			}
		}

		method read_one<t>  @64256|text_mediator(485,3) --internal
		 viable = no
		{

			given
			{
				object c  @22560|text_mediator(485,3) --internal
				 type: ("t")-> (unmatched)

				object io  @37280|text_mediator(485,3) --internal
				 type: (direct)-> type text_mediator  @35680|text_mediator(40,6)
			}

			BLOCK* --domain
			{
				MAKE
				 object: (direct)-> object (anon)  @28640|text_mediator(487,13)
				 type: ("int")-> type int  @21536|int(6,6)
				CALL --initial, fundamental
				 lead: (direct)-> object (anon)  @28640|text_mediator(487,13)
				 method: ("begin")-> method begin  @33088|int(59,3)
				 input: ("io")-> object io  @37280|text_mediator(485,3)
				 input: ("io.codepoint_fex")-> object codepoint_fex  @07200|text_mediator(710,3)
				CALL* --provisional
				 lead: ("c")-> object c  @22560|text_mediator(485,3)
				 method: ("begin")-> (unmatched)
				 input: (direct)-> object (anon)  @28640|text_mediator(487,13)
			}
		}

		method read_sequence<t>  @11840|text_mediator(490,3) --internal
		 viable = no
		{

			given
			{
				object arr  @32480|text_mediator(490,3) --internal
				 type: ("array<t>")-> type array<t>  @08352|array(36,6)

				object delim  @23520|text_mediator(490,3) --internal
				 type: ("t")-> (unmatched)

				object io  @23200|text_mediator(490,3) --internal
				 type: (direct)-> type text_mediator  @35680|text_mediator(40,6)
			}

			BLOCK* --domain
			{
				CALL --initial, fundamental
				 lead: ("arr")-> object arr  @32480|text_mediator(490,3)
				 method: ("begin")-> method begin  @54528|array(64,3)
				 input: (pending)->
				MAKE
				 object: (direct)-> object (anon)  @23840|text_mediator(493,10)
				 type: ("bool")-> type bool  @19936|bool(5,6)
				CALL --fundamental
				 lead: ("io")-> object io  @23200|text_mediator(490,3)
				 method: ("rp_end?")-> method rp_end?  @18240|mediator(350,3)
				 output: (direct)-> object (anon)  @23840|text_mediator(493,10)
				IF
				 condition: (direct)-> object (anon)  @23840|text_mediator(493,10)
				{
					true branch: RETURN --to caller
				}
				MAKE
				 object: (direct)-> object dn  @25440|text_mediator(494,4)
				 type: ("int")-> type int  @21536|int(6,6)
				CALL* --provisional
				 lead: ("delim")-> object delim  @23520|text_mediator(490,3)
				 method: ("use_code")-> (unmatched)
				CALL* --provisional --initial, fundamental
				 lead: (direct)-> object dn  @25440|text_mediator(494,4)
				 method: ("begin")-> method begin  @31424|int(52,3); method begin  @31840|int(54,3)
				 input: (direct)-> blank (anon)  @37760|text_mediator(,)
				LOOP* --unconditional
				{
					iteration branch: BLOCK* --domain
					{
						MAKE
						 object: (direct)-> object xn  @29280|text_mediator(497,5)
						 type: ("int")-> type int  @21536|int(6,6)
						CALL --initial, fundamental
						 lead: (direct)-> object xn  @29280|text_mediator(497,5)
						 method: ("begin")-> method begin  @33088|int(59,3)
						 input: ("io")-> object io  @23200|text_mediator(490,3)
						 input: ("io.codepoint_fex")-> object codepoint_fex  @07200|text_mediator(710,3)
						MAKE
						 object: (direct)-> object (anon)  @37600|text_mediator(498,11)
						 type: ("bool")-> type bool  @19936|bool(5,6)
						CALL --fundamental
						 lead: ("xn")-> object xn  @29280|text_mediator(497,5)
						 method: ("is_equal?")-> method is_equal?  @34336|int(64,3)
						 input: ("dn")-> object dn  @25440|text_mediator(494,4)
						 output: (direct)-> object (anon)  @37600|text_mediator(498,11)
						IF
						 condition: (direct)-> object (anon)  @37600|text_mediator(498,11)
						{
							true branch: RETURN --to caller
						}
						CALL* --provisional --fundamental
						 lead: ("arr")-> object arr  @32480|text_mediator(490,3)
						 method: ("insert")-> method insert  @57024|array(70,3)
						 input: (pending)->
						CALL* --provisional
						 lead: (direct)-> blank (anon)  @39664|text_mediator(,)
						 method: ("begin")-> (unmatched)
						 input: ("xn")-> object xn  @29280|text_mediator(497,5)
						MAKE
						 object: (direct)-> object (anon)  @29600|text_mediator(500,11)
						 type: ("bool")-> type bool  @19936|bool(5,6)
						CALL --fundamental
						 lead: ("io")-> object io  @23200|text_mediator(490,3)
						 method: ("rp_end?")-> method rp_end?  @18240|mediator(350,3)
						 output: (direct)-> object (anon)  @29600|text_mediator(500,11)
						IF
						 condition: (direct)-> object (anon)  @29600|text_mediator(500,11)
						{
							true branch: RETURN --to caller
						}
					}
				}
			}
		}

		method read_sequence<t>  @01024|text_mediator(504,3) --internal
		 viable = no
		{

			given
			{
				object arr  @33440|text_mediator(504,3) --internal
				 type: ("array<t>")-> type array<t>  @08352|array(36,6)

				object io  @24160|text_mediator(504,3) --internal
				 type: (direct)-> type text_mediator  @35680|text_mediator(40,6)

				object q  @29920|text_mediator(504,3) --internal
				 type: ("int")-> type int  @21536|int(6,6)
			}

			BLOCK* --domain
			{
				CALL --initial, fundamental
				 lead: ("arr")-> object arr  @33440|text_mediator(504,3)
				 method: ("begin")-> method begin  @54528|array(64,3)
				 input: (pending)->
				MAKE
				 object: (direct)-> object (anon)  @30240|text_mediator(507,10)
				 type: ("bool")-> type bool  @19936|bool(5,6)
				CALL --fundamental
				 lead: ("io")-> object io  @24160|text_mediator(504,3)
				 method: ("rp_end?")-> method rp_end?  @18240|mediator(350,3)
				 output: (direct)-> object (anon)  @30240|text_mediator(507,10)
				IF
				 condition: (direct)-> object (anon)  @30240|text_mediator(507,10)
				{
					true branch: RETURN --to caller
				}
				MAKE
				 proxy: (direct)-> proxy ~q  @15024|text_mediator(508,4)
				 type: ("int")-> type int  @21536|int(6,6)
				 permission: [eval]
				CALL
				 subroutine: (direct)-> subroutine $22<5>( fix<int> )  @58288|$appendix(,)
				 input: ("q")-> object q  @29920|text_mediator(504,3)
				 input: ("int_max")-> object int_max  @38320|conventional(32,2)
				 result: (direct)-> proxy ~q  @15024|text_mediator(508,4)
				MAKE
				 object: (direct)-> object n  @30560|text_mediator(509,4)
				 type: ("int")-> type int  @21536|int(6,6)
				CALL --initial, fundamental
				 lead: (direct)-> object n  @30560|text_mediator(509,4)
				 method: ("begin")-> method begin  @31424|int(52,3)
				 input: (pending)->
				LOOP*
				 condition: (direct)-> object (anon)  @46640|text_mediator(510,12)
				{
					condition branch: BLOCK --???
					{
						MAKE
						 object: (direct)-> object (anon)  @46640|text_mediator(510,12)
						 type: ("bool")-> type bool  @19936|bool(5,6)
						CALL --fundamental
						 lead: ("n")-> object n  @30560|text_mediator(509,4)
						 method: ("is_less?")-> method is_less?  @35168|int(68,3)
						 input: ("~q")-> proxy ~q  @15024|text_mediator(508,4)
						 output: (direct)-> object (anon)  @46640|text_mediator(510,12)
					}
					iteration branch: BLOCK* --domain
					{
						MAKE
						 object: (direct)-> object xn  @33760|text_mediator(512,5)
						 type: ("int")-> type int  @21536|int(6,6)
						CALL --initial, fundamental
						 lead: (direct)-> object xn  @33760|text_mediator(512,5)
						 method: ("begin")-> method begin  @33088|int(59,3)
						 input: ("io")-> object io  @24160|text_mediator(504,3)
						 input: ("io.codepoint_fex")-> object codepoint_fex  @07200|text_mediator(710,3)
						CALL* --provisional --fundamental
						 lead: ("arr")-> object arr  @33440|text_mediator(504,3)
						 method: ("insert")-> method insert  @57024|array(70,3)
						 input: (pending)->
						CALL* --provisional
						 lead: (direct)-> blank (anon)  @39936|text_mediator(,)
						 method: ("begin")-> (unmatched)
						 input: ("xn")-> object xn  @33760|text_mediator(512,5)
						MAKE
						 object: (direct)-> object (anon)  @20960|text_mediator(514,11)
						 type: ("bool")-> type bool  @19936|bool(5,6)
						CALL --fundamental
						 lead: ("io")-> object io  @24160|text_mediator(504,3)
						 method: ("rp_end?")-> method rp_end?  @18240|mediator(350,3)
						 output: (direct)-> object (anon)  @20960|text_mediator(514,11)
						IF
						 condition: (direct)-> object (anon)  @20960|text_mediator(514,11)
						{
							true branch: RETURN --to caller
						}
						CALL --fundamental
						 lead: ("n")-> object n  @30560|text_mediator(509,4)
						 method: ("inc")-> method inc  @44080|int(116,3)
					}
				}
			}
		}

		method replace  @59264|text_mediator(446,3) --external
		 viable = no

		method replace  @59680|text_mediator(448,3) --external
		 viable = no

		method reserve  @46784|text_mediator(135,3) --external
		 viable = yes
		{

			given
			{
				object io  @11936|text_mediator(135,3) --internal
				 type: (direct)-> type text_mediator  @35680|text_mediator(40,6)
			}

			BLOCK --domain
			{
				MAKE
				 object: (direct)-> object size  @18976|text_mediator(143,19)
				 type: ("int")-> type int  @21536|int(6,6)
				CALL --fundamental
				 lead: ("io")-> object io  @11936|text_mediator(135,3)
				 method: ("get_size")-> method get_size  @14912|mediator(333,3)
				 output: (direct)-> object size  @18976|text_mediator(143,19)
				MAKE
				 object: (direct)-> object (anon)  @22816|text_mediator(143,41)
				 type: ("int")-> type int  @21536|int(6,6)
				CALL --fundamental
				 lead: ("size")-> object size  @18976|text_mediator(143,19)
				 method: ("add")-> method add  @48656|int(77,3)
				 input: ("io.codepoint_unit")-> object codepoint_unit  @07520|text_mediator(711,3)
				 output: (direct)-> object (anon)  @22816|text_mediator(143,41)
				CALL --fundamental
				 lead: ("io")-> object io  @11936|text_mediator(135,3)
				 method: ("set_size")-> method set_size  @13664|mediator(327,3)
				 input: (direct)-> object (anon)  @22816|text_mediator(143,41)
			}
		}

		method reserve  @47200|text_mediator(146,3) --external
		 viable = yes
		{

			given
			{
				object io  @17056|text_mediator(146,3) --internal
				 type: (direct)-> type text_mediator  @35680|text_mediator(40,6)

				object ok  @18656|text_mediator(146,3) --internal
				 type: ("bool")-> type bool  @19936|bool(5,6)
			}

			BLOCK --domain
			{
				MAKE
				 object: (direct)-> object size  @11296|text_mediator(160,19)
				 type: ("int")-> type int  @21536|int(6,6)
				CALL --fundamental
				 lead: ("io")-> object io  @17056|text_mediator(146,3)
				 method: ("get_size")-> method get_size  @14912|mediator(333,3)
				 output: (direct)-> object size  @11296|text_mediator(160,19)
				MAKE
				 object: (direct)-> object (anon)  @15456|text_mediator(160,39)
				 type: ("int")-> type int  @21536|int(6,6)
				CALL --fundamental
				 lead: ("size")-> object size  @11296|text_mediator(160,19)
				 method: ("sub")-> method sub  @46992|int(80,3)
				 input: ("io.codepoint_unit")-> object codepoint_unit  @07520|text_mediator(711,3)
				 output: (direct)-> object (anon)  @15456|text_mediator(160,39)
				CALL --fundamental
				 lead: ("io")-> object io  @17056|text_mediator(146,3)
				 method: ("set_rp")-> method set_rp  @15328|mediator(336,3)
				 input: (direct)-> object (anon)  @15456|text_mediator(160,39)
				MAKE
				 object: (direct)-> object new_size  @18016|text_mediator(161,26)
				 type: ("int")-> type int  @21536|int(6,6)
				CALL
				 lead: ("io")-> object io  @17056|text_mediator(146,3)
				 method: ("predict_next_rp")-> method predict_next_rp  @04352|text_mediator(645,3)
				 output: (direct)-> object new_size  @18016|text_mediator(161,26)
				CALL --fundamental
				 lead: ("io")-> object io  @17056|text_mediator(146,3)
				 method: ("set_rp")-> method set_rp  @15328|mediator(336,3)
				 input: ("size")-> object size  @11296|text_mediator(160,19)
				MAKE
				 object: (direct)-> object (anon)  @10656|text_mediator(163,15)
				 type: ("bool")-> type bool  @19936|bool(5,6)
				CALL --fundamental
				 lead: ("size")-> object size  @11296|text_mediator(160,19)
				 method: ("is_less?")-> method is_less?  @35168|int(68,3)
				 input: ("new_size")-> object new_size  @18016|text_mediator(161,26)
				 output: (direct)-> object (anon)  @10656|text_mediator(163,15)
				CALL --initial, fundamental
				 lead: ("ok")-> object ok  @18656|text_mediator(146,3)
				 method: ("begin")-> method begin  @42288|bool(26,3)
				 input: (direct)-> object (anon)  @10656|text_mediator(163,15)
				IF
				 condition: ("ok")-> object ok  @18656|text_mediator(146,3)
				{
					true branch: CALL --fundamental
					 lead: ("io")-> object io  @17056|text_mediator(146,3)
					 method: ("set_size")-> method set_size  @13664|mediator(327,3)
					 input: ("new_size")-> object new_size  @18016|text_mediator(161,26)
				}
			}
		}

		method seek  @57184|text_mediator(376,3) --external
		 viable = yes
		{

			given
			{
				object c  @11040|text_mediator(376,3) --internal
				 type: ("unicode")-> type unicode  @05408|unicode(4,6)

				object io  @14880|text_mediator(376,3) --internal
				 type: (direct)-> type text_mediator  @35680|text_mediator(40,6)

				object ok  @13280|text_mediator(376,3) --internal
				 type: ("bool")-> type bool  @19936|bool(5,6)
			}

			BLOCK --domain
			{
				MAKE
				 proxy: (direct)-> proxy (anon)  @00496|text_mediator(378,18)
				 type: ("int")-> type int  @21536|int(6,6)
				 permission: [eval]
				CALL --fundamental
				 lead: ("c")-> object c  @11040|text_mediator(376,3)
				 method: ("use_code")-> method use_code  @34288|enumerated(31,3)
				 result: (direct)-> proxy (anon)  @00496|text_mediator(378,18)
				CALL
				 lead: ("io")-> object io  @14880|text_mediator(376,3)
				 method: ("seek_chr")-> method seek_chr  @16000|text_mediator(521,3)
				 input: (direct)-> proxy (anon)  @00496|text_mediator(378,18)
				 input: (pending)->
				 output: ("ok")-> object ok  @13280|text_mediator(376,3)
			}
		}

		method seek  @54688|text_mediator(381,3) --external
		 viable = yes
		{

			given
			{
				object c  @08800|text_mediator(381,3) --internal
				 type: ("ascii")-> type ascii  @19552|ascii(5,6)

				object io  @07520|text_mediator(381,3) --internal
				 type: (direct)-> type text_mediator  @35680|text_mediator(40,6)

				object ok  @15200|text_mediator(381,3) --internal
				 type: ("bool")-> type bool  @19936|bool(5,6)
			}

			BLOCK --domain
			{
				MAKE
				 proxy: (direct)-> proxy (anon)  @04144|text_mediator(383,18)
				 type: ("int")-> type int  @21536|int(6,6)
				 permission: [eval]
				CALL --fundamental
				 lead: ("c")-> object c  @08800|text_mediator(381,3)
				 method: ("use_code")-> method use_code  @34288|enumerated(31,3)
				 result: (direct)-> proxy (anon)  @04144|text_mediator(383,18)
				CALL
				 lead: ("io")-> object io  @07520|text_mediator(381,3)
				 method: ("seek_chr")-> method seek_chr  @16000|text_mediator(521,3)
				 input: (direct)-> proxy (anon)  @04144|text_mediator(383,18)
				 input: (pending)->
				 output: ("ok")-> object ok  @15200|text_mediator(381,3)
			}
		}

		method seek  @65088|text_mediator(386,3) --external
		 viable = yes
		{

			given
			{
				object d  @11360|text_mediator(386,3) --internal
				 type: ("sign")-> enum type sign  @25328|conventional(103,11)

				object io  @16480|text_mediator(386,3) --internal
				 type: (direct)-> type text_mediator  @35680|text_mediator(40,6)

				object match_mode  @09440|text_mediator(386,3) --internal
				 type: ("match_mode")-> enum type match_mode  @45952|text_mediator(5,11)

				object pattern  @03040|text_mediator(386,3) --internal
				 type: ("expr")-> type expr  @18368|expr(5,6)

				object q  @17120|text_mediator(386,3) --internal
				 type: ("int")-> type int  @21536|int(6,6)
			}

			BLOCK --domain
			{
				MAKE
				 object: (direct)-> object ptm  @11680|text_mediator(388,32)
				 type: ("text_mediator")-> type text_mediator  @35680|text_mediator(40,6)
				CALL
				 lead: ("io")-> object io  @16480|text_mediator(386,3)
				 method: (direct)-> method $40<2>( copy_pattern<expr> )  @37776|$appendix(,)
				 input: ("pattern")-> object pattern  @03040|text_mediator(386,3)
				 output: (direct)-> object ptm  @11680|text_mediator(388,32)
				CALL
				 lead: ("io")-> object io  @16480|text_mediator(386,3)
				 method: ("seek")-> method seek  @63008|text_mediator(398,3)
				 input: ("ptm")-> object ptm  @11680|text_mediator(388,32)
				 input: ("d")-> object d  @11360|text_mediator(386,3)
				 input: ("given\match_mode")-> object match_mode  @09440|text_mediator(386,3)
				 output: ("q")-> object q  @17120|text_mediator(386,3)
			}
		}

		method seek  @55104|text_mediator(392,3) --external
		 viable = yes
		{

			given
			{
				object d  @17440|text_mediator(392,3) --internal
				 type: ("sign")-> enum type sign  @25328|conventional(103,11)

				object io  @00480|text_mediator(392,3) --internal
				 type: (direct)-> type text_mediator  @35680|text_mediator(40,6)

				object match_mode  @10080|text_mediator(392,3) --internal
				 type: ("match_mode")-> enum type match_mode  @45952|text_mediator(5,11)

				object pattern  @09760|text_mediator(392,3) --internal
				 type: ("string")-> type string  @11552|string(4,6)

				object q  @17760|text_mediator(392,3) --internal
				 type: ("int")-> type int  @21536|int(6,6)
			}

			BLOCK --domain
			{
				MAKE
				 object: (direct)-> object ptm  @12000|text_mediator(394,32)
				 type: ("text_mediator")-> type text_mediator  @35680|text_mediator(40,6)
				CALL
				 lead: ("io")-> object io  @00480|text_mediator(392,3)
				 method: (direct)-> method $40<23>( copy_pattern<string> )  @23216|$appendix(,)
				 input: ("pattern")-> object pattern  @09760|text_mediator(392,3)
				 output: (direct)-> object ptm  @12000|text_mediator(394,32)
				CALL
				 lead: ("io")-> object io  @00480|text_mediator(392,3)
				 method: ("seek")-> method seek  @63008|text_mediator(398,3)
				 input: ("ptm")-> object ptm  @12000|text_mediator(394,32)
				 input: ("d")-> object d  @17440|text_mediator(392,3)
				 input: ("given\match_mode")-> object match_mode  @10080|text_mediator(392,3)
				 output: ("q")-> object q  @17760|text_mediator(392,3)
			}
		}

		method seek  @63008|text_mediator(398,3) --external
		 viable = yes
		{

			common
			{
				enumerator $index  @60256|text_mediator(,) --internal
				 type: (direct)-> type $1<41>( <match_mode>enumerator )  @18464|$appendix(,)

				subroutine $start1  @63488|text_mediator(,) --internal
				 viable = yes
				{

					given
					{
					}

					BLOCK --domain
					{
						MAKE
						 enumerator: (direct)-> enumerator $index  @60256|text_mediator(,)
						 type: (direct)-> type $1<41>( <match_mode>enumerator )  @18464|$appendix(,)
					}
				}
			}


			given
			{
				object d  @13600|text_mediator(398,3) --internal
				 type: ("sign")-> enum type sign  @25328|conventional(103,11)

				object io  @12320|text_mediator(398,3) --internal
				 type: (direct)-> type text_mediator  @35680|text_mediator(40,6)

				object match_mode  @19360|text_mediator(398,3) --internal
				 type: ("match_mode")-> enum type match_mode  @45952|text_mediator(5,11)

				object ptm  @18080|text_mediator(398,3) --internal
				 type: ("text_mediator")-> type text_mediator  @35680|text_mediator(40,6)

				object q  @18400|text_mediator(398,3) --internal
				 type: ("int")-> type int  @21536|int(6,6)
			}

			BLOCK --domain
			{
				MAKE
				 literal: (direct)-> literal (anon)  @18720|text_mediator(,) --'exact'
				 type: ("expr")-> type expr  @18368|expr(5,6)
				MAKE
				 object: (direct)-> object (anon)  @19040|text_mediator(400,38)
				 type: ("match_mode")-> enum type match_mode  @45952|text_mediator(5,11)
				CALL --initial
				 lead: (direct)-> object (anon)  @19040|text_mediator(400,38)
				 method: ("begin")-> method begin  @05600|text_mediator(5,11)
				 input: (direct)-> literal (anon)  @18720|text_mediator(,)
				MAKE
				 proxy: (direct)-> proxy ~mode  @09248|text_mediator(400,4)
				 type: ("match_mode")-> enum type match_mode  @45952|text_mediator(5,11)
				 permission: [eval]
				CALL
				 subroutine: (direct)-> subroutine $22<41>( fix<match_mode> )  @61488|$appendix(,)
				 input: ("given\match_mode")-> object match_mode  @19360|text_mediator(398,3)
				 input: (direct)-> object (anon)  @19040|text_mediator(400,38)
				 result: (direct)-> proxy ~mode  @09248|text_mediator(400,4)
				SELECT
				 selector: ("~mode")-> proxy ~mode  @09248|text_mediator(400,4)
				 enumerator: (direct)-> enumerator $index  @60256|text_mediator(,)
				 'exact' -> branch 0
				 'similar' -> branch 1
				 'regex' -> branch 2
				{

					branch 0: CALL
					 lead: ("io")-> object io  @12320|text_mediator(398,3)
					 method: ("seek")-> method seek  @53856|text_mediator(409,3)
					 input: ("ptm")-> object ptm  @18080|text_mediator(398,3)
					 input: ("d")-> object d  @13600|text_mediator(398,3)
					 output: ("q")-> object q  @18400|text_mediator(398,3)
					 co-routine: ("exact_match?")-> subroutine exact_match?  @38560|text_mediator(9,2)

					branch 1: CALL
					 lead: ("io")-> object io  @12320|text_mediator(398,3)
					 method: ("seek")-> method seek  @53856|text_mediator(409,3)
					 input: ("ptm")-> object ptm  @18080|text_mediator(398,3)
					 input: ("d")-> object d  @13600|text_mediator(398,3)
					 output: ("q")-> object q  @18400|text_mediator(398,3)
					 co-routine: ("similar_match?")-> subroutine similar_match?  @32816|text_mediator(21,2)

					branch 2: CALL
					 lead: ("io")-> object io  @12320|text_mediator(398,3)
					 method: ("seek")-> method seek  @53856|text_mediator(409,3)
					 input: ("ptm")-> object ptm  @18080|text_mediator(398,3)
					 input: ("d")-> object d  @13600|text_mediator(398,3)
					 output: ("q")-> object q  @18400|text_mediator(398,3)
					 co-routine: ("regex_match?")-> subroutine regex_match?  @30016|text_mediator(32,2)
				}
			}
		}

		method seek  @53856|text_mediator(409,3) --external
		 viable = yes
		{

			given
			{
				object d  @03360|text_mediator(409,3) --internal
				 type: ("sign")-> enum type sign  @25328|conventional(103,11)

				subroutine helper  @09968|text_mediator(409,3) --internal
				 viable = yes

				object io  @19680|text_mediator(409,3) --internal
				 type: (direct)-> type text_mediator  @35680|text_mediator(40,6)

				object ptm  @20000|text_mediator(409,3) --internal
				 type: ("text_mediator")-> type text_mediator  @35680|text_mediator(40,6)

				object q  @20320|text_mediator(409,3) --internal
				 type: ("int")-> type int  @21536|int(6,6)
			}

			BLOCK --domain
			{
				MAKE
				 object: (direct)-> object (anon)  @04640|text_mediator(412,15)
				 type: ("bool")-> type bool  @19936|bool(5,6)
				CALL
				 lead: ("io")-> object io  @19680|text_mediator(409,3)
				 method: ("compare")-> method compare  @52608|text_mediator(170,3)
				 input: ("ptm")-> object ptm  @20000|text_mediator(409,3)
				 output: (direct)-> object (anon)  @04640|text_mediator(412,15)
				MAKE
				 object: (direct)-> object (anon)  @25760|text_mediator(412,10)
				 type: ("bool")-> type bool  @19936|bool(5,6)
				CALL --fundamental
				 lead: (direct)-> object (anon)  @04640|text_mediator(412,15)
				 method: ("not")-> method not  @39376|bool(43,3)
				 output: (direct)-> object (anon)  @25760|text_mediator(412,10)
				IF
				 condition: (direct)-> object (anon)  @25760|text_mediator(412,10)
				{
					true branch: RETURN --to isolate (quit)
					 trace: (direct)-> object (anon)  @26400|text_mediator(,)
						trace branch: BLOCK --domain
						{
							MAKE
							 object: (direct)-> object (anon)  @26400|text_mediator(,)
							 type: (direct)-> type $6<26>( alpha\op<fault> )  @40208|$appendix(,)
							MAKE
							 proxy: (direct)-> proxy (anon)  @12896|text_mediator(,)
							 type: ("fault")-> type fault  @24224|fault(49,6)
							 permission: [init]
							CALL --initial, fundamental
							 lead: (direct)-> object (anon)  @26400|text_mediator(,)
							 method: ("begin")-> method begin  @31120|$appendix(,)
							 result: (direct)-> proxy (anon)  @12896|text_mediator(,)
							MAKE
							 literal: (direct)-> literal (anon)  @27040|text_mediator(,) --'bug'
							 type: ("expr")-> type expr  @18368|expr(5,6)
							MAKE
							 literal: (direct)-> literal (anon)  @28960|text_mediator(,) --'incompatible pattern mediator'
							 type: ("expr")-> type expr  @18368|expr(5,6)
							MAKE
							 object: (direct)-> object (anon)  @40560|text_mediator(412,54)
							 type: ("fault_category")-> enum type fault_category  @01568|fault(5,11)
							CALL --initial
							 lead: (direct)-> object (anon)  @40560|text_mediator(412,54)
							 method: ("begin")-> method begin  @34464|fault(5,11)
							 input: (direct)-> literal (anon)  @27040|text_mediator(,)
							CALL --initial, fundamental
							 lead: (direct)-> proxy (anon)  @12896|text_mediator(,)
							 method: ("begin")-> method begin  @01984|fault(97,3)
							 input: (direct)-> object (anon)  @40560|text_mediator(412,54)
							 input: (direct)-> literal (anon)  @28960|text_mediator(,)
						}
				}
				MAKE
				 literal: (direct)-> literal (anon)  @26080|text_mediator(,) --'positive'
				 type: ("expr")-> type expr  @18368|expr(5,6)
				MAKE
				 proxy: (direct)-> proxy ~d  @14720|text_mediator(413,4)
				 type: ("sign")-> enum type sign  @25328|conventional(103,11)
				 permission: [eval]
				CALL
				 subroutine: (direct)-> subroutine $22<42>( fix<sign> )  @63888|$appendix(,)
				 input: ("d")-> object d  @03360|text_mediator(409,3)
				 input: (direct)-> object (anon)  @26720|text_mediator(413,4)
				 result: (direct)-> proxy ~d  @14720|text_mediator(413,4)
				LOOP --unconditional
				{
					iteration branch: BLOCK --domain
					{
						MAKE
						 object: (direct)-> object mark  @27360|text_mediator(417,18)
						 type: ("int")-> type int  @21536|int(6,6)
						CALL --fundamental
						 lead: ("io")-> object io  @19680|text_mediator(409,3)
						 method: ("get_rp")-> method get_rp  @16992|mediator(344,3)
						 output: (direct)-> object mark  @27360|text_mediator(417,18)
						MAKE
						 object: (direct)-> object ok  @20640|text_mediator(419,27)
						 type: ("bool")-> type bool  @19936|bool(5,6)
						CALL --terminal, fundamental
						 lead: ("q")-> object q  @20320|text_mediator(409,3)
						 method: ("recycle")-> method recycle  @42736|object(38,3)
						MAKE
						 object: (direct)-> object rp  @27680|text_mediator(419,47)
						 type: ("int")-> type int  @21536|int(6,6)
						CALL
						 lead: ("io")-> object io  @19680|text_mediator(409,3)
						 method: ("match")-> method match  @10592|text_mediator(557,3)
						 input: ("ptm")-> object ptm  @20000|text_mediator(409,3)
						 input: ("~d")-> proxy ~d  @14720|text_mediator(413,4)
						 output: (direct)-> object ok  @20640|text_mediator(419,27)
						 output: ("q")-> object q  @20320|text_mediator(409,3)
						 output: (direct)-> object rp  @27680|text_mediator(419,47)
						 co-routine: ("helper")-> subroutine helper  @09968|text_mediator(409,3)
						IF
						 condition: ("ok")-> object ok  @20640|text_mediator(419,27)
						{
							true branch: RETURN --to caller
								after branch: CALL --fundamental
								 lead: ("io")-> object io  @19680|text_mediator(409,3)
								 method: ("set_rp")-> method set_rp  @15328|mediator(336,3)
								 input: ("mark")-> object mark  @27360|text_mediator(417,18)
						}
						MAKE
						 object: (direct)-> object (anon)  @28320|text_mediator(423,11)
						 type: ("bool")-> type bool  @19936|bool(5,6)
						CALL --fundamental
						 lead: ("rp")-> object rp  @27680|text_mediator(419,47)
						 method: ("is_null?")-> method is_null?  @41904|object(34,3)
						 output: (direct)-> object (anon)  @28320|text_mediator(423,11)
						IF
						 condition: (direct)-> object (anon)  @28320|text_mediator(423,11)
						{
							true branch: RETURN --to caller
								after branch: BLOCK --domain
								{
									CALL --terminal, fundamental
									 lead: ("q")-> object q  @20320|text_mediator(409,3)
									 method: ("recycle")-> method recycle  @42736|object(38,3)
									CALL --initial, fundamental
									 lead: ("q")-> object q  @20320|text_mediator(409,3)
									 method: ("begin")-> method begin  @31840|int(54,3)
									 input: ("zero")-> object zero  @41840|conventional(34,2)
								}
						}
						CALL --fundamental
						 lead: ("io")-> object io  @19680|text_mediator(409,3)
						 method: ("set_rp")-> method set_rp  @15328|mediator(336,3)
						 input: ("mark")-> object mark  @27360|text_mediator(417,18)
						MAKE
						 literal: (direct)-> literal (anon)  @35360|text_mediator(,) --'positive'
						 type: ("expr")-> type expr  @18368|expr(5,6)
						MAKE
						 object: (direct)-> object (anon)  @47280|text_mediator(428,11)
						 type: (direct)-> enum type sign  @25328|conventional(103,11)
						CALL --initial
						 lead: (direct)-> object (anon)  @47280|text_mediator(428,11)
						 method: ("begin")-> method begin  @02272|conventional(103,11)
						 input: (direct)-> literal (anon)  @35360|text_mediator(,)
						MAKE
						 object: (direct)-> object (anon)  @37680|text_mediator(428,11)
						 type: ("bool")-> type bool  @19936|bool(5,6)
						CALL
						 lead: ("~d")-> proxy ~d  @14720|text_mediator(413,4)
						 method: ("is_equal?")-> method is_equal?  @15168|conventional(103,11)
						 input: (direct)-> object (anon)  @47280|text_mediator(428,11)
						 output: (direct)-> object (anon)  @37680|text_mediator(428,11)
						IF
						 condition: (direct)-> object (anon)  @37680|text_mediator(428,11)
						{
							true branch: CALL
							 lead: ("io")-> object io  @19680|text_mediator(409,3)
							 method: ("inc_rp")-> method inc_rp  @12256|text_mediator(598,3)
							false branch: CALL
							 lead: ("io")-> object io  @19680|text_mediator(409,3)
							 method: ("dec_rp")-> method dec_rp  @16416|text_mediator(604,3)
						}
					}
				}
			}
		}

		method seek_chr  @16000|text_mediator(521,3) --internal
		 viable = yes
		{

			given
			{
				object cn  @30880|text_mediator(521,3) --internal
				 type: ("int")-> type int  @21536|int(6,6)

				object d  @31840|text_mediator(521,3) --internal
				 type: ("sign")-> enum type sign  @25328|conventional(103,11)

				object io  @24480|text_mediator(521,3) --internal
				 type: (direct)-> type text_mediator  @35680|text_mediator(40,6)

				object ok  @37920|text_mediator(521,3) --internal
				 type: ("bool")-> type bool  @19936|bool(5,6)
			}

			BLOCK --domain
			{
				MAKE
				 object: (direct)-> object (anon)  @31200|text_mediator(523,10)
				 type: ("bool")-> type bool  @19936|bool(5,6)
				CALL --fundamental
				 lead: ("io")-> object io  @24480|text_mediator(521,3)
				 method: ("rp_end?")-> method rp_end?  @18240|mediator(350,3)
				 output: (direct)-> object (anon)  @31200|text_mediator(523,10)
				IF
				 condition: (direct)-> object (anon)  @31200|text_mediator(523,10)
				{
					true branch: RETURN --to caller
						after branch: CALL --initial, fundamental
						 lead: ("ok")-> object ok  @37920|text_mediator(521,3)
						 method: ("begin")-> method begin  @42288|bool(26,3)
						 input: ("false")-> object false  @40880|conventional(24,2)
				}
				MAKE
				 literal: (direct)-> literal (anon)  @32800|text_mediator(,) --'positive'
				 type: ("expr")-> type expr  @18368|expr(5,6)
				MAKE
				 object: (direct)-> object (anon)  @32160|text_mediator(524,26)
				 type: ("sign")-> enum type sign  @25328|conventional(103,11)
				CALL --initial
				 lead: (direct)-> object (anon)  @32160|text_mediator(524,26)
				 method: ("begin")-> method begin  @02272|conventional(103,11)
				 input: (direct)-> literal (anon)  @32800|text_mediator(,)
				MAKE
				 proxy: (direct)-> proxy ~d  @10160|text_mediator(524,4)
				 type: ("sign")-> enum type sign  @25328|conventional(103,11)
				 permission: [eval]
				CALL
				 subroutine: (direct)-> subroutine $22<42>( fix<sign> )  @63888|$appendix(,)
				 input: ("d")-> object d  @31840|text_mediator(521,3)
				 input: (direct)-> object (anon)  @32160|text_mediator(524,26)
				 result: (direct)-> proxy ~d  @10160|text_mediator(524,4)
				MAKE
				 literal: (direct)-> literal (anon)  @34080|text_mediator(,) --'positive'
				 type: ("expr")-> type expr  @18368|expr(5,6)
				MAKE
				 object: (direct)-> object (anon)  @37360|text_mediator(525,10)
				 type: (direct)-> enum type sign  @25328|conventional(103,11)
				CALL --initial
				 lead: (direct)-> object (anon)  @37360|text_mediator(525,10)
				 method: ("begin")-> method begin  @02272|conventional(103,11)
				 input: (direct)-> literal (anon)  @34080|text_mediator(,)
				MAKE
				 object: (direct)-> object (anon)  @54320|text_mediator(525,10)
				 type: ("bool")-> type bool  @19936|bool(5,6)
				CALL
				 lead: ("~d")-> proxy ~d  @10160|text_mediator(524,4)
				 method: ("is_equal?")-> method is_equal?  @15168|conventional(103,11)
				 input: (direct)-> object (anon)  @37360|text_mediator(525,10)
				 output: (direct)-> object (anon)  @54320|text_mediator(525,10)
				IF
				 condition: (direct)-> object (anon)  @54320|text_mediator(525,10)
				{
					true branch: BLOCK --domain
					{
						LOOP --unconditional
						{
							iteration branch: BLOCK --domain
							{
								MAKE
								 object: (direct)-> object xn  @24800|text_mediator(529,6)
								 type: ("int")-> type int  @21536|int(6,6)
								CALL --initial, fundamental
								 lead: (direct)-> object xn  @24800|text_mediator(529,6)
								 method: ("begin")-> method begin  @33088|int(59,3)
								 input: ("io")-> object io  @24480|text_mediator(521,3)
								 input: ("io.codepoint_fex")-> object codepoint_fex  @07200|text_mediator(710,3)
								MAKE
								 object: (direct)-> object (anon)  @25120|text_mediator(530,12)
								 type: ("bool")-> type bool  @19936|bool(5,6)
								CALL --fundamental
								 lead: ("xn")-> object xn  @24800|text_mediator(529,6)
								 method: ("is_equal?")-> method is_equal?  @34336|int(64,3)
								 input: ("cn")-> object cn  @30880|text_mediator(521,3)
								 output: (direct)-> object (anon)  @25120|text_mediator(530,12)
								IF
								 condition: (direct)-> object (anon)  @25120|text_mediator(530,12)
								{
									true branch: RETURN --to caller
										after branch: BLOCK --domain
										{
											MAKE
											 literal: (direct)-> literal (anon)  @34400|text_mediator(,) --'true'
											 type: ("expr")-> type expr  @18368|expr(5,6)
											CALL --initial, fundamental
											 lead: ("ok")-> object ok  @37920|text_mediator(521,3)
											 method: ("begin")-> method begin  @43952|bool(24,3)
											 input: (direct)-> literal (anon)  @34400|text_mediator(,)
										}
								}
								MAKE
								 object: (direct)-> object (anon)  @21280|text_mediator(531,12)
								 type: ("bool")-> type bool  @19936|bool(5,6)
								CALL --fundamental
								 lead: ("io")-> object io  @24480|text_mediator(521,3)
								 method: ("rp_end?")-> method rp_end?  @18240|mediator(350,3)
								 output: (direct)-> object (anon)  @21280|text_mediator(531,12)
								IF
								 condition: (direct)-> object (anon)  @21280|text_mediator(531,12)
								{
									true branch: RETURN --to caller
										after branch: BLOCK --domain
										{
											MAKE
											 literal: (direct)-> literal (anon)  @38240|text_mediator(,) --'false'
											 type: ("expr")-> type expr  @18368|expr(5,6)
											CALL --initial, fundamental
											 lead: ("ok")-> object ok  @37920|text_mediator(521,3)
											 method: ("begin")-> method begin  @43952|bool(24,3)
											 input: (direct)-> literal (anon)  @38240|text_mediator(,)
										}
								}
							}
						}
					}
					false branch: BLOCK --domain
					{
						LOOP --unconditional
						{
							iteration branch: BLOCK --domain
							{
								MAKE
								 object: (direct)-> object mark  @38560|text_mediator(538,19)
								 type: ("int")-> type int  @21536|int(6,6)
								CALL --fundamental
								 lead: ("io")-> object io  @24480|text_mediator(521,3)
								 method: ("get_rp")-> method get_rp  @16992|mediator(344,3)
								 output: (direct)-> object mark  @38560|text_mediator(538,19)
								MAKE
								 object: (direct)-> object xn  @21920|text_mediator(539,6)
								 type: ("int")-> type int  @21536|int(6,6)
								CALL --initial, fundamental
								 lead: (direct)-> object xn  @21920|text_mediator(539,6)
								 method: ("begin")-> method begin  @33088|int(59,3)
								 input: ("io")-> object io  @24480|text_mediator(521,3)
								 input: ("io.codepoint_fex")-> object codepoint_fex  @07200|text_mediator(710,3)
								MAKE
								 object: (direct)-> object (anon)  @38880|text_mediator(540,12)
								 type: ("bool")-> type bool  @19936|bool(5,6)
								CALL --fundamental
								 lead: ("xn")-> object xn  @21920|text_mediator(539,6)
								 method: ("is_equal?")-> method is_equal?  @34336|int(64,3)
								 input: ("cn")-> object cn  @30880|text_mediator(521,3)
								 output: (direct)-> object (anon)  @38880|text_mediator(540,12)
								IF
								 condition: (direct)-> object (anon)  @38880|text_mediator(540,12)
								{
									true branch: RETURN --to caller
										after branch: BLOCK --domain
										{
											MAKE
											 literal: (direct)-> literal (anon)  @39200|text_mediator(,) --'true'
											 type: ("expr")-> type expr  @18368|expr(5,6)
											CALL --initial, fundamental
											 lead: ("ok")-> object ok  @37920|text_mediator(521,3)
											 method: ("begin")-> method begin  @43952|bool(24,3)
											 input: (direct)-> literal (anon)  @39200|text_mediator(,)
										}
								}
								MAKE
								 object: (direct)-> object (anon)  @39520|text_mediator(541,12)
								 type: ("bool")-> type bool  @19936|bool(5,6)
								CALL --fundamental
								 lead: ("io")-> object io  @24480|text_mediator(521,3)
								 method: ("rp_end?")-> method rp_end?  @18240|mediator(350,3)
								 output: (direct)-> object (anon)  @39520|text_mediator(541,12)
								IF
								 condition: (direct)-> object (anon)  @39520|text_mediator(541,12)
								{
									true branch: RETURN --to caller
										after branch: BLOCK --domain
										{
											MAKE
											 literal: (direct)-> literal (anon)  @39840|text_mediator(,) --'false'
											 type: ("expr")-> type expr  @18368|expr(5,6)
											CALL --initial, fundamental
											 lead: ("ok")-> object ok  @37920|text_mediator(521,3)
											 method: ("begin")-> method begin  @43952|bool(24,3)
											 input: (direct)-> literal (anon)  @39840|text_mediator(,)
										}
								}
								CALL --fundamental
								 lead: ("io")-> object io  @24480|text_mediator(521,3)
								 method: ("set_rp")-> method set_rp  @15328|mediator(336,3)
								 input: ("mark")-> object mark  @38560|text_mediator(538,19)
								CALL
								 lead: ("io")-> object io  @24480|text_mediator(521,3)
								 method: ("dec_rp")-> method dec_rp  @16416|text_mediator(604,3)
							}
						}
					}
				}
			}
		}

		method skip  @54272|text_mediator(354,3) --external
		 viable = yes
		{

			given
			{
				object io  @16800|text_mediator(354,3) --internal
				 type: (direct)-> type text_mediator  @35680|text_mediator(40,6)

				object n  @00800|text_mediator(354,3) --internal
				 type: ("int")-> type int  @21536|int(6,6)

				object n2  @08480|text_mediator(354,3) --internal
				 type: ("int")-> type int  @21536|int(6,6)
			}

			BLOCK --domain
			{
				CALL --initial, fundamental
				 lead: ("n2")-> object n2  @08480|text_mediator(354,3)
				 method: ("begin")-> method begin  @31424|int(52,3)
				 input: (pending)->
				MAKE
				 object: (direct)-> object (anon)  @04320|text_mediator(357,10)
				 type: ("bool")-> type bool  @19936|bool(5,6)
				CALL --fundamental
				 lead: ("zero")-> object zero  @41840|conventional(34,2)
				 method: ("is_less?")-> method is_less?  @35168|int(68,3)
				 input: ("n")-> object n  @00800|text_mediator(354,3)
				 output: (direct)-> object (anon)  @04320|text_mediator(357,10)
				IF
				 condition: (direct)-> object (anon)  @04320|text_mediator(357,10)
				{
					true branch: BLOCK --domain
					{
						LOOP
						 condition: (direct)-> object (anon)  @06240|text_mediator(359,13)
						{
							condition branch: BLOCK --macro
							{
								MAKE
								 object: (direct)-> object (anon)  @14560|text_mediator(359,15)
								 type: ("bool")-> type bool  @19936|bool(5,6)
								CALL --fundamental
								 lead: ("n2")-> object n2  @08480|text_mediator(354,3)
								 method: ("is_less?")-> method is_less?  @35168|int(68,3)
								 input: ("n")-> object n  @00800|text_mediator(354,3)
								 output: (direct)-> object (anon)  @14560|text_mediator(359,15)
								MAKE
								 object: (direct)-> object (anon)  @02080|text_mediator(359,37)
								 type: ("bool")-> type bool  @19936|bool(5,6)
								CALL --fundamental
								 lead: ("io")-> object io  @16800|text_mediator(354,3)
								 method: ("rp_end?")-> method rp_end?  @18240|mediator(350,3)
								 output: (direct)-> object (anon)  @02080|text_mediator(359,37)
								MAKE
								 object: (direct)-> object (anon)  @05920|text_mediator(359,32)
								 type: ("bool")-> type bool  @19936|bool(5,6)
								CALL --fundamental
								 lead: (direct)-> object (anon)  @02080|text_mediator(359,37)
								 method: ("not")-> method not  @39376|bool(43,3)
								 output: (direct)-> object (anon)  @05920|text_mediator(359,32)
								MAKE
								 object: (direct)-> object (anon)  @06240|text_mediator(359,13)
								 type: ("bool")-> type bool  @19936|bool(5,6)
								CALL --fundamental
								 lead: (direct)-> object (anon)  @14560|text_mediator(359,15)
								 method: ("and")-> method and  @38128|bool(34,3)
								 input: (direct)-> object (anon)  @05920|text_mediator(359,32)
								 output: (direct)-> object (anon)  @06240|text_mediator(359,13)
							}
							iteration branch: BLOCK --domain
							{
								CALL --fundamental
								 lead: ("n2")-> object n2  @08480|text_mediator(354,3)
								 method: ("inc")-> method inc  @44080|int(116,3)
								CALL
								 lead: ("io")-> object io  @16800|text_mediator(354,3)
								 method: ("inc_rp")-> method inc_rp  @12256|text_mediator(598,3)
							}
						}
					}
					false branch: BLOCK --domain
					{
						MAKE
						 object: (direct)-> object (anon)  @15520|text_mediator(365,15)
						 type: ("bool")-> type bool  @19936|bool(5,6)
						CALL --fundamental
						 lead: ("n")-> object n  @00800|text_mediator(354,3)
						 method: ("is_less?")-> method is_less?  @35168|int(68,3)
						 input: ("zero")-> object zero  @41840|conventional(34,2)
						 output: (direct)-> object (anon)  @15520|text_mediator(365,15)
						IF
						 condition: (direct)-> object (anon)  @15520|text_mediator(365,15)
						{
							true branch: BLOCK --domain
							{
								LOOP
								 condition: (direct)-> object (anon)  @06880|text_mediator(367,13)
								{
									condition branch: BLOCK --macro
									{
										MAKE
										 object: (direct)-> object (anon)  @06560|text_mediator(367,15)
										 type: ("bool")-> type bool  @19936|bool(5,6)
										CALL --fundamental
										 lead: ("n")-> object n  @00800|text_mediator(354,3)
										 method: ("is_less?")-> method is_less?  @35168|int(68,3)
										 input: ("n2")-> object n2  @08480|text_mediator(354,3)
										 output: (direct)-> object (anon)  @06560|text_mediator(367,15)
										MAKE
										 object: (direct)-> object (anon)  @02400|text_mediator(367,37)
										 type: ("bool")-> type bool  @19936|bool(5,6)
										CALL --fundamental
										 lead: ("io")-> object io  @16800|text_mediator(354,3)
										 method: ("rp_end?")-> method rp_end?  @18240|mediator(350,3)
										 output: (direct)-> object (anon)  @02400|text_mediator(367,37)
										MAKE
										 object: (direct)-> object (anon)  @12960|text_mediator(367,32)
										 type: ("bool")-> type bool  @19936|bool(5,6)
										CALL --fundamental
										 lead: (direct)-> object (anon)  @02400|text_mediator(367,37)
										 method: ("not")-> method not  @39376|bool(43,3)
										 output: (direct)-> object (anon)  @12960|text_mediator(367,32)
										MAKE
										 object: (direct)-> object (anon)  @06880|text_mediator(367,13)
										 type: ("bool")-> type bool  @19936|bool(5,6)
										CALL --fundamental
										 lead: (direct)-> object (anon)  @06560|text_mediator(367,15)
										 method: ("and")-> method and  @38128|bool(34,3)
										 input: (direct)-> object (anon)  @12960|text_mediator(367,32)
										 output: (direct)-> object (anon)  @06880|text_mediator(367,13)
									}
									iteration branch: BLOCK --domain
									{
										CALL --fundamental
										 lead: ("n2")-> object n2  @08480|text_mediator(354,3)
										 method: ("dec")-> method dec  @44912|int(119,3)
										CALL
										 lead: ("io")-> object io  @16800|text_mediator(354,3)
										 method: ("dec_rp")-> method dec_rp  @16416|text_mediator(604,3)
									}
								}
							}
						}
					}
				}
			}
		}

		method spawn  @51776|text_mediator(187,3) --external
		 viable = yes
		{

			given
			{
				object io  @14176|text_mediator(187,3) --internal
				 type: (direct)-> type text_mediator  @35680|text_mediator(40,6)

				object other  @16096|text_mediator(187,3) --internal
				 type: ("text_mediator")-> type text_mediator  @35680|text_mediator(40,6)
			}

			BLOCK --domain
			{
				MAKE
				 object: (direct)-> object f  @12576|text_mediator(189,18)
				 type: ("utf")-> enum type utf  @11168|mediator(7,11)
				CALL --fundamental
				 lead: ("io")-> object io  @14176|text_mediator(187,3)
				 method: ("get_utf")-> method get_utf  @12832|mediator(316,3)
				 output: (direct)-> object f  @12576|text_mediator(189,18)
				MAKE
				 object: (direct)-> object e  @21216|text_mediator(189,40)
				 type: ("endian")-> enum type endian  @10752|mediator(5,11)
				CALL --fundamental
				 lead: ("io")-> object io  @14176|text_mediator(187,3)
				 method: ("get_endian")-> method get_endian  @12416|mediator(314,3)
				 output: (direct)-> object e  @21216|text_mediator(189,40)
				CALL --initial
				 lead: ("other")-> object other  @16096|text_mediator(187,3)
				 method: ("begin")-> method begin  @50944|text_mediator(103,3)
				 input: ("f")-> object f  @12576|text_mediator(189,18)
				 input: ("e")-> object e  @21216|text_mediator(189,40)
			}
		}

		method trim_zero  @47616|text_mediator(230,3) --external
		 viable = yes
		{

			given
			{
				object io  @08736|text_mediator(230,3) --internal
				 type: (direct)-> type text_mediator  @35680|text_mediator(40,6)
			}

			BLOCK --domain
			{
				CALL --fundamental
				 lead: ("io")-> object io  @08736|text_mediator(230,3)
				 method: ("set_rp")-> method set_rp  @15328|mediator(336,3)
				 input: ("zero")-> object zero  @41840|conventional(34,2)
				MAKE
				 literal: (direct)-> literal (anon)  @25696|text_mediator(,) --'positive'
				 type: ("expr")-> type expr  @18368|expr(5,6)
				MAKE
				 object: (direct)-> object (anon)  @09056|text_mediator(232,21)
				 type: ("sign")-> enum type sign  @25328|conventional(103,11)
				CALL --initial
				 lead: (direct)-> object (anon)  @09056|text_mediator(232,21)
				 method: ("begin")-> method begin  @02272|conventional(103,11)
				 input: (direct)-> literal (anon)  @25696|text_mediator(,)
				MAKE
				 object: (direct)-> object (anon)  @26016|text_mediator(232,21)
				 type: ("bool")-> type bool  @19936|bool(5,6)
				CALL
				 lead: ("io")-> object io  @08736|text_mediator(230,3)
				 method: ("seek_chr")-> method seek_chr  @16000|text_mediator(521,3)
				 input: ("zero")-> object zero  @41840|conventional(34,2)
				 input: (direct)-> object (anon)  @09056|text_mediator(232,21)
				 output: (direct)-> object (anon)  @26016|text_mediator(232,21)
				CALL --fundamental
				 lead: ("io")-> object io  @08736|text_mediator(230,3)
				 method: ("set_size_rp")-> method set_size_rp  @14496|mediator(331,3)
			}
		}

		method write  @48032|text_mediator(238,3) --external
		 viable = yes
		{

			given
			{
				object c  @26336|text_mediator(238,3) --internal
				 type: ("unicode")-> type unicode  @05408|unicode(4,6)

				object io  @09376|text_mediator(238,3) --internal
				 type: (direct)-> type text_mediator  @35680|text_mediator(40,6)
			}

			BLOCK --domain
			{
				CALL
				 lead: ("io")-> object io  @09376|text_mediator(238,3)
				 method: (direct)-> method $43<13>( write_one<unicode> )  @40272|$appendix(,)
				 input: ("c")-> object c  @26336|text_mediator(238,3)
			}
		}

		method write  @49280|text_mediator(243,3) --external
		 viable = yes
		{

			given
			{
				object c  @26976|text_mediator(243,3) --internal
				 type: ("ascii")-> type ascii  @19552|ascii(5,6)

				object io  @26656|text_mediator(243,3) --internal
				 type: (direct)-> type text_mediator  @35680|text_mediator(40,6)
			}

			BLOCK --domain
			{
				CALL
				 lead: ("io")-> object io  @26656|text_mediator(243,3)
				 method: (direct)-> method $43<4>( write_one<ascii> )  @40688|$appendix(,)
				 input: ("c")-> object c  @26976|text_mediator(243,3)
			}
		}

		method write  @49696|text_mediator(258,3) --external
		 viable = yes
		{

			given
			{
				object io  @28576|text_mediator(258,3) --internal
				 type: (direct)-> type text_mediator  @35680|text_mediator(40,6)

				object s  @33056|text_mediator(258,3) --internal
				 type: ("string")-> type string  @11552|string(4,6)
			}

			BLOCK --domain
			{
				MAKE
				 object: (direct)-> object (anon)  @38816|text_mediator(260,37)
				 type: (direct)-> type $12<13>( array<unicode> )  @34832|$appendix(,)
				CALL --fundamental
				 lead: ("s")-> object s  @33056|text_mediator(258,3)
				 method: ("extract")-> method extract  @25264|string(80,3)
				 input: (pending)->
				 input: (pending)->
				 output: (direct)-> object (anon)  @38816|text_mediator(260,37)
				CALL
				 lead: ("io")-> object io  @28576|text_mediator(258,3)
				 method: (direct)-> method $44<13><5>( write_sequence<unicode><int> )  @41104|$appendix(,)
				 input: (direct)-> object (anon)  @38816|text_mediator(260,37)
			}
		}

		method write  @51360|text_mediator(263,3) --external
		 viable = yes
		{

			given
			{
				object e  @35936|text_mediator(263,3) --internal
				 type: ("expr")-> type expr  @18368|expr(5,6)

				object io  @36256|text_mediator(263,3) --internal
				 type: (direct)-> type text_mediator  @35680|text_mediator(40,6)
			}

			BLOCK --domain
			{
				MAKE
				 object: (direct)-> object (anon)  @38176|text_mediator(265,37)
				 type: (direct)-> type $12<4>( array<ascii> )  @39056|$appendix(,)
				CALL --fundamental
				 lead: ("e")-> object e  @35936|text_mediator(263,3)
				 method: ("extract")-> method extract  @63776|expr(104,3)
				 input: (pending)->
				 input: (pending)->
				 output: (direct)-> object (anon)  @38176|text_mediator(265,37)
				CALL
				 lead: ("io")-> object io  @36256|text_mediator(263,3)
				 method: (direct)-> method $44<4><5>( write_sequence<ascii><int> )  @41520|$appendix(,)
				 input: (direct)-> object (anon)  @38176|text_mediator(265,37)
			}
		}

		method write<c>  @48448|text_mediator(248,3) --external
		 viable = no
		{

			given
			{
				object io  @27296|text_mediator(248,3) --internal
				 type: (direct)-> type text_mediator  @35680|text_mediator(40,6)

				object source  @27616|text_mediator(248,3) --internal
				 type: ("serial_access<unicode><c>")-> type serial_access<t><c>  @56368|access(5,6)
			}

			BLOCK* --domain
			{
				CALL* --provisional
				 lead: ("io")-> object io  @27296|text_mediator(248,3)
				 method: ("write_sequence")-> method write_sequence<t><c>  @60512|text_mediator(480,3)
				 input: ("source")-> object source  @27616|text_mediator(248,3)
			}
		}

		method write<c>  @48864|text_mediator(253,3) --external
		 viable = no
		{

			given
			{
				object io  @27936|text_mediator(253,3) --internal
				 type: (direct)-> type text_mediator  @35680|text_mediator(40,6)

				object source  @28256|text_mediator(253,3) --internal
				 type: ("serial_access<ascii><c>")-> type serial_access<t><c>  @56368|access(5,6)
			}

			BLOCK* --domain
			{
				CALL* --provisional
				 lead: ("io")-> object io  @27936|text_mediator(253,3)
				 method: ("write_sequence")-> method write_sequence<t><c>  @60512|text_mediator(480,3)
				 input: ("source")-> object source  @28256|text_mediator(253,3)
			}
		}

		method write_one<t>  @60096|text_mediator(475,3) --internal
		 viable = no
		{

			given
			{
				object c  @22880|text_mediator(475,3) --internal
				 type: ("t")-> (unmatched)

				object io  @36000|text_mediator(475,3) --internal
				 type: (direct)-> type text_mediator  @35680|text_mediator(40,6)
			}

			BLOCK* --domain
			{
				CALL* --provisional
				 lead: ("c")-> object c  @22880|text_mediator(475,3)
				 method: ("use_code")-> (unmatched)
				CALL* --provisional
				 lead: (direct)-> blank (anon)  @33136|text_mediator(,)
				 method: ("store")-> (unmatched)
				 input: ("io")-> object io  @36000|text_mediator(475,3)
				 input: ("io.codepoint_fex")-> object codepoint_fex  @07200|text_mediator(710,3)
			}
		}

		method write_sequence<t><c>  @60512|text_mediator(480,3) --internal
		 viable = no
		{

			given
			{
				object io  @36640|text_mediator(480,3) --internal
				 type: (direct)-> type text_mediator  @35680|text_mediator(40,6)

				object source  @33120|text_mediator(480,3) --internal
				 type: ("serial_access<t><c>")-> type serial_access<t><c>  @56368|access(5,6)
			}

			BLOCK* --domain
			{
				MAKE* --provisional
				 object: (direct)-> object (anon)  @36960|text_mediator(,)
				 type: ("c")-> (unmatched)
				CALL* --provisional --fundamental
				 lead: ("source")-> object source  @33120|text_mediator(480,3)
				 method: ("open_cursor")-> method open_cursor  @26624|access(64,3)
				 output: (direct)-> object (anon)  @36960|text_mediator(,)
				LOOP* --unconditional
				{
					iteration branch: BLOCK* --domain
					{
						CALL* --provisional --fundamental
						 lead: ("source")-> object source  @33120|text_mediator(480,3)
						 method: ("use@")-> method use@  @57264|access(70,3)
						 input: (direct)-> object (anon)  @36960|text_mediator(,)
						MAKE
						 analog: (direct)-> analog (anon)  @26000|text_mediator(,)
						 type: ("analog")-> type analog  @07968|analog(5,6)
						MAKE
						 object: (direct)-> object (anon)  @31520|text_mediator(,)
						 type: ("bool")-> type bool  @19936|bool(5,6)
						CALL --fundamental
						 lead: (direct)-> analog (anon)  @26000|text_mediator(,)
						 method: ("is_void?")-> method is_void?  @55776|analog(23,3)
						 output: (direct)-> object (anon)  @31520|text_mediator(,)
						IF
						 condition: (direct)-> object (anon)  @31520|text_mediator(,)
						{
							true branch: RETURN --to loop (escape)
						}
						CALL* --provisional
						 lead: ("~c")-> blank ~c  @33408|text_mediator(,)
						 method: ("use_code")-> (unmatched)
						CALL* --provisional
						 lead: (direct)-> blank (anon)  @32592|text_mediator(,)
						 method: ("store")-> (unmatched)
						 input: ("io")-> object io  @36640|text_mediator(480,3)
						 input: ("io.codepoint_fex")-> object codepoint_fex  @07200|text_mediator(710,3)
						CALL* --provisional --fundamental
						 lead: ("source")-> object source  @33120|text_mediator(480,3)
						 method: ("move_cursor")-> method move_cursor  @60976|access(66,3)
						 input: (direct)-> object (anon)  @36960|text_mediator(,)
					}
				}
			}
		}

		abstract method ~fread  @58144|text_mediator(454,15) --fraternal
		 key = mediator-0
		 viable = yes

		abstract method ~fwrite  @58640|text_mediator(456,15) --fraternal
		 key = mediator-1
		 viable = yes

		common
		{
			subroutine $start1  @11968|text_mediator(,) --internal
			 viable = yes
			{

				given
				{
				}

				BLOCK --domain
				{
					MAKE
					 object: (direct)-> object xD800  @01760|text_mediator(462,3) --'x:D800'
					 type: (direct)-> type $3<'16'>( word<'16'> )  @36368|$appendix(,)
					MAKE
					 literal: (direct)-> literal (anon)  @34720|text_mediator(,) --'x:D800'
					 type: ("expr")-> type expr  @18368|expr(5,6)
					CALL --initial, fundamental
					 lead: (direct)-> object xD800  @01760|text_mediator(462,3)
					 method: ("begin")-> method begin  @33840|$appendix(,)
					 input: (direct)-> literal (anon)  @34720|text_mediator(,)
					MAKE
					 object: (direct)-> object xDC00  @05920|text_mediator(463,3) --'x:D800'
					 type: (direct)-> type $3<'16'>( word<'16'> )  @36368|$appendix(,)
					MAKE
					 literal: (direct)-> literal (anon)  @36320|text_mediator(,) --'x:D800'
					 type: ("expr")-> type expr  @18368|expr(5,6)
					CALL --initial, fundamental
					 lead: (direct)-> object xDC00  @05920|text_mediator(463,3)
					 method: ("begin")-> method begin  @33840|$appendix(,)
					 input: (direct)-> literal (anon)  @36320|text_mediator(,)
					MAKE
					 object: (direct)-> object xDFFF  @05280|text_mediator(464,3) --'x:DFFF'
					 type: (direct)-> type $3<'16'>( word<'16'> )  @36368|$appendix(,)
					MAKE
					 literal: (direct)-> literal (anon)  @22240|text_mediator(,) --'x:DFFF'
					 type: ("expr")-> type expr  @18368|expr(5,6)
					CALL --initial, fundamental
					 lead: (direct)-> object xDFFF  @05280|text_mediator(464,3)
					 method: ("begin")-> method begin  @33840|$appendix(,)
					 input: (direct)-> literal (anon)  @22240|text_mediator(,)
					MAKE
					 object: (direct)-> object x80  @03680|text_mediator(466,3) --'x:80'
					 type: (direct)-> type $3<'8'>( word<'8'> )  @37136|$appendix(,)
					MAKE
					 literal: (direct)-> literal (anon)  @21600|text_mediator(,) --'x:80'
					 type: ("expr")-> type expr  @18368|expr(5,6)
					CALL --initial, fundamental
					 lead: (direct)-> object x80  @03680|text_mediator(466,3)
					 method: ("begin")-> method begin  @18496|$appendix(,)
					 input: (direct)-> literal (anon)  @21600|text_mediator(,)
					MAKE
					 object: (direct)-> object x20  @05600|text_mediator(467,3) --'x:20'
					 type: (direct)-> type $3<'8'>( word<'8'> )  @37136|$appendix(,)
					MAKE
					 literal: (direct)-> literal (anon)  @28000|text_mediator(,) --'x:20'
					 type: ("expr")-> type expr  @18368|expr(5,6)
					CALL --initial, fundamental
					 lead: (direct)-> object x20  @05600|text_mediator(467,3)
					 method: ("begin")-> method begin  @18496|$appendix(,)
					 input: (direct)-> literal (anon)  @28000|text_mediator(,)
					MAKE
					 object: (direct)-> object x10  @06880|text_mediator(468,3) --'x:10'
					 type: (direct)-> type $3<'8'>( word<'8'> )  @37136|$appendix(,)
					MAKE
					 literal: (direct)-> literal (anon)  @35040|text_mediator(,) --'x:10'
					 type: ("expr")-> type expr  @18368|expr(5,6)
					CALL --initial, fundamental
					 lead: (direct)-> object x10  @06880|text_mediator(468,3)
					 method: ("begin")-> method begin  @18496|$appendix(,)
					 input: (direct)-> literal (anon)  @35040|text_mediator(,)
					MAKE
					 object: (direct)-> object xC0  @00800|text_mediator(469,3) --'x:C0'
					 type: (direct)-> type $3<'8'>( word<'8'> )  @37136|$appendix(,)
					MAKE
					 literal: (direct)-> literal (anon)  @35680|text_mediator(,) --'x:C0'
					 type: ("expr")-> type expr  @18368|expr(5,6)
					CALL --initial, fundamental
					 lead: (direct)-> object xC0  @00800|text_mediator(469,3)
					 method: ("begin")-> method begin  @18496|$appendix(,)
					 input: (direct)-> literal (anon)  @35680|text_mediator(,)
				}
			}

			object x10  @06880|text_mediator(468,3) --internal
			 type: (direct)-> type $3<'8'>( word<'8'> )  @37136|$appendix(,)

			object x20  @05600|text_mediator(467,3) --internal
			 type: (direct)-> type $3<'8'>( word<'8'> )  @37136|$appendix(,)

			object x80  @03680|text_mediator(466,3) --internal
			 type: (direct)-> type $3<'8'>( word<'8'> )  @37136|$appendix(,)

			object xC0  @00800|text_mediator(469,3) --internal
			 type: (direct)-> type $3<'8'>( word<'8'> )  @37136|$appendix(,)

			object xD800  @01760|text_mediator(462,3) --internal
			 type: (direct)-> type $3<'16'>( word<'16'> )  @36368|$appendix(,)

			object xDC00  @05920|text_mediator(463,3) --internal
			 type: (direct)-> type $3<'16'>( word<'16'> )  @36368|$appendix(,)

			object xDFFF  @05280|text_mediator(464,3) --internal
			 type: (direct)-> type $3<'16'>( word<'16'> )  @36368|$appendix(,)
		}


		instance
		{
			object codepoint_fex  @07200|text_mediator(710,3) --internal
			 type: ("expr")-> type expr  @18368|expr(5,6)

			object codepoint_unit  @07520|text_mediator(711,3) --internal
			 type: ("int")-> type int  @21536|int(6,6)
		}

	}
}

