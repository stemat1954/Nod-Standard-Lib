page conventional
{
	operation -_  @58688|conventional(262,2) --external

	operation _*_  @61328|conventional(266,2) --external

	operation _+_  @58928|conventional(264,2) --external

	operation _-_  @59168|conventional(265,2) --external

	operation _/_  @57728|conventional(267,2) --external

	operation _|.|_  @59408|conventional(270,2) --external

	operation _|<=|_  @12144|conventional(245,2) --external

	operation _|<|_  @17920|conventional(238,2) --external

	operation _|=|_  @07472|conventional(223,2) --external

	operation _|>=|_  @02640|conventional(242,2) --external

	operation _|>|_  @07680|conventional(239,2) --external

	operation _|^|_  @57968|conventional(269,2) --external

	operation _|after|_  @44608|conventional(231,2) --external

	operation _|and|_  @61088|conventional(251,2) --external

	operation _|before|_  @55984|conventional(230,2) --external

	operation _|nand|_  @60368|conventional(254,2) --external

	operation _|nor|_  @60608|conventional(255,2) --external

	operation _|not<|_  @40960|conventional(241,2) --external

	operation _|not=|_  @23664|conventional(224,2) --external

	operation _|not>|_  @61504|conventional(244,2) --external

	operation _|or|_  @60128|conventional(252,2) --external

	operation _|par|_  @53200|conventional(232,2) --external

	operation _|xnor|_  @60848|conventional(256,2) --external

	operation _|xor|_  @59888|conventional(253,2) --external

	subroutine alpha_to_cstr  @41760|conventional(160,2) --external
	 viable = yes
	{

		given
		{
			object addr  @25952|conventional(160,2) --internal
			 type: ("addr")-> type addr  @44496|addr(4,6)

			object string  @08992|conventional(160,2) --internal
			 type: ("string")-> type string  @11552|string(4,6)
		}

		BLOCK --domain
		{
			MAKE
			 object: (direct)-> object (anon)  @09312|conventional(162,3)
			 type: ("text_mediator")-> type text_mediator  @35680|text_mediator(40,6)
			CALL --initial
			 lead: (direct)-> object (anon)  @09312|conventional(162,3)
			 method: ("begin")-> method begin  @50944|text_mediator(103,3)
			 input: ("platform_utf")-> object platform_utf  @63200|mediator(13,2)
			 input: ("platform_endian")-> object platform_endian  @62880|mediator(12,2)
			CALL
			 lead: (direct)-> object (anon)  @09312|conventional(162,3)
			 method: ("write")-> method write  @49696|text_mediator(258,3)
			 input: ("given\string")-> object string  @08992|conventional(160,2)
			CALL
			 lead: (direct)-> object (anon)  @09312|conventional(162,3)
			 method: ("add_zero")-> method add_zero  @46368|text_mediator(225,3)
			MAKE
			 object: (direct)-> object (anon)  @26272|conventional(162,88)
			 type: ("int")-> type int  @21536|int(6,6)
			CALL --fundamental
			 lead: (direct)-> object (anon)  @09312|conventional(162,3)
			 method: ("detach")-> method detach  @62144|mediator(319,3)
			 output: ("given\addr")-> object addr  @25952|conventional(160,2)
			 output: (direct)-> object (anon)  @26272|conventional(162,88)
		}
	}

	subroutine choose  @37360|conventional(108,2) --external
	 viable = yes
	{

		given
		{
			object a  @13152|conventional(108,2) --internal
			 type: ("object")-> type object  @11168|object(4,6)

			object a?  @25312|conventional(108,2) --internal
			 type: ("bool")-> type bool  @19936|bool(5,6)

			object b  @17632|conventional(108,2) --internal
			 type: ("object")-> type object  @11168|object(4,6)

			proxy ~o  @45408|conventional(108,2) --internal
			 type: ("object")-> type object  @11168|object(4,6)
		}

		BLOCK --domain
		{
			IF
			 condition: ("a?")-> object a?  @25312|conventional(108,2)
			{
				true branch: JOIN
				 left: ("~o")-> proxy ~o  @45408|conventional(108,2)
				 right: ("a")-> object a  @13152|conventional(108,2)
				false branch: JOIN
				 left: ("~o")-> proxy ~o  @45408|conventional(108,2)
				 right: ("b")-> object b  @17632|conventional(108,2)
			}
		}
	}

	subroutine cstr_to_alpha  @42160|conventional(165,2) --external
	 viable = yes
	{

		given
		{
			object addr  @26592|conventional(165,2) --internal
			 type: ("addr")-> type addr  @44496|addr(4,6)

			object string  @26912|conventional(165,2) --internal
			 type: ("string")-> type string  @11552|string(4,6)
		}

		BLOCK --domain
		{
			CALL --initial, fundamental
			 lead: ("given\string")-> object string  @26912|conventional(165,2)
			 method: ("begin")-> method begin  @15280|string(53,3)
			 input: ("given\addr")-> object addr  @26592|conventional(165,2)
			 input: ("platform_utf")-> object platform_utf  @63200|mediator(13,2)
			 input: ("platform_endian")-> object platform_endian  @62880|mediator(12,2)
			 input: (pending)->
		}
	}

	nom type double<t>  @16912|conventional(89,2) --external
	 viable = no
	 equivalent: ("array<t><'2'>")-> type array<t><#>  @57664|array(117,6)

	subroutine fix<t>  @40560|conventional(133,2) --external
	 viable = no
	{

		given
		{
			object a  @08672|conventional(133,2) --internal
			 type: ("t")-> (unmatched)

			object b  @25632|conventional(133,2) --internal
			 type: ("t")-> (unmatched)

			proxy ~o  @47232|conventional(133,2) --internal
			 type: ("t")-> (unmatched)
		}

		BLOCK* --domain
		{
			CALL* --provisional
			 lead: ("a")-> object a  @08672|conventional(133,2)
			 method: ("is_not_null?")-> (unmatched)
			 input: ("a")-> object a  @08672|conventional(133,2)
			IF* --provisional
			 condition: (direct)-> blank (anon)  @05344|conventional(,)
			{
				true branch: JOIN --provisional
				 left: ("~o")-> proxy ~o  @47232|conventional(133,2)
				 right: ("a")-> object a  @08672|conventional(133,2)
				false branch: JOIN --provisional
				 left: ("~o")-> proxy ~o  @47232|conventional(133,2)
				 right: ("b")-> object b  @25632|conventional(133,2)
			}
		}
	}

	nom type quad<t>  @14608|conventional(91,2) --external
	 viable = no
	 equivalent: ("array<t><'4'>")-> type array<t><#>  @57664|array(117,6)

	enum type sign  @25328|conventional(103,11) --external
	 from ("enumerated")-> type enumerated  @17216|enumerated(4,6)
	 viable = yes
	{
	    'zero' = 0
	    'positive' = 1
	    'negative' = 2
	}
	{
		method begin  @02272|conventional(103,11) --external
		 viable = yes
		{

			given
			{
				object expr  @17952|conventional(103,11) --internal
				 type: ("expr")-> type expr  @18368|expr(5,6)

				object io  @12832|conventional(103,11) --internal
				 type: (direct)-> enum type sign  @25328|conventional(103,11)
			}

			BLOCK --domain
			{
				MAKE
				 object: (direct)-> object (anon)  @19872|conventional(,)
				 type: ("int")-> type int  @21536|int(6,6)
				CALL --fundamental
				 lead: (direct)-> enumerator $index  @52576|conventional(,)
				 method: ("enumerate")-> method enumerate  @16832|$appendix(,)
				 input: (direct)-> object expr  @17952|conventional(103,11)
				 output: (direct)-> object (anon)  @19872|conventional(,)
				MAKE
				 proxy: (direct)-> proxy (anon)  @15936|conventional(,)
				 type: ("enumerated")-> type enumerated  @17216|enumerated(4,6)
				 permission: [init]
				TRANSLATE --base
				 lead: (direct)-> object io  @12832|conventional(103,11)
				 method: (direct)-> method $18<25>( as_base<enumerated> )  @21968|$appendix(,)
				 result: (direct)-> proxy (anon)  @15936|conventional(,)
				CALL --initial, fundamental
				 lead: (direct)-> proxy (anon)  @15936|conventional(,)
				 method: ("begin")-> method begin  @14128|enumerated(29,3)
				 input: (direct)-> object (anon)  @19872|conventional(,)
				CALL --initial, fundamental
				 lead: ("io.expr")-> object expr  @33264|conventional(,)
				 method: ("begin")-> method begin  @65024|expr(88,3)
				 input: (direct)-> object expr  @17952|conventional(103,11)
			}
		}

		method begin  @04768|conventional(103,11) --external
		 viable = yes
		{

			given
			{
				object io  @24032|conventional(103,11) --internal
				 type: (direct)-> enum type sign  @25328|conventional(103,11)

				object sign  @24352|conventional(103,11) --internal
				 type: (direct)-> enum type sign  @25328|conventional(103,11)
			}

			BLOCK --domain
			{
				MAKE
				 proxy: (direct)-> proxy (anon)  @45104|conventional(,)
				 type: ("int")-> type int  @21536|int(6,6)
				 permission: [eval]
				CALL --fundamental
				 lead: (direct)-> object sign  @24352|conventional(103,11)
				 method: ("use_code")-> method use_code  @34288|enumerated(31,3)
				 result: (direct)-> proxy (anon)  @45104|conventional(,)
				MAKE
				 proxy: (direct)-> proxy (anon)  @14720|conventional(,)
				 type: ("enumerated")-> type enumerated  @17216|enumerated(4,6)
				 permission: [init]
				TRANSLATE --base
				 lead: (direct)-> object io  @24032|conventional(103,11)
				 method: (direct)-> method $18<25>( as_base<enumerated> )  @21968|$appendix(,)
				 result: (direct)-> proxy (anon)  @14720|conventional(,)
				CALL --initial, fundamental
				 lead: (direct)-> proxy (anon)  @14720|conventional(,)
				 method: ("begin")-> method begin  @14128|enumerated(29,3)
				 input: (direct)-> proxy (anon)  @45104|conventional(,)
				CALL --initial, fundamental
				 lead: ("io.expr")-> object expr  @33264|conventional(,)
				 method: ("begin")-> method begin  @65024|expr(88,3)
				 input: ("sign.expr")-> object expr  @33264|conventional(,)
			}
		}

		method get_token  @14336|conventional(103,11) --external
		 viable = yes
		{

			given
			{
				object expr  @09952|conventional(103,11) --internal
				 type: ("expr")-> type expr  @18368|expr(5,6)

				object io  @21792|conventional(103,11) --internal
				 type: (direct)-> enum type sign  @25328|conventional(103,11)
			}

			BLOCK --domain
			{
				CALL --initial, fundamental
				 lead: (direct)-> object expr  @09952|conventional(103,11)
				 method: ("begin")-> method begin  @65024|expr(88,3)
				 input: ("io.expr")-> object expr  @33264|conventional(,)
			}
		}

		method is_before?  @03104|conventional(103,11) --external
		 viable = yes
		{

			given
			{
				object bool  @15712|conventional(103,11) --internal
				 type: ("bool")-> type bool  @19936|bool(5,6)

				object io  @24672|conventional(103,11) --internal
				 type: (direct)-> enum type sign  @25328|conventional(103,11)

				object sign  @20192|conventional(103,11) --internal
				 type: (direct)-> enum type sign  @25328|conventional(103,11)
			}

			BLOCK --domain
			{
				MAKE
				 proxy: (direct)-> proxy (anon)  @44192|conventional(,)
				 type: ("int")-> type int  @21536|int(6,6)
				 permission: [eval]
				CALL --fundamental
				 lead: (direct)-> object sign  @20192|conventional(103,11)
				 method: ("use_code")-> method use_code  @34288|enumerated(31,3)
				 result: (direct)-> proxy (anon)  @44192|conventional(,)
				MAKE
				 proxy: (direct)-> proxy (anon)  @42976|conventional(,)
				 type: ("int")-> type int  @21536|int(6,6)
				 permission: [eval]
				CALL --fundamental
				 lead: (direct)-> object io  @24672|conventional(103,11)
				 method: ("use_code")-> method use_code  @34288|enumerated(31,3)
				 result: (direct)-> proxy (anon)  @42976|conventional(,)
				CALL --fundamental
				 lead: (direct)-> proxy (anon)  @42976|conventional(,)
				 method: ("is_before?")-> method is_before?  @34752|int(66,3)
				 input: (direct)-> proxy (anon)  @44192|conventional(,)
				 output: (direct)-> object bool  @15712|conventional(103,11)
			}
		}

		method is_equal?  @15168|conventional(103,11) --external
		 viable = yes
		{

			given
			{
				object bool  @21152|conventional(103,11) --internal
				 type: ("bool")-> type bool  @19936|bool(5,6)

				object io  @16352|conventional(103,11) --internal
				 type: (direct)-> enum type sign  @25328|conventional(103,11)

				object sign  @16992|conventional(103,11) --internal
				 type: (direct)-> enum type sign  @25328|conventional(103,11)
			}

			BLOCK --domain
			{
				MAKE
				 proxy: (direct)-> proxy (anon)  @44800|conventional(,)
				 type: ("int")-> type int  @21536|int(6,6)
				 permission: [eval]
				CALL --fundamental
				 lead: (direct)-> object sign  @16992|conventional(103,11)
				 method: ("use_code")-> method use_code  @34288|enumerated(31,3)
				 result: (direct)-> proxy (anon)  @44800|conventional(,)
				MAKE
				 proxy: (direct)-> proxy (anon)  @47536|conventional(,)
				 type: ("int")-> type int  @21536|int(6,6)
				 permission: [eval]
				CALL --fundamental
				 lead: (direct)-> object io  @16352|conventional(103,11)
				 method: ("use_code")-> method use_code  @34288|enumerated(31,3)
				 result: (direct)-> proxy (anon)  @47536|conventional(,)
				CALL --fundamental
				 lead: (direct)-> proxy (anon)  @47536|conventional(,)
				 method: ("is_equal?")-> method is_equal?  @34336|int(64,3)
				 input: (direct)-> proxy (anon)  @44800|conventional(,)
				 output: (direct)-> object bool  @21152|conventional(103,11)
			}
		}

		method use_token  @10176|conventional(103,11) --external
		 viable = yes
		{

			given
			{
				object io  @17312|conventional(103,11) --internal
				 type: (direct)-> enum type sign  @25328|conventional(103,11)

				proxy ~t  @43280|conventional(103,11) --internal
				 type: ("expr")-> type expr  @18368|expr(5,6)
			}

			BLOCK --domain
			{
				JOIN
				 left: (direct)-> proxy ~t  @43280|conventional(103,11)
				 right: ("io.expr")-> object expr  @33264|conventional(,)
			}
		}

		common
		{
			enumerator $index  @52576|conventional(,) --internal
			 type: (direct)-> type $1<2>( <expr>enumerator )  @34064|$appendix(,)

			subroutine $start1  @08768|conventional(,) --internal
			 viable = yes
			{

				given
				{
				}

				BLOCK --domain
				{
					MAKE
					 enumerator: ("near\$index")-> enumerator $index  @52576|conventional(,)
					 type: (direct)-> type $1<2>( <expr>enumerator )  @34064|$appendix(,)
				}
			}
		}


		instance
		{
			object expr  @33264|conventional(,) --internal
			 type: ("expr")-> type expr  @18368|expr(5,6)
		}

	}

	subroutine std_before<t>  @42960|conventional(184,2) --external
	 viable = no
	{

		given
		{
			object a  @28192|conventional(184,2) --internal
			 type: ("t")-> (unmatched)

			object b  @32352|conventional(184,2) --internal
			 type: ("t")-> (unmatched)

			object yes  @34272|conventional(184,2) --internal
			 type: ("bool")-> type bool  @19936|bool(5,6)
		}

		BLOCK* --domain
		{
			CALL* --provisional
			 lead: ("a")-> object a  @28192|conventional(184,2)
			 method: ("is_before?")-> (unmatched)
			 input: ("b")-> object b  @32352|conventional(184,2)
			 output: ("yes")-> object yes  @34272|conventional(184,2)
		}
	}

	subroutine std_copy<t>  @42560|conventional(174,2) --external
	 viable = no
	{

		given
		{
			object a  @27232|conventional(174,2) --internal
			 type: ("t")-> (unmatched)

			object b  @27552|conventional(174,2) --internal
			 type: ("t")-> (unmatched)
		}

		BLOCK* --domain
		{
			CALL* --provisional
			 lead: ("b")-> object b  @27552|conventional(174,2)
			 method: ("begin")-> (unmatched)
			 input: ("a")-> object a  @27232|conventional(174,2)
		}
	}

	subroutine std_take<t>  @38160|conventional(179,2) --external
	 viable = no
	{

		given
		{
			object a  @28512|conventional(179,2) --internal
			 type: ("t")-> (unmatched)

			object b  @27872|conventional(179,2) --internal
			 type: ("t")-> (unmatched)
		}

		BLOCK* --domain
		{
			CALL* --provisional
			 lead: ("b")-> object b  @27872|conventional(179,2)
			 method: ("begin")-> (unmatched)
			 input: ("a")-> object a  @28512|conventional(179,2)
		}
	}

	nom type triple<t>  @13584|conventional(90,2) --external
	 viable = no
	 equivalent: ("array<t><'3'>")-> type array<t><#>  @57664|array(117,6)

	nom type word1  @17936|conventional(93,2) --external
	 viable = yes
	 equivalent: (direct)-> type $3<'1'>( word<'1'> )  @35600|$appendix(,)

	nom type word16  @18704|conventional(96,2) --external
	 viable = yes
	 equivalent: (direct)-> type $3<'16'>( word<'16'> )  @36368|$appendix(,)

	nom type word32  @18960|conventional(97,2) --external
	 viable = yes
	 equivalent: (direct)-> type $3<'32'>( word<'32'> )  @39824|$appendix(,)

	nom type word4  @13072|conventional(94,2) --external
	 viable = yes
	 equivalent: (direct)-> type $3<'4'>( word<'4'> )  @33680|$appendix(,)

	nom type word64  @14864|conventional(98,2) --external
	 viable = yes
	 equivalent: (direct)-> type $3<'64'>( word<'64'> )  @34448|$appendix(,)

	nom type word8  @13840|conventional(95,2) --external
	 viable = yes
	 equivalent: (direct)-> type $3<'8'>( word<'8'> )  @37136|$appendix(,)

	common
	{
		subroutine $start1  @30416|conventional(,) --internal
		 viable = yes
		{

			given
			{
			}

			BLOCK --domain
			{
				MAKE
				 object: (direct)-> object no_addr  @44080|conventional(14,2)
				 type: ("addr")-> type addr  @44496|addr(4,6)
				CALL --initial, fundamental
				 lead: (direct)-> object no_addr  @44080|conventional(14,2)
				 method: ("begin")-> method begin  @46672|addr(34,3)
				MAKE
				 object: (direct)-> object no_handle  @41200|conventional(16,2)
				 type: ("handle")-> type handle  @23456|handle(5,6)
				CALL --initial, fundamental
				 lead: (direct)-> object no_handle  @41200|conventional(16,2)
				 method: ("begin")-> method begin  @28928|handle(23,3)
			}
		}

		subroutine $start1  @36416|conventional(,) --internal
		 viable = yes
		{

			given
			{
			}

			BLOCK --domain
			{
				MAKE
				 object: (direct)-> object true  @44400|conventional(22,2) --'true'
				 type: ("bool")-> type bool  @19936|bool(5,6)
				MAKE
				 literal: (direct)-> literal (anon)  @22112|conventional(,) --'true'
				 type: ("expr")-> type expr  @18368|expr(5,6)
				CALL --initial, fundamental
				 lead: (direct)-> object true  @44400|conventional(22,2)
				 method: ("begin")-> method begin  @43952|bool(24,3)
				 input: (direct)-> literal (anon)  @22112|conventional(,)
				MAKE
				 object: (direct)-> object false  @40880|conventional(24,2) --'false'
				 type: ("bool")-> type bool  @19936|bool(5,6)
				MAKE
				 literal: (direct)-> literal (anon)  @12512|conventional(,) --'false'
				 type: ("expr")-> type expr  @18368|expr(5,6)
				CALL --initial, fundamental
				 lead: (direct)-> object false  @40880|conventional(24,2)
				 method: ("begin")-> method begin  @43952|bool(24,3)
				 input: (direct)-> literal (anon)  @12512|conventional(,)
			}
		}

		subroutine $start1  @29216|conventional(,) --internal
		 viable = yes
		{

			given
			{
			}

			BLOCK --domain
			{
				MAKE
				 object: (direct)-> object int_min  @38000|conventional(30,2) --'min'
				 type: ("int")-> type int  @21536|int(6,6)
				MAKE
				 literal: (direct)-> literal (anon)  @14432|conventional(,) --'min'
				 type: ("expr")-> type expr  @18368|expr(5,6)
				CALL --initial, fundamental
				 lead: (direct)-> object int_min  @38000|conventional(30,2)
				 method: ("begin")-> method begin  @31424|int(52,3)
				 input: (direct)-> literal (anon)  @14432|conventional(,)
				MAKE
				 object: (direct)-> object int_max  @38320|conventional(32,2) --'max'
				 type: ("int")-> type int  @21536|int(6,6)
				MAKE
				 literal: (direct)-> literal (anon)  @14752|conventional(,) --'max'
				 type: ("expr")-> type expr  @18368|expr(5,6)
				CALL --initial, fundamental
				 lead: (direct)-> object int_max  @38320|conventional(32,2)
				 method: ("begin")-> method begin  @31424|int(52,3)
				 input: (direct)-> literal (anon)  @14752|conventional(,)
				MAKE
				 object: (direct)-> object zero  @41840|conventional(34,2) --'0'
				 type: ("int")-> type int  @21536|int(6,6)
				MAKE
				 literal: (direct)-> literal (anon)  @22432|conventional(,) --'0'
				 type: ("expr")-> type expr  @18368|expr(5,6)
				CALL --initial, fundamental
				 lead: (direct)-> object zero  @41840|conventional(34,2)
				 method: ("begin")-> method begin  @31424|int(52,3)
				 input: (direct)-> literal (anon)  @22432|conventional(,)
				MAKE
				 object: (direct)-> object one  @38640|conventional(36,2) --'1'
				 type: ("int")-> type int  @21536|int(6,6)
				MAKE
				 literal: (direct)-> literal (anon)  @16672|conventional(,) --'1'
				 type: ("expr")-> type expr  @18368|expr(5,6)
				CALL --initial, fundamental
				 lead: (direct)-> object one  @38640|conventional(36,2)
				 method: ("begin")-> method begin  @31424|int(52,3)
				 input: (direct)-> literal (anon)  @16672|conventional(,)
				MAKE
				 object: (direct)-> object two  @38960|conventional(38,2) --'2'
				 type: ("int")-> type int  @21536|int(6,6)
				MAKE
				 literal: (direct)-> literal (anon)  @23072|conventional(,) --'2'
				 type: ("expr")-> type expr  @18368|expr(5,6)
				CALL --initial, fundamental
				 lead: (direct)-> object two  @38960|conventional(38,2)
				 method: ("begin")-> method begin  @31424|int(52,3)
				 input: (direct)-> literal (anon)  @23072|conventional(,)
				MAKE
				 object: (direct)-> object three  @40560|conventional(40,2) --'3'
				 type: ("int")-> type int  @21536|int(6,6)
				MAKE
				 literal: (direct)-> literal (anon)  @23392|conventional(,) --'3'
				 type: ("expr")-> type expr  @18368|expr(5,6)
				CALL --initial, fundamental
				 lead: (direct)-> object three  @40560|conventional(40,2)
				 method: ("begin")-> method begin  @31424|int(52,3)
				 input: (direct)-> literal (anon)  @23392|conventional(,)
				MAKE
				 object: (direct)-> object four  @41520|conventional(42,2) --'4'
				 type: ("int")-> type int  @21536|int(6,6)
				MAKE
				 literal: (direct)-> literal (anon)  @10592|conventional(,) --'4'
				 type: ("expr")-> type expr  @18368|expr(5,6)
				CALL --initial, fundamental
				 lead: (direct)-> object four  @41520|conventional(42,2)
				 method: ("begin")-> method begin  @31424|int(52,3)
				 input: (direct)-> literal (anon)  @10592|conventional(,)
				MAKE
				 object: (direct)-> object five  @37104|conventional(44,2) --'5'
				 type: ("int")-> type int  @21536|int(6,6)
				MAKE
				 literal: (direct)-> literal (anon)  @09632|conventional(,) --'5'
				 type: ("expr")-> type expr  @18368|expr(5,6)
				CALL --initial, fundamental
				 lead: (direct)-> object five  @37104|conventional(44,2)
				 method: ("begin")-> method begin  @31424|int(52,3)
				 input: (direct)-> literal (anon)  @09632|conventional(,)
				MAKE
				 object: (direct)-> object six  @34864|conventional(46,2) --'6'
				 type: ("int")-> type int  @21536|int(6,6)
				MAKE
				 literal: (direct)-> literal (anon)  @20512|conventional(,) --'6'
				 type: ("expr")-> type expr  @18368|expr(5,6)
				CALL --initial, fundamental
				 lead: (direct)-> object six  @34864|conventional(46,2)
				 method: ("begin")-> method begin  @31424|int(52,3)
				 input: (direct)-> literal (anon)  @20512|conventional(,)
				MAKE
				 object: (direct)-> object seven  @36784|conventional(48,2) --'7'
				 type: ("int")-> type int  @21536|int(6,6)
				MAKE
				 literal: (direct)-> literal (anon)  @20832|conventional(,) --'7'
				 type: ("expr")-> type expr  @18368|expr(5,6)
				CALL --initial, fundamental
				 lead: (direct)-> object seven  @36784|conventional(48,2)
				 method: ("begin")-> method begin  @31424|int(52,3)
				 input: (direct)-> literal (anon)  @20832|conventional(,)
				MAKE
				 object: (direct)-> object eight  @32944|conventional(50,2) --'8'
				 type: ("int")-> type int  @21536|int(6,6)
				MAKE
				 literal: (direct)-> literal (anon)  @18912|conventional(,) --'8'
				 type: ("expr")-> type expr  @18368|expr(5,6)
				CALL --initial, fundamental
				 lead: (direct)-> object eight  @32944|conventional(50,2)
				 method: ("begin")-> method begin  @31424|int(52,3)
				 input: (direct)-> literal (anon)  @18912|conventional(,)
				MAKE
				 object: (direct)-> object nine  @38704|conventional(52,2) --'9'
				 type: ("int")-> type int  @21536|int(6,6)
				MAKE
				 literal: (direct)-> literal (anon)  @16032|conventional(,) --'9'
				 type: ("expr")-> type expr  @18368|expr(5,6)
				CALL --initial, fundamental
				 lead: (direct)-> object nine  @38704|conventional(52,2)
				 method: ("begin")-> method begin  @31424|int(52,3)
				 input: (direct)-> literal (anon)  @16032|conventional(,)
				MAKE
				 object: (direct)-> object ten  @36144|conventional(54,2) --'10'
				 type: ("int")-> type int  @21536|int(6,6)
				MAKE
				 literal: (direct)-> literal (anon)  @19232|conventional(,) --'10'
				 type: ("expr")-> type expr  @18368|expr(5,6)
				CALL --initial, fundamental
				 lead: (direct)-> object ten  @36144|conventional(54,2)
				 method: ("begin")-> method begin  @31424|int(52,3)
				 input: (direct)-> literal (anon)  @19232|conventional(,)
				MAKE
				 object: (direct)-> object neg_one  @36464|conventional(56,2) --'-1'
				 type: ("int")-> type int  @21536|int(6,6)
				MAKE
				 literal: (direct)-> literal (anon)  @10912|conventional(,) --'-1'
				 type: ("expr")-> type expr  @18368|expr(5,6)
				CALL --initial, fundamental
				 lead: (direct)-> object neg_one  @36464|conventional(56,2)
				 method: ("begin")-> method begin  @31424|int(52,3)
				 input: (direct)-> literal (anon)  @10912|conventional(,)
			}
		}

		subroutine $start1  @15168|conventional(,) --internal
		 viable = yes
		{

			given
			{
			}

			BLOCK --domain
			{
				MAKE
				 object: (direct)-> object fp2_max  @40624|conventional(61,2) --'max'
				 type: ("fp2")-> type fp2  @23840|float(38,6)
				MAKE
				 literal: (direct)-> literal (anon)  @08352|conventional(,) --'max'
				 type: ("expr")-> type expr  @18368|expr(5,6)
				CALL --initial, fundamental
				 lead: (direct)-> object fp2_max  @40624|conventional(61,2)
				 method: ("begin")-> method begin  @04064|float(50,3)
				 input: (direct)-> literal (anon)  @08352|conventional(,)
				MAKE
				 object: (direct)-> object fp2_min  @35504|conventional(63,2) --'min'
				 type: ("fp2")-> type fp2  @23840|float(38,6)
				MAKE
				 literal: (direct)-> literal (anon)  @13792|conventional(,) --'min'
				 type: ("expr")-> type expr  @18368|expr(5,6)
				CALL --initial, fundamental
				 lead: (direct)-> object fp2_min  @35504|conventional(63,2)
				 method: ("begin")-> method begin  @04064|float(50,3)
				 input: (direct)-> literal (anon)  @13792|conventional(,)
				MAKE
				 object: (direct)-> object fp2_epsilon  @38384|conventional(65,2) --'epsilon'
				 type: ("fp2")-> type fp2  @23840|float(38,6)
				MAKE
				 literal: (direct)-> literal (anon)  @11232|conventional(,) --'epsilon'
				 type: ("expr")-> type expr  @18368|expr(5,6)
				CALL --initial, fundamental
				 lead: (direct)-> object fp2_epsilon  @38384|conventional(65,2)
				 method: ("begin")-> method begin  @04064|float(50,3)
				 input: (direct)-> literal (anon)  @11232|conventional(,)
				MAKE
				 object: (direct)-> object fp2_nan  @37744|conventional(67,2) --'nan'
				 type: ("fp2")-> type fp2  @23840|float(38,6)
				MAKE
				 literal: (direct)-> literal (anon)  @15072|conventional(,) --'nan'
				 type: ("expr")-> type expr  @18368|expr(5,6)
				CALL --initial, fundamental
				 lead: (direct)-> object fp2_nan  @37744|conventional(67,2)
				 method: ("begin")-> method begin  @04064|float(50,3)
				 input: (direct)-> literal (anon)  @15072|conventional(,)
				MAKE
				 object: (direct)-> object fp2_infinity  @35184|conventional(69,2) --'+infinity'
				 type: ("fp2")-> type fp2  @23840|float(38,6)
				MAKE
				 literal: (direct)-> literal (anon)  @18592|conventional(,) --'+infinity'
				 type: ("expr")-> type expr  @18368|expr(5,6)
				CALL --initial, fundamental
				 lead: (direct)-> object fp2_infinity  @35184|conventional(69,2)
				 method: ("begin")-> method begin  @04064|float(50,3)
				 input: (direct)-> literal (anon)  @18592|conventional(,)
			}
		}

		subroutine $start1  @10768|conventional(,) --internal
		 viable = yes
		{

			given
			{
			}

			BLOCK --domain
			{
				MAKE
				 object: (direct)-> object fp10_max  @39024|conventional(75,2) --'max'
				 type: ("fp10")-> type fp10  @20768|float(151,6)
				MAKE
				 literal: (direct)-> literal (anon)  @23712|conventional(,) --'max'
				 type: ("expr")-> type expr  @18368|expr(5,6)
				CALL --initial, fundamental
				 lead: (direct)-> object fp10_max  @39024|conventional(75,2)
				 method: ("begin")-> method begin  @03616|float(163,3)
				 input: (direct)-> literal (anon)  @23712|conventional(,)
				MAKE
				 object: (direct)-> object fp10_min  @40304|conventional(77,2) --'min'
				 type: ("fp10")-> type fp10  @20768|float(151,6)
				MAKE
				 literal: (direct)-> literal (anon)  @18272|conventional(,) --'min'
				 type: ("expr")-> type expr  @18368|expr(5,6)
				CALL --initial, fundamental
				 lead: (direct)-> object fp10_min  @40304|conventional(77,2)
				 method: ("begin")-> method begin  @03616|float(163,3)
				 input: (direct)-> literal (anon)  @18272|conventional(,)
				MAKE
				 object: (direct)-> object fp10_epsilon  @35824|conventional(79,2) --'epsilon'
				 type: ("fp10")-> type fp10  @20768|float(151,6)
				MAKE
				 literal: (direct)-> literal (anon)  @11872|conventional(,) --'epsilon'
				 type: ("expr")-> type expr  @18368|expr(5,6)
				CALL --initial, fundamental
				 lead: (direct)-> object fp10_epsilon  @35824|conventional(79,2)
				 method: ("begin")-> method begin  @03616|float(163,3)
				 input: (direct)-> literal (anon)  @11872|conventional(,)
				MAKE
				 object: (direct)-> object fp10_nan  @38064|conventional(81,2) --'nan'
				 type: ("fp10")-> type fp10  @20768|float(151,6)
				MAKE
				 literal: (direct)-> literal (anon)  @22752|conventional(,) --'nan'
				 type: ("expr")-> type expr  @18368|expr(5,6)
				CALL --initial, fundamental
				 lead: (direct)-> object fp10_nan  @38064|conventional(81,2)
				 method: ("begin")-> method begin  @03616|float(163,3)
				 input: (direct)-> literal (anon)  @22752|conventional(,)
				MAKE
				 object: (direct)-> object fp10_infinity  @39344|conventional(83,2) --'+infinity'
				 type: ("fp10")-> type fp10  @20768|float(151,6)
				MAKE
				 literal: (direct)-> literal (anon)  @15392|conventional(,) --'+infinity'
				 type: ("expr")-> type expr  @18368|expr(5,6)
				CALL --initial, fundamental
				 lead: (direct)-> object fp10_infinity  @39344|conventional(83,2)
				 method: ("begin")-> method begin  @03616|float(163,3)
				 input: (direct)-> literal (anon)  @15392|conventional(,)
			}
		}

		object eight  @32944|conventional(50,2) --external
		 type: ("int")-> type int  @21536|int(6,6)

		object false  @40880|conventional(24,2) --external
		 type: ("bool")-> type bool  @19936|bool(5,6)

		object five  @37104|conventional(44,2) --external
		 type: ("int")-> type int  @21536|int(6,6)

		object four  @41520|conventional(42,2) --external
		 type: ("int")-> type int  @21536|int(6,6)

		object fp10_epsilon  @35824|conventional(79,2) --external
		 type: ("fp10")-> type fp10  @20768|float(151,6)

		object fp10_infinity  @39344|conventional(83,2) --external
		 type: ("fp10")-> type fp10  @20768|float(151,6)

		object fp10_max  @39024|conventional(75,2) --external
		 type: ("fp10")-> type fp10  @20768|float(151,6)

		object fp10_min  @40304|conventional(77,2) --external
		 type: ("fp10")-> type fp10  @20768|float(151,6)

		object fp10_nan  @38064|conventional(81,2) --external
		 type: ("fp10")-> type fp10  @20768|float(151,6)

		object fp2_epsilon  @38384|conventional(65,2) --external
		 type: ("fp2")-> type fp2  @23840|float(38,6)

		object fp2_infinity  @35184|conventional(69,2) --external
		 type: ("fp2")-> type fp2  @23840|float(38,6)

		object fp2_max  @40624|conventional(61,2) --external
		 type: ("fp2")-> type fp2  @23840|float(38,6)

		object fp2_min  @35504|conventional(63,2) --external
		 type: ("fp2")-> type fp2  @23840|float(38,6)

		object fp2_nan  @37744|conventional(67,2) --external
		 type: ("fp2")-> type fp2  @23840|float(38,6)

		object int_max  @38320|conventional(32,2) --external
		 type: ("int")-> type int  @21536|int(6,6)

		object int_min  @38000|conventional(30,2) --external
		 type: ("int")-> type int  @21536|int(6,6)

		object neg_one  @36464|conventional(56,2) --external
		 type: ("int")-> type int  @21536|int(6,6)

		object nine  @38704|conventional(52,2) --external
		 type: ("int")-> type int  @21536|int(6,6)

		object no_addr  @44080|conventional(14,2) --external
		 type: ("addr")-> type addr  @44496|addr(4,6)

		object no_handle  @41200|conventional(16,2) --external
		 type: ("handle")-> type handle  @23456|handle(5,6)

		object one  @38640|conventional(36,2) --external
		 type: ("int")-> type int  @21536|int(6,6)

		object seven  @36784|conventional(48,2) --external
		 type: ("int")-> type int  @21536|int(6,6)

		object six  @34864|conventional(46,2) --external
		 type: ("int")-> type int  @21536|int(6,6)

		object ten  @36144|conventional(54,2) --external
		 type: ("int")-> type int  @21536|int(6,6)

		object three  @40560|conventional(40,2) --external
		 type: ("int")-> type int  @21536|int(6,6)

		object true  @44400|conventional(22,2) --external
		 type: ("bool")-> type bool  @19936|bool(5,6)

		object two  @38960|conventional(38,2) --external
		 type: ("int")-> type int  @21536|int(6,6)

		object zero  @41840|conventional(34,2) --external
		 type: ("int")-> type int  @21536|int(6,6)
	}

}

