page codechef_reverse in ExamplesByNod

{{
	https://www.codechef.com/practice/course/cpp/LPCPAS13B/problems/CPPPTR2
}}



[page] subroutine demo1
{{
	read array from console, display in reverse
}}
{

	sys:use_console is ~console;

	text_mediator input:begin;  -- platform encoding

	~console:read( *input ); -- line 1, ignore errors
	input:fread<int>()( int n );  -- generic text format

	if ( "n |>| zero" )
	{
		array<int> values:begin( n );

		~console:read( *input );  -- line2, ignore errors
	
		-- parse input

		int i:begin;
		loop ( "i |<| n" )
		{
			input:fread<int>()( values:use( i ) ); -- generic text (skips leading space)
			i:inc;
		}

		-- format output 

		unicode space:begin( 'U+0020' );

		text_mediator output:begin;
		loop
		{
			output:fwrite<int>( values:use( n:dec ) );
			if ( "n |=| zero" ) escape;
			output:write( space );
		}

		~console:write( *output );  -- ignore errors
	}
}


[page] subroutine demo2
{{
	read array from console, invert array, display array
}}
{
	sys:use_console is ~console;

	text_mediator input:begin;  -- platform encoding

	~console:read( *input ); -- line 1, ignore errors
	input:fread<int>()( int n );  -- generic text format

	if ( "n |>| zero" )
	{
		array<int> values:begin( n );

		~console:read( *input );  -- line2, ignore errors
	
		-- parse input

		int i:begin;
		loop ( "i |<| n" )
		{
			input:fread<int>()( values:use( i ) ); -- generic text (skips leading space)
			i:inc;
		}

		reverse_array_1 ( *values );

		-- format output 

		text_mediator output:begin:fwrite<int>( values:use( zero ) );

		i:recycle:begin ( one );
		loop ( "i |<| n" )
		{
			output:write( 'U+0020' as unicode ):fwrite<int>( values:use( i ) );
			i:inc;
		}

		~console:write( *output );  -- ignore errors
	}
}



subroutine reverse_array_1 ( array<int> arr [upd] )
{
	int i:begin;
	int j:begin( arr:count()( =int ):sub( one ) );
	loop ( "i |<| j" )
	{
		int ni:begin( arr:use( i ) );
		arr:use( i ):recycle:begin( arr:use( j ) );
		arr:use( j ):recycle:begin( ni );
		i:inc;
		j:dec;
	}
}


subroutine reverse_array_2 ( array<int> arr [upd] )
{
	int i:begin;
	int j:begin( arr:count()( =int ):sub( one ) );
	loop ( "i |<| j" )
	{
		arr:use( i ) is [init] ~ni;
		arr:use( j ) is [init] ~nj;

		int ni:begin( ~ni );  -- copy
		~ni <= ~nj;
		~nj <= ni;

		i:inc;
		j:dec;
	}
}