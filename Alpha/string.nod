
page string in AlphaByNod

type string from contiguous<unicode>
{{
	A string is a static unicode character sequence.
	
	strings have [eval] methods that mimic expr methods.
	They can be copied and evaluated, but not modified.

	There are 5 ways to create a string:
	
	(1) using a heap addr:

		string assumes ownership of addr.  If len is not
		specified, the caracter sequence must be delimited
		by a zero char (aka "null-terminated").  Encoding
		must be specified.  Note: a mediator or compatible
		subroutine is usually the source for this initial-
		izer.
	
	(2) from sequential collection of characters:

		encoding must be specified, length is determined
		by the sequential cursor.

	(3) from ascii expr (literal):

		If encoding is not specified, platform default 
		encoding is	used (see alpha\mediator).

	(4) copy another


	(5) from mediator

		fex specifies external encoding and delimitation.
		Binary formats usually use intrinsic string encoding
		and length or null delimitation. Text formats use 
		mediator encoding and some kind	of quotation or eol 
		delimitation.

		Note: generic binary 'b' uses platform encoding and
		and null-delimitation, making it a platform compat-
		ible c string.

	A string is a contiguous subtype, but any attempt to 
	modify the value (with :use[upd] or :use[init] ) will
	disrupt the app.

}}
{
	nom type sequential<c> = sequential<unicode><<c>>;

	general method
	{
		begin ( addr, utf, endian, int len [opt] );  -- sequence in mem

		begin<c> ( sequential<<c>> source, utf, endian );  -- sequential collection
		
		begin ( expr, utf [opt], endian [opt] );  -- expr/literal conversion

		begin ( string other );  -- copy 

		begin ( mediator [upd], expr fex );	

		store ( mediator [upd], expr fex );
		

		get_encoding ()( utf, endian );
		
		get_length ()( int );


		equal? ( string other, int q [opt] )( bool ); 

		before? ( string other )( bool );


		extract ( int i, int q )( string );	-- sub-expression

		extract ( int i )( unicode );	 -- one char 

		extract ( int i [opt], int q [opt] )( array<unicode> );  -- multiple chars

		find ( string other, int i [upd] )( bool );

		scan ( int i [upd] ) with stop? ( string, int i )( bool );
	}

	abstract in contiguous<unicode>
	{
		[final] ~count ()( int );	

		[final] ~use ( int i ) = unicode proxy; 
	}
}
