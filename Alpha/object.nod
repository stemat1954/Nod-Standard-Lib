
page object in AlphaByNod

type object  -- virtual, restricted
{{
	This is a special virtual type definition. 
	
	This definition also serves as a domain for primary
	methods.
	
	Primary methods and virtual type object have special 
	status in Nod.  
	
	Conceptually, type object is a virtual base type from
	which all other types derive, while primary methods	
	automatically belong to every type definition (includ-
	ing this one).
	
	Technically, primary methods aren't inherited from
	type object.  Rather, they're "included" by the com-
	piler, as if they were written explicitly in the type
	definition.
	
	:as_base<> has reserved permission syntax and never
	returns a void proxy because the type ref can always
	be verified at compile time.

	The other generic type methods require an implicit
	object accessed by proxy. 

}}
{
	general 
	{
		null? [eval]()( bool );

		not_null? [eval]()( bool );

		recycle [term];	 


		use_typeid [eval] = typeid proxy [eval];  -- access 

		get_typeid [eval]()( typeid );	-- copy

		get_addr [eval]()( addr );  -- copy


		as_base<t> [eval] = <t> proxy [eval,upd,init];  -- see notes
	}

	general -- by proxy 
	{
		is<t>? [eval]()( bool );  

		as<t> [eval] = <t> proxy [eval,upd];	-- may be void

		is_actual<t>? [eval]()( bool );

		as_actual<t> [eval] = <t> proxy [eval,init];  -- may be void
	}
}