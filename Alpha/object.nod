
page object in AlphaByNod

type object  -- virtual, restricted
{{
	This is a special virtual type definition.  It serves
	as a domain for universal methods.
	
	Type object and universal methods have special status
	in Nod.  
	
	Conceptually, type object is a virtual base type from
	which all other types derive, while universal methods
	are	general methods that the compiler automatically 
	includes in every type definition (including this one).
	
	Technically, universal methods aren't inherited from
	type object.  Rather, they're "included," as if they 
	were written explicitly in the type definition.
	
	Universal methods evaluate the construction of an object
	rather than it's value. In particular, universal methods 
	can be called for null objects without causing disrup-
	tion.

	:recycle reconstructs an object without changing the
	object's addr. A recycled object has a null value.

	:as_base<> has reserved permission syntax and never
	returns a void proxy because the type ref can always
	be verified at compile time.
}}
{
	general 
	{
		is_null? [eval]()( bool );

		is_not_null? [eval]()( bool );


		use_typeid [eval] = typeid proxy [eval];  -- access 

		get_typeid [eval]()( typeid );	-- copy

		get_addr [eval]()( addr );  -- copy

	
		is<t>? [eval]()( bool );  

		is_actual<t>? [eval]()( bool );


		as<t> [eval] = <t> proxy [eval,upd];	-- may be void

		as_actual<t> [eval] = <t> proxy [eval,init];  -- may be void

		as_base<t> [eval] = <t> proxy [eval,upd,init]; 


		recycle [term];	 

	}
}