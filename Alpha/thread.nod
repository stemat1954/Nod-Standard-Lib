
page thread in AlphaByNod


enum type thread_state ( 'new', 'starting', 'active', 'stopping', 'done', 'dead' );
{{
	A thread exists in one of six states: five normal
	and one abnormal:

	'new'		=> initialized
	'starting'	=> start_thread called, but entry:~run has not indicated active
	'active'	=> entry:~run has indicated active
	'stopping'	=> :stop called, but not done
	'done'		=> normal return from entry:~run 
	'dead'		=> :kill called or entry:~run was trapped
}}



type thread -- intrinsic
{{
	A thread object represents a system thread.  It	can be 
	used to control and monitor a running thread. 
	
	An op<thread> is returned by start_thread. See sub-
	routine definition later on this page.
		
	:wait returns when the thread state changes. 

	One version of :wait returns when the thread has reached 
	a specified state or it times-out. An output indicator
	is 'true' if the state was reached, or 'false' if the
	wait timed-out.
	
	Another version of :wait returns when the state has 
	changed from the last state it returned on. The first
	time it returns when the state is not 'new'. The state
	that releases :wait is copied to an output.
	
	:get_trace copies the

	A thread cannot be incorrectly controlled. State
	progression is well behaved.  Extraneous or redun-
	dent control calls are ignored. Once a thread is 
	'done' or 'dead', it cannot be restarted.
}}
{
	general
	{
		begin;

		stop;

		kill;

		wait ( thread_state, etm [opt] )( bool ); 

		wait ( etm [opt] )( thread_state ); 

		get_state ()( thread_state );

		get_id ()( expr );

		use_handle = handle proxy [eval];
	}
}



subroutine
{
	get_thread_id ()( expr ); -- of caller

	get_process_id ()( expr ); -- of caller

	start_thread<ept> ( op<object> [opt] )( op<thread> ); 
	{{
		This subroutine creates an entry point object of 
		type <ept> which derives from alpha\entry, then 
		calls adaptable entry method :run on a new thread,
		forwarding the given object pointer. The entry 
		point object is created in the new thread's stack
		memory.

		A thread object that controls the new thread is
		returned in an output op.
	}}
}

