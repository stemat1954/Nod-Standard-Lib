page text_channel in StockByNod


{{
	A text channel is a synchronous i/o channel specialized
	for unicode	data transfer through a text mediator.
	
	i/o text encoding is device dependent. The text mediator
	must be configured with compatible encoding.
	
	Text channels read and write without a time limit. A
	transfer was successful if an output error string is
	null.

	Writing is straightforward.  The base channel write 
	method is called in a loop until the whole message is 
	transferred. 

	Reading is more complicated. The base channel is read 
	one code unit at a time until a given count of char-
	acters is transferred, or until a given delimiter
	character is read.
}}


[page] subroutine
{
	read_channel_str ( sync_channel_reader reader [upd], text_mediator tm [upd], int q )( string error )  -- q chars
	{
		int need:begin( q );
		loop
		{
			read_channel_chr( *reader, *tm )( error );
			if ( "is_not_null?( error )" ) escape;

			need:dec;
			if ( "need |=| zero" ) escape;
		}
	}

	read_channel_str ( sync_channel_reader reader [upd], text_mediator tm [upd], unicode c )( string error )  -- delimited by c
	{
		tm:get_rp()( int mark ):set_rp_end;
		loop
		{
			read_channel_chr( *reader, *tm )( error );
			if ( "is_not_null?( error )" ) escape;

			tm:read()( unicode c2 );  -- last char
			if ( "c2 |=| c" ) escape;
		}
		tm:set_rp( mark ); -- start of new data
	}


	read_channel_chr ( sync_channel_reader reader [upd], text_mediator tm [upd] )( string error )
	{
		tm:reserve;  -- one code point
		read_channel( *reader, *tm )( error );
		if ( "is_null?( error )" )
		{
			tm:reserve()( bool again );
			if ( again ) read_channel( *reader, *tm )( error );
		}
	}


	read_channel ( sync_channel_reader reader [upd], text_mediator tm [upd] )( string error )
	{
		loop
		{
			reader:read( *tm )( channel_report report, string note );
			
			if ( "report |=| 'good'" ) escape;
			
			evaluate_transfer( report, note )( error );
			if ( "is_not_null?( error)" ) escape;
		}
	}

	write_channel ( sync_channel_writer writer [upd], text_mediator tm [upd] )( string error )
	{
		loop
		{
			writer:write( *tm )( channel_report report, string note );
			
			if ( "report |=| 'good'" ) escape;
			
			evaluate_transfer( report, note )( error );
			if ( "is_not_null?( error)" ) escape;
		}
	}

	evaluate_transfer ( channel_report cr, string note [opt] )( string error )
	{
		select( cr )
		{
			value ( 'retry' );  -- partial transfer, no error

			value ( 'closed' )
			{
				error:begin( 'channel closed' );
			}

			value ( 'error' )
			{	
				text_mediator tm:begin( 'channel error [' );
				if ( "is_not_null?( note )" ) tm:write( note );
				tm:write( ']' );
				tm:detach()( error );
			}

			else -- 'pending', 'busy', 'end', 'other'
			{
				text_mediator:begin( 'unexpected channel report [' ):write( cr:use_token ):write( ']' ):detach()( error );
			}
		}
	}
}



type read_only_text_channel from sync_read_only_channel
{
	general
	{
		begin ( handle h )
		{
			io:as_base<sync_read_only_channel>:begin( h );
		}

		read [upd]( text_mediator tm [upd], int q )( string error )  -- q chars
		{
			read_channel_str( *io:as_base<sync_channel_reader>, *tm, q )( error );
		}

		read [upd]( text_mediator tm [upd], unicode c )( string error ) -- delimiter c
		{
			read_channel_str( *io:as_base<sync_channel_reader>, *tm, c)( error );
		}
	}
}


type read_write_text_channel from sync_read_write_channel
{
	general
	{
		begin ( handle )
		{
			io:as_base<sync_read_write_channel>:begin( given\handle );
		}

		read [upd]( text_mediator tm [upd], int q )( string error ) -- q chars
		{
			read_channel_str( *io:as_base<sync_channel_reader>, *tm, q )( error );
		}

		read [upd]( text_mediator tm [upd], unicode c )( string error ) -- delimiter c
		{
			read_channel_str( *io:as_base<sync_channel_reader>, *tm, c )( error );
		}

		write [upd]( text_mediator tm [upd] )( string error )
		{
			write_channel( *io:as_base<sync_channel_writer>, *tm )( error );
		}
	}
}



